use warehouse MY_DATABASE;
use database MY_DATABASE;
use role sysadmin;

    
/*
select usr.USER_ID, usr_pro.USER_PROFILE_ID
*/

--  16,172,003
--  16,172,003

--TRUNCATE TABLE MY_DATABASE.PUBLIC.JOHN_PAUL_SENT;


SELECT lc.TYPE AS "Licence Type", COUNT(lc.ID) AS "Number of Licence" FROM MY_DATABASE.PUBLIC.LICENSES lc 
LEFT JOIN 
    MY_DATABASE.PUBLIC.USER_PROFILES usr_pr 
ON 
    lc.USER_PROFILE_ID = usr_pr.ID 
LEFT JOIN    
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    usr_pr.COMPANY_ID = comp.ID
WHERE 
    usr_pr.ROLE = 2 AND lc.ENDED_AT IS NULL AND comp.CONTRACT = 0
GROUP BY 
    lc.TYPE;

/*
le nombre d’utilisateurs sur my_company ? (total = 33603, porteurs de carte = 11310, sans carte = 27215)
*/

/*
le nombre d’utilisateurs sur my_company ? (porteurs de carte = 11310)
*/   
SELECT 
    COUNT(DISTINCT usr_pr.USER_ID) AS Total_Users_with_card
FROM 
    MY_DATABASE.PUBLIC.USER_PROFILES usr_pr
INNER JOIN   
    MY_DATABASE.PUBLIC.CARDS crd
ON
    usr_pr.ID = crd.USER_PROFILE_ID
WHERE 
    crd.DEPRECATED_AT IS NULL;


/*
le nombre d’utilisateurs sur my_company ? (sans carte = 27215) Q1
*/  
SELECT 
    COUNT(DISTINCT usr_pr.USER_ID) AS Total_Users_without_card
FROM 
    MY_DATABASE.PUBLIC.USER_PROFILES usr_pr, MY_DATABASE.PUBLIC.CARDS crd
WHERE
    usr_pr.ID != crd.USER_PROFILE_ID AND usr_pr.ACTIVE = TRUE AND usr_pr.DELETED_AT IS NULL AND usr_pr.ARCHIVED_AT IS NULL;
    
SELECT 
    COUNT(DISTINCT usr_pr.USER_ID) AS Total_Users_without_card
FROM 
    MY_DATABASE.PUBLIC.USER_PROFILES usr_pr, MY_DATABASE.PUBLIC.CARDS crd, MY_DATABASE.PUBLIC.COMPANIES comp
WHERE
    usr_pr.ID != crd.USER_PROFILE_ID AND usr_pr.ACTIVE = TRUE AND usr_pr.DELETED_AT IS NULL AND usr_pr.ARCHIVED_AT IS NULL AND usr_pr.COMPANY_ID = comp.ID;


with a as (select to_variant('{"high_touch": false, "block_users": false, "whereareyou": "3 - Missing Payment method", "block_admins": false, "use_vip_cards": false, "use_named_cards": false, "block_expressloads": false, "manual_expense_only": false, "active_with_expenses": false, "tmp_manual_expenses_only": false, "do_not_enforce_kyc_typeform": false, "tmp_with_probative_value_archiving": false}') as comp)
select LEFT(parse_json(comp):whereareyou::string, 1) AS flg from a;


with a as (select to_variant(SELECT FLAGS from MY_DATABASE.PUBLIC.COMPANIES WHERE ID = '4e731545-0bb8-4cce-aa57-dbbed9460d32') as comp)
select LEFT(parse_json(comp):whereareyou::string, 1) AS flg from a;

    
    
SELECT  ce.id, card_id , mm.name,ex.title, mm.id as merchant_id,ce.debited_at , ex.amount , company_id , user_profile_id from "MY_DATABASE"."PUBLIC"."CARD_EXPENSES" CE
    left join "MY_DATABASE"."PUBLIC"."EXPENSES" EX  on EX.source_id=CE.id
    left join "MY_DATABASE"."PUBLIC"."MASTERCARD_MERCHANTS" mm on mm.id= ce.mastercard_merchant_id
    where mm.MERCHANT_CATEGORY_CODE =4215 ORDER BY DEBITED_AT ASC;    


//PARSE JSON PARSE_JSON


SELECT DISTINCT up.id FROM "MY_DATABASE". "PUBLIC". "USER_PROFILES" up
LEFT JOIN "MY_DATABASE". "PUBLIC". "USERS" us 
    on us. id=up.user_id
LEFT JOIN "MY_DATABASE". "PUBLIC"."CARDS" ca 
    on ca.user_profile_id= up.id
LEFT JOIN "MY_DATABASE". "PUBLIC". "COMPANIES" cp 
    on cp.id= up.company_id
WHERE
    up. ARCHIVED_AT IS NULL AND Up.DELETED_AT IS null AND up.ACTIVE=TRUE
    AND ca.id IS NOT NULL 
    AND LEFT(PARSE_JSON (cp.flags): whereareyou, 1) IN ('5', '6', '7', '8') AND cp.contract=0
    AND us.LAST_SIGN_IN_AT> TO_DATE('2021-09-01');


SELECT * FROM "MY_DATABASE"."PUBLIC"."MASTERCARD_MERCHANTS" mc WHERE mc.MERCHANT_CATEGORY_CODE = 4784;

SELECT * FROM "MY_DATABASE"."PUBLIC"."MASTERCARD_TRANSACTIONS" mc_tr WHERE PARSE_JSON(mc_tr.DATA): MCC_Code = '4784' LIMIT 3;

SELECT PARSE_JSON(mc_tr.DATA): MCC_Desc AS MCC_Desc  FROM "MY_DATABASE"."PUBLIC"."MASTERCARD_TRANSACTIONS" mc_tr WHERE PARSE_JSON(mc_tr.DATA): MCC_Code = '4784' LIMIT 3;


SELECT mc.*, c_exp.ID AS c_xp_ID, mc_tr.*  FROM 
    "MY_DATABASE"."PUBLIC"."MASTERCARD_MERCHANTS" mc
INNER JOIN 
    "MY_DATABASE"."PUBLIC"."CARD_EXPENSES" c_exp
ON
    mc.ID = c_exp.MASTERCARD_MERCHANT_ID
INNER JOIN 
    "MY_DATABASE"."PUBLIC"."MASTERCARD_TRANSACTIONS" mc_tr
ON
    c_exp.ID = mc_tr.CARD_EXPENSE_ID
WHERE 
    mc.MERCHANT_CATEGORY_CODE = 4784
ORDER BY mc.CREATED_AT ASC;    
    
SELECT mc.ID, mc.NAME, mc.COUNTRY, mc.MERCHANT_CATEGORY_CODE, mc.CREATED_AT, PARSE_JSON(mc_tr.DATA): MCC_Code::string AS MCC_code, PARSE_JSON(mc_tr.DATA): Merch_Name::string AS Merch_Name, PARSE_JSON(mc_tr.DATA): MCC_Desc::string AS MCC_Desc, mc_tr.TRANSACTION_TYPE, mc_tr.TRANSACTION_STATUS, PARSE_JSON(mc_tr.DATA): Merch_ID_DE42::string AS Merch_ID_DE42, PARSE_JSON(mc_tr.DATA): Acquirer_id_DE32::string AS Acquirer_id_DE32 FROM 
    "MY_DATABASE"."PUBLIC"."MASTERCARD_MERCHANTS" mc
INNER JOIN
    "MY_DATABASE"."PUBLIC"."MASTERCARD_TRANSACTIONS" mc_tr
ON
    TO_VARCHAR(mc.MERCHANT_CATEGORY_CODE) = PARSE_JSON(mc_tr.DATA): MCC_Code
WHERE 
    mc.MERCHANT_CATEGORY_CODE = 4784 AND mc_tr.TRANSACTION_TYPE = 16 AND mc_tr.TRANSACTION_STATUS = 19 LIMIT 350000;
    
SELECT COUNT(ID) AS Number FROM "MY_DATABASE"."PUBLIC"."MASTERCARD_MERCHANTS" mc WHERE mc.MERCHANT_CATEGORY_CODE = 4784;    


SELECT RIGHT(PARSE_JSON(mc_tr.DATA): Acquirer_id_DE32,5) FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mc_tr LIMIT 100; 
// AND RIGHT(PARSE_JSON(mc_tr.DATA): Acquirer_id_DE32::string,5) = "30003" LIMIT 100;
SELECT mc_tr.DATA:Acquirer_id_DE32::string AS Acquirer_id_DE32 FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mc_tr WHERE RIGHT(Acquirer_id_DE32, 5) = '12653' LIMIT 100; 

SELECT 
    mc_tr.ID, mc_tr.DATA:Acquirer_id_DE32::string AS Acquirer_id_DE32 
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mc_tr 
WHERE 
    mc_tr.DATA:Acquirer_id_DE32::string IS NOT NULL 
    AND 
    RIGHT(mc_tr.DATA:Acquirer_id_DE32,5) = 30003 LIMIT 100;
    

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.soc_tmp_view AS
SELECT 
    mc_tr.ID, mc_tr.CARD_EXPENSE_ID, mc_tr.DATA:Acquirer_id_DE32::string AS Acquirer_id_DE32, RIGHT(mc_tr.DATA:Acquirer_id_DE32::string, 5) AS Rght_id_DE32, mc_tr.DATA:Merch_ID_DE42::string AS Merch_ID_DE42, mc_tr.DATA:MCC_Code::string AS MCC_code, mc_tr.AT, mc_tr.TRANSACTION_TYPE, mc_tr.TRANSACTION_STATUS    
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mc_tr 
WHERE 
    mc_tr.DATA:Acquirer_id_DE32::string IS NOT NULL 
    AND mc_tr.TRANSACTION_TYPE IN (1, 16) 
    AND mc_tr.TRANSACTION_STATUS IN (1, 19) 
    AND Merch_ID_DE42 IS NOT NULL
    AND MCC_code IS NOT NULL
    AND mc_tr.AT IS NOT NULL
    AND mc_tr.CARD_EXPENSE_ID IS NOT NULL
    AND RIGHT(Acquirer_id_DE32, 5) = '12653'
    ORDER BY mc_tr.AT ASC
    LIMIT 100;


CREATE TEMPORARY STAGE my_temp_stage;

COPY INTO @my_temp_stage/output_filex
FROM (
  
SELECT 
    mc_tr.ID, mc_tr.CARD_EXPENSE_ID, mc_tr.DATA:Acquirer_id_DE32::string AS Acquirer_id_DE32, LEFT(mc_tr.DATA:Acquirer_id_DE32::string, 5) AS Rght_id_DE32, mc_tr.DATA:Merch_ID_DE42::string AS Merch_ID_DE42, mc_tr.DATA:MCC_Code::string AS MCC_code, mc_tr.AT, mc_tr.TRANSACTION_TYPE, mc_tr.TRANSACTION_STATUS    
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mc_tr 
WHERE 
    mc_tr.DATA:Acquirer_id_DE32::string IS NOT NULL 
    AND mc_tr.TRANSACTION_TYPE IN (1, 16) 
    AND mc_tr.TRANSACTION_STATUS IN (1, 19) 
    AND Merch_ID_DE42 IS NOT NULL
    AND MCC_code IS NOT NULL
    AND mc_tr.AT IS NOT NULL
    AND mc_tr.CARD_EXPENSE_ID IS NOT NULL
    AND Rght_id_DE32 = '30003'
    ORDER BY mc_tr.AT ASC
  
)
FILE_FORMAT = ( 
 TYPE='CSV' 
 COMPRESSION=GZIP 
 FIELD_DELIMITER=',' 
 ESCAPE=NONE 
 ESCAPE_UNENCLOSED_FIELD=NONE 
 date_format='AUTO' 
 time_format='AUTO' 
 timestamp_format='AUTO'
 binary_format='UTF-8' 
 field_optionally_enclosed_by='"' 
 null_if='' 
 EMPTY_FIELD_AS_NULL = FALSE 
)  
overwrite=TRUE 
single=FALSE 
max_file_size=5368709120 
header=TRUE;

ls @my_temp_stage;

GET @my_temp_stage file:///Users/vadramandisang/Documents/Vadrama/data/Product/Peage;


SELECT 
    /* DISTINCT exp.ID AS Exp_ID, exp.AMOUNT, crd_exp.MASTERCARD_MERCHANT_ID, mcrd_mch.ID, exp.CREATED_AT, mcrd_mch.NAME */
     DISTINCT exp.ID, exp.AMOUNT, exp.CREATED_AT, mcrd_mch.NAME 
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
WHERE exp.CREATED_AT >= TO_DATE('2021-01-01')
ORDER BY exp.CREATED_AT ASC;


CREATE TEMPORARY STAGE tmp_stage_dir_name;

COPY INTO @tmp_stage_dir_name/output_filex
FROM ( 
      SELECT 
           DISTINCT exp.ID, exp.AMOUNT, exp.CREATED_AT, mcrd_mch.NAME 
      FROM
          MY_DATABASE.PUBLIC.EXPENSES exp
      INNER JOIN 
          MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
      ON
          exp.SOURCE_ID = crd_exp.ID
      INNER JOIN
          MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
      ON
          crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
      WHERE exp.CREATED_AT >= TO_DATE('2021-01-01')
      ORDER BY exp.CREATED_AT ASC  
)
FILE_FORMAT = ( 
 TYPE='CSV' 
 COMPRESSION=GZIP 
 FIELD_DELIMITER=',' 
 ESCAPE=NONE 
 ESCAPE_UNENCLOSED_FIELD=NONE 
 date_format='AUTO' 
 time_format='AUTO' 
 timestamp_format='AUTO'
 binary_format='UTF-8' 
 field_optionally_enclosed_by='"' 
 null_if='' 
 EMPTY_FIELD_AS_NULL = FALSE 
)  
overwrite=TRUE 
single=FALSE 
max_file_size=5368709120 
header=TRUE;

ls @tmp_stage_dir_name;

GET @tmp_stage_dir_name file:///Users/vadramandisang/Documents/Vadrama/data/Product/Merchants2;

SELECT 
    usr_pr.ROLE, COUNT(usr_pr.ID) AS nb_Collabs 
FROM 
    MY_DATABASE.PUBLIC.USER_PROFILES usr_pr 
WHERE 
    usr_pr.ACTIVE = TRUE 
    AND usr_pr.ARCHIVED_AT IS NULL 
    AND usr_pr.DELETED_AT IS NULL
GROUP BY
    usr_pr.ROLE; 

SELECT * FROM LEAD_DB.PUBLIC.COMPTES_CAMILLE LIMIT 1000;



SELECT 
    cmp.ID AS Company_Id, COUNT(cmp.ID) AS nbr
FROM
    MY_DATABASE.PUBLIC.COMPANIES cmp
INNER JOIN
    MY_DATABASE.PUBLIC.LICENSES lc
ON
    cmp.ID = lc.COMPANY_ID
WHERE
    LEFT(PARSE_JSON(cmp.FLAGS):whereareyou::string, 1) IN (5,6,7,8)
    AND cmp.CONTRACT = 0
    AND lc.ENDED_AT IS NULL
GROUP BY cmp.ID;
    
    
SELECT 
    COUNT(usr_pr.ID)    
FROM 
    MY_DATABASE.PUBLIC.USER_PROFILES usr_pr
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES cmp
ON
     usr_pr.COMPANY_ID = cmp.ID
WHERE 
    usr_pr.ROLE = 2 
    AND usr_pr.ARCHIVED_AT IS NULL
    AND usr_pr.DELETED_AT IS NULL
    AND LEFT(PARSE_JSON(cmp.FLAGS):whereareyou::string, 1) IN (5,6,7,8)
    AND cmp.CONTRACT = 0;
    
    
SELECT COUNT(DISTINCT mup.MANAGER_ID) AS Responsables FROM MY_DATABASE.PUBLIC.MANAGER_USER_PROFILES mup;
/*
MY_DATABASE.PUBLIC.CARDS
MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS
MY_DATABASE.PUBLIC.CARD_EXPENSES
*/
SELECT 
    ROUND(SUM(exp.AMOUNT/-1.00),2) AS Amount, mc.MERCHANT_CATEGORY_CODE
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON 
   exp.SOURCE_ID = crd_exp.ID
INNER JOIN   
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mc
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mc.ID
WHERE
    exp.COMPANY_ID = 'f1f1254c-ac8b-47f1-bde4-09912b6061f8'
    AND mc.MERCHANT_CATEGORY_CODE = 5541
    OR mc.MERCHANT_CATEGORY_CODE = 5542
GROUP BY
    mc.MERCHANT_CATEGORY_CODE;
    
    
SELECT 
    ROUND(SUM(exp.AMOUNT/-1.00),2) AS Amount, mc.MERCHANT_CATEGORY_CODE
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON 
   exp.SOURCE_ID = crd_exp.ID
INNER JOIN   
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mc
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mc.ID
WHERE
    exp.COMPANY_ID = 'f1f1254c-ac8b-47f1-bde4-09912b6061f8'
    AND LOWER(mc.NAME) = 'lidl'
GROUP BY
    mc.MERCHANT_CATEGORY_CODE;

SELECT ID FROM MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS WHERE LOWER(NAME) = 'lidl'    


SELECT 
     mc.MERCHANT_CATEGORY_CODE, mc.NAME
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON 
   exp.SOURCE_ID = crd_exp.ID
INNER JOIN   
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mc
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mc.ID
WHERE
    exp.COMPANY_ID = 'f1f1254c-ac8b-47f1-bde4-09912b6061f8'
    AND LOWER(mc.NAME) = 'lidl';
    
// SELECT LEFT(gc.METHOD, 14) AS METHOD, gc.CREATED_AT, COUNT(DISTINCT gc.ID) AS ValueCount FROM MY_DATABASE.PUBLIC.GENERALI_CALLS gc WHERE gc.CREATED_AT <= TO_DATE('2021-10-27') GROUP BY gc.METHOD, gc.CREATED_AT ORDER BY gc.CREATED_AT ASC;  
    
    
CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.acc_tmp AS    
SELECT LEFT(gc.METHOD, 14) AS METHOD, gc.CREATED_AT, COUNT(DISTINCT PARSE_JSON(gc.MESSAGE):mail) AS ValueCount FROM MY_DATABASE.PUBLIC.GENERALI_CALLS gc WHERE gc.CREATED_AT <= TO_DATE('2021-10-27') GROUP BY gc.METHOD, gc.CREATED_AT ORDER BY gc.CREATED_AT ASC;  

SELECT COUNT(CREATED_AT) FROM MY_DATABASE.PUBLIC.acc_tmp GROUP BY CREATED_AT;
SELECT METHOD FROM MY_DATABASE.PUBLIC.acc_tmp tmp where METHOD in (SELECT VALUECOUNT from MY_DATABASE.PUBLIC.acc_tmp WHERE METHOD = 'update_account');
SELECT tmp.VALUECOUNT - tmp.VALUECOUNT FROM MY_DATABASE.PUBLIC.acc_tmp tmp; 

SELECT gc.METHOD, COUNT() FROM MY_DATABASE.PUBLIC.GENERALI_CALLS gc WHERE gc.CREATED_AT <= TO_DATE('2021-10-27') GROUP BY gc.METHOD, gc.CREATED_AT;    


SELECT SUM(VALUECOUNT) FROM MY_DATABASE.PUBLIC.acc_tmp WHERE METHOD = 'update_account';
SELECT SUM(VALUECOUNT) FROM MY_DATABASE.PUBLIC.acc_tmp WHERE METHOD = 'delete_account';

SELECT 
    lc.ID AS License_ID, usr_pr.USER_ID AS Urs_ID 
FROM
    MY_DATABASE.PUBLIC.LICENSES lc 
LEFT JOIN 
    MY_DATABASE.PUBLIC.USER_PROFILES usr_pr
ON
    lc.USER_PROFILE_ID = usr_pr.ID
WHERE STARTED_AT <= TO_DATE('2021-10-27')  AND TYPE = 1 AND ENDED_AT IS NULL;   

SELECT 
    lc.ID AS License_ID, usr_pr.USER_ID AS Urs_ID 
FROM
    MY_DATABASE.PUBLIC.LICENSES lc, MY_DATABASE.PUBLIC.USER_PROFILES usr_pr 
 
WHERE lc.USER_PROFILE_ID = usr_pr.ID AND (STARTED_AT <= TO_DATE('2021-10-27')  AND TYPE = 1 AND ENDED_AT IS NULL);   



SELECT 
        DATE_TRUNC('MONTH', exp.CREATED_AT) AS PERIOD, ROUND(SUM(exp.AMOUNT/-1), 2) AS AMOUNT
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
WHERE 
    exp.CREATED_AT >= TO_DATE('2021-01-01') AND (mcrd_mch.MERCHANT_CATEGORY_CODE = 5812 OR mcrd_mch.MERCHANT_CATEGORY_CODE = 5814)
GROUP BY DATE_TRUNC('MONTH', exp.CREATED_AT)    
ORDER BY DATE_TRUNC('MONTH', exp.CREATED_AT) ASC;  
      
            
SELECT DISTINCT PARSE_JSON(gc.MESSAGE):mail::string AS Email, PARSE_JSON(gc.MESSAGE):firstName::string AS firstName, PARSE_JSON(gc.MESSAGE):lastName::string AS lastName, PARSE_JSON(gc.MESSAGE):birthDate::string AS birthDate, ROUND(2021- LEFT(birthDate, 4),0) AS AGE FROM MY_DATABASE.PUBLIC.GENERALI_CALLS gc WHERE lastName IS NOT NULL AND RIGHT(Email, 11) = 'my_company.co' ORDER BY birthDate ASC;      
      
      
//  All MCC (5812, 5813, 5814)    

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Flunch_ALL AS 
SELECT 
        LEFT(DATE_TRUNC('MONTH', exp.CREATED_AT), 10) AS PERIOD, ROUND(SUM(exp.AMOUNT/-1), 2) AS "Volume_total", COUNT(exp.AMOUNT) AS "Nombre_total", ROUND(AVG(exp.AMOUNT/-1), 2) AS "Depenses_moyennes_total"
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
WHERE 
    exp.CREATED_AT >= TO_DATE('2019-01-01') AND exp.CREATED_AT <= TO_DATE('2020-12-31') AND mcrd_mch.MERCHANT_CATEGORY_CODE IN (5812, 5813, 5814)
GROUP BY DATE_TRUNC('MONTH', exp.CREATED_AT)    
ORDER BY DATE_TRUNC('MONTH', exp.CREATED_AT) ASC;  


// Flunch   

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Flunch AS 
SELECT 
        LEFT(DATE_TRUNC('MONTH', exp.CREATED_AT), 10) AS PERIOD, ROUND(SUM(exp.AMOUNT/-1), 2) AS "Volume_Flunch", COUNT(exp.AMOUNT) AS "Nombre Flunch", ROUND(AVG(exp.AMOUNT/-1), 2) AS "Depenses moyennes Flunch"
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
WHERE 
    exp.CREATED_AT >= TO_DATE('2019-01-01') AND exp.CREATED_AT <= TO_DATE('2020-12-31') AND mcrd_mch.MERCHANT_CATEGORY_CODE IN (5812, 5813, 5814) AND mcrd_mch.NAME LIKE '%Flunch%'
GROUP BY DATE_TRUNC('MONTH', exp.CREATED_AT)    
ORDER BY DATE_TRUNC('MONTH', exp.CREATED_AT) ASC; 

SELECT * FROM MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS WHERE NAME LIKE '%Flunch%';

SELECT 
    flc.*, ROUND((flc.VOLUME_FLUNCH/flc_t.VOLUME_TOTAL)*100, 2) AS "Part du marché", flc_t.VOLUME_TOTAL, flc_t.NOMBRE_TOTAL, flc_t.DEPENSES_MOYENNES_TOTAL
FROM
    MY_DATABASE.PUBLIC.Flunch flc
LEFT JOIN
    MY_DATABASE.PUBLIC.Flunch_ALL flc_t
ON
    flc.PERIOD = flc_t.PERIOD
ORDER BY
    flc.PERIOD ASC;
    
    
select get_ddl('database', 'MY_DATABASE');

--ONLY OFFLINE TRANSACTIONS--
SELECT 
//    ce.CARD_ID, mct.CARD_EXPENSE_ID, mct.LINK, mct.DATA:Trans_link::string AS Trans_link, LEFT(DATE_TRUNC('MONTH',mct.CREATED_AT), 10), mct.TRANSACTION_TYPE, mct.TRANSACTION_STATUS, mct.DATA:Authorised_by_GPS::string AS GPS, mct.DATA:MCC_Code::string AS MCC_Code
    LEFT(DATE_TRUNC('MONTH',mct.CREATED_AT), 10) AS CREATED_AT, ce.ID, ce.CARD_ID, mct.DATA:Authorised_by_GPS::string AS GPS, mct.DATA:MCC_Code::string AS MCC_Code, mct.DATA:Merch_Name::string AS Merch_Name
FROM
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mct
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES ce
ON
    mct.CARD_EXPENSE_ID = ce.ID 
WHERE    
    mct.CARD_EXPENSE_ID IS NOT NULL
    AND LEN(mct.LINK) = 19
    AND LEFT(mct.LINK, 1) = 1
    AND TRANSACTION_TYPE = 16 
    AND TRANSACTION_STATUS =19
    AND mct.CREATED_AT >= TO_DATE('2020-01-01')
ORDER BY mct.CREATED_AT ASC;


SELECT 
    LEFT(DATE_TRUNC('MONTH',mct.CREATED_AT), 10) AS CREATED_AT, ce.ID, ce.CARD_ID, mct.DATA:Authorised_by_GPS::string AS GPS, mct.DATA:MCC_Code::string AS MCC_Code, mc.NAME
FROM
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mct
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES ce
ON
    mct.CARD_EXPENSE_ID = ce.ID 
INNER JOIN
    MY_DATABASE.PUBLIC.MERCHANT_CATEGORIES mc
ON
    mct.DATA:MCC_Code::string = mc.ID    
WHERE    
    mct.CARD_EXPENSE_ID IS NOT NULL
    AND LEN(mct.LINK) = 19
    AND LEFT(mct.LINK, 1) = 1
    AND TRANSACTION_TYPE = 16 
    AND TRANSACTION_STATUS =19
    AND mct.CREATED_AT >= TO_DATE('2020-01-01')
ORDER BY mct.CREATED_AT ASC;

--ALL PS TRANSACTIONS--
SELECT 
    LEFT(DATE_TRUNC('MONTH',mct.CREATED_AT), 10) AS CREATED_AT, ce.ID, ce.CARD_ID, mct.DATA:Authorised_by_GPS::string AS GPS, mct.DATA:MCC_Code::string AS MCC_Code, mc.NAME
FROM
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mct
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES ce
ON
    mct.CARD_EXPENSE_ID = ce.ID 
INNER JOIN
    MY_DATABASE.PUBLIC.MERCHANT_CATEGORIES mc
ON
    mct.DATA:MCC_Code::string = mc.ID       
WHERE    
    mct.CARD_EXPENSE_ID IS NOT NULL
    AND TRANSACTION_TYPE = 16 
    AND TRANSACTION_STATUS =19
    AND mct.CREATED_AT >= TO_DATE('2020-01-01')
ORDER BY mct.CREATED_AT ASC; 

    
SELECT * FROM MY_DATABASE.PUBLIC.CARD_EXPENSES WHERE ID = '8179c6d2-8231-4b32-9a69-05fc0f9f2d0d';    
    
-- Number of Flunch card holders    
    
SELECT 
        LEFT(DATE_TRUNC('MONTH', exp.CREATED_AT), 10) AS PERIOD, ROUND(SUM(exp.AMOUNT/-1), 2) AS "Volume_Flunch", COUNT(exp.AMOUNT) AS "Nombre Flunch", ROUND(AVG(exp.AMOUNT/-1), 2) AS "Depenses moyennes Flunch"
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
WHERE 
    exp.CREATED_AT >= TO_DATE('2019-01-01') AND exp.CREATED_AT <= TO_DATE('2020-12-31') AND mcrd_mch.MERCHANT_CATEGORY_CODE IN (5812, 5813, 5814) AND mcrd_mch.NAME LIKE '%Flunch%'
GROUP BY DATE_TRUNC('MONTH', exp.CREATED_AT)    
ORDER BY DATE_TRUNC('MONTH', exp.CREATED_AT) ASC;     


SELECT 
    COUNT(DISTINCT crd.ID) AS Num_Cards
FROM
    MY_DATABASE.PUBLIC.CARDS crd
INNER JOIN 
    MY_DATABASE.PUBLIC.COMPANIES cmp
ON
    crd.COMPANY_ID = cmp.ID
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    crd.ID = crd_exp.CARD_ID    
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID      
WHERE    
    cmp.CONTRACT = 0
    AND cmp.DELETED_AT IS NULL
    AND cmp.CLOSED_AT IS NULL
    AND crd_exp.CREATED_AT >= TO_DATE('2021-01-01') 
    AND mcrd_mch.MERCHANT_CATEGORY_CODE IN (5812, 5813, 5814) 
    AND mcrd_mch.NAME LIKE '%Flunch%';


SELECT * FROM MY_DATABASE.PUBLIC.MERCHANT_CATEGORIES WHERE ID = 9405; -- U.S. Federal Government Agencies or Departments in MERCHANT_CATEGORIES

SELECT mct.DATA:Merch_Name::string AS Merch_Name FROM MASTERCARD_TRANSACTIONS mct WHERE mct.DATA:MCC_Code::string = '9405';




SELECT
    mct.DATA:Merch_Name::string AS Merch_Name_From_Mastercard_transaction,count(mct.id)
FROM
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mct
INNER JOIN
    MY_DATABASE.PUBLIC.CARD_EXPENSES ce
ON
    mct.CARD_EXPENSE_ID = ce.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MERCHANT_CATEGORIES mc
ON
    mct.DATA:MCC_Code::string = mc.ID
WHERE
    mct.CARD_EXPENSE_ID IS NOT NULL
    AND LEN(mct.LINK) = 19
    AND LEFT(mct.LINK, 1) = 1
    AND TRANSACTION_TYPE = 16
    AND TRANSACTION_STATUS =19
    AND mct.CREATED_AT >= TO_DATE('2020-01-01')
group by  mct.DATA:Merch_Name::string
ORder by count(Mct.id) desc;


SELECT 
    lsc.TYPE, COUNT(DISTINCT usr.ID) 
FROM
    MY_DATABASE.PUBLIC.USERS usr
INNER JOIN
    MY_DATABASE.PUBLIC.USER_PROFILES usr_pr
ON
    usr.ID = usr_pr.USER_ID
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES cmp
ON
    cmp.ID = usr_pr.COMPANY_ID  
INNER JOIN
    MY_DATABASE.PUBLIC.CARDS crd
ON
    usr_pr.ID = crd.USER_PROFILE_ID
INNER JOIN
    MY_DATABASE.PUBLIC.LICENSES lsc
ON
    lsc.ID = crd.LICENSE_ID         
WHERE
    usr.DELETED_AT IS NULL
    AND usr_pr.ARCHIVED_AT IS NULL
    AND usr_pr.ACTIVE = TRUE
    AND usr_pr.DELETED_AT IS NULL
    AND cmp.DELETED_AT IS NULL
    AND cmp.CONTRACT = 0
    AND PARSE_JSON(cmp.PREFERENCES):use_manual_expenses::string = true
    AND crd.LICENSE_ID IS NOT NULL
    AND crd.DELETED_AT IS NULL
    AND crd.DEPRECATED_AT IS NULL
    AND crd.DISABLE_AT IS NULL
    AND lsc.ENDED_AT IS NULL
GROUP BY
    lsc.TYPE;
    
SELECT MAX(EMPLOYEE_SIZE) FROM MY_DATABASE.PUBLIC.COMPANIES;    
    
    
SELECT 
    COUNT(DISTINCT usr_pr.USER_ID)
FROM
    MY_DATABASE.PUBLIC.USER_PROFILES usr_pr
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES cmp
ON 
     usr_pr.COMPANY_ID = cmp.ID
WHERE
    usr_pr.ARCHIVED_AT IS NULL
    AND usr_pr.ACTIVE = TRUE
    AND usr_pr.DELETED_AT IS NULL
    AND cmp.DELETED_AT IS NULL
    AND cmp.EMPLOYEE_SIZE > 0;
    
    
    
SELECT 
    COUNT(man_pr.MANAGER_ID)
FROM
    MY_DATABASE.PUBLIC.MANAGER_USER_PROFILES man_pr
INNER JOIN
    MY_DATABASE.PUBLIC.USER_PROFILES usr_pr
ON 
     usr_pr.ID = man_pr.MANAGER_ID
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES cmp
ON 
     usr_pr.COMPANY_ID = cmp.ID     
WHERE
    usr_pr.ARCHIVED_AT IS NULL
    AND usr_pr.ACTIVE = TRUE
    AND usr_pr.DELETED_AT IS NULL
    AND cmp.DELETED_AT IS NULL
    AND cmp.EMPLOYEE_SIZE > 0;
    
    
SELECT 
        LEFT(DATE_TRUNC('MONTH', exp.CREATED_AT), 10) AS PERIOD, ROUND(SUM(exp.AMOUNT/-1), 2) AS "Volume", COUNT(exp.AMOUNT) AS "Nombre", ROUND(AVG(exp.AMOUNT/-1), 2) AS "Depenses moyennes"
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
WHERE 
    exp.CREATED_AT >= TO_DATE('2020-01-01')
    AND (mcrd_mch.NAME LIKE '%shell%' OR mcrd_mch.NAME LIKE '%Shell%')
GROUP BY DATE_TRUNC('MONTH', exp.CREATED_AT)    
ORDER BY DATE_TRUNC('MONTH', exp.CREATED_AT) ASC;       



SELECT * FROM MY_DATABASE.PUBLIC.CARD_ORDERS WHERE TYPE = 1;
SELECT * FROM MY_DATABASE.PUBLIC.CARD_SHIPPINGS WHERE CARD_ORDER_ID = '21ad15b2-323c-4fe1-880c-bd30e97d1796';

SELECT CREATED_AT AS PERIOD, CARD_ORDER_ID, COUNT(ID) AS Freq FROM MY_DATABASE.PUBLIC.CARD_SHIPPINGS GROUP BY CREATED_AT, CARD_ORDER_ID ORDER BY Freq DESC;


SELECT "BOOKING POINT OF SALE", COUNT("BOOKING POINT OF SALE") AS Nombre FROM LEAD_DB.PUBLIC.LEAD_CONSOLIDATED lc WHERE "BOOKING POINT OF SALE" IN ('Spain', 'Italy') GROUP BY "BOOKING POINT OF SALE";

SELECT "BOOKING POINT OF SALE", INDUSTRY_SF AS INDUSTRY, COUNT(INDUSTRY_SF) AS Nombre_INDUSTRY FROM LEAD_DB.PUBLIC.LEAD_CONSOLIDATED lc WHERE "BOOKING POINT OF SALE" IN ('Spain', 'Italy') GROUP BY "BOOKING POINT OF SALE", INDUSTRY_SF ORDER BY INDUSTRY_SF ASC;

SELECT "BOOKING POINT OF SALE"AS Country, INDUSTRY_SF AS INDUSTRY, EMPLOYEES FROM LEAD_DB.PUBLIC.LEAD_CONSOLIDATED lc WHERE "BOOKING POINT OF SALE" IN ('Spain', 'Italy') AND INDUSTRY_SF IS NOT NULL ORDER BY INDUSTRY_SF ASC;


SELECT DISTINCT SOURCE_TYPE FROM MY_DATABASE.PUBLIC.EXPENSES;

CREATE OR REPLACE VIEW Per_EXP AS
SELECT COUNT(exp.SOURCE_TYPE) AS Total FROM MY_DATABASE.PUBLIC.EXPENSES exp WHERE exp.CREATED_AT >= '2021-01-01'; -- 1491492 - 1452137  33252 + 6103


SELECT exp.SOURCE_TYPE AS EXPENSE, ROUND( (COUNT(exp.SOURCE_TYPE)/1491492)*100 , 2) AS PERCENTAGE FROM MY_DATABASE.PUBLIC.EXPENSES exp WHERE exp.CREATED_AT >= '2021-01-01' GROUP BY exp.SOURCE_TYPE ORDER BY PERCENTAGE DESC;


-- lc.TYPE, 1452137 1452129 1452129 1313937
SELECT  
    lc.TYPE, COUNT(exp.ID) AS NUmber
FROM 
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.CARDS crd
ON
    crd_exp.CARD_ID = crd.ID
INNER JOIN
    MY_DATABASE.PUBLIC.LICENSES lc
ON
    crd.LICENSE_ID = lc.ID
WHERE 
    exp.CREATED_AT >= '2021-01-01' 
    AND exp.SOURCE_TYPE = 'CardExpense'
    AND lc.ENDED_AT IS NULL
GROUP BY lc.TYPE
ORDER BY Number DESC;




-- Bolt and Competitors


-- All Industry Including Bolt

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Taxis_ALL AS 
SELECT 
        LEFT(DATE_TRUNC('MONTH', exp.CREATED_AT), 10) AS PERIOD, ROUND(SUM(exp.AMOUNT/-1), 2) AS "Total_Volume", COUNT(exp.AMOUNT) AS "Total_Number_of_Rides", ROUND(AVG(exp.AMOUNT/-1), 2) AS "Average_Total_Expenses"
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
WHERE 
    exp.CREATED_AT >= TO_DATE('2020-01-01') AND mcrd_mch.MERCHANT_CATEGORY_CODE IN (4121, 4119, 4789)
GROUP BY DATE_TRUNC('MONTH', exp.CREATED_AT)    
ORDER BY DATE_TRUNC('MONTH', exp.CREATED_AT) ASC;  


// For Bolt only   

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Bolt AS 
SELECT 
        LEFT(DATE_TRUNC('MONTH', exp.CREATED_AT), 10) AS PERIOD, ROUND(SUM(exp.AMOUNT/-1), 2) AS "Volume_Bolt", COUNT(exp.AMOUNT) AS "Number_of_Rides Bolt", ROUND(AVG(exp.AMOUNT/-1), 2) AS "Bolt average expenses"
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
WHERE 
    exp.CREATED_AT >= TO_DATE('2020-01-01') AND mcrd_mch.MERCHANT_CATEGORY_CODE IN (4121, 4119, 4789) AND mcrd_mch.NAME LIKE '%Bolt%'
GROUP BY DATE_TRUNC('MONTH', exp.CREATED_AT)    
ORDER BY DATE_TRUNC('MONTH', exp.CREATED_AT) ASC; 

SELECT * FROM MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS WHERE NAME LIKE '%Carrefour%';

SELECT 
    blt.*, ROUND((blt.Volume_Bolt/taxis_all.Total_Volume)*100, 2) AS "Part du marché", taxis_all.Total_Volume, taxis_all.Total_Number_of_Rides, taxis_all.Average_Total_Expenses
FROM
    MY_DATABASE.PUBLIC.Bolt blt
LEFT JOIN
    MY_DATABASE.PUBLIC.Taxis_ALL taxis_all
ON
    blt.PERIOD = taxis_all.PERIOD
ORDER BY
    blt.PERIOD ASC;
    

-- Aprr 4468 4582 4784 7523 9405

SELECT 
        LEFT(DATE_TRUNC('MONTH', exp.CREATED_AT), 10) AS PERIOD, ROUND(SUM(exp.AMOUNT/-1), 2) AS "Volume", COUNT(exp.AMOUNT) AS "Number of Expenditures", ROUND(AVG(exp.AMOUNT/-1), 2) AS "Average expenses"
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
WHERE 
    exp.CREATED_AT >= TO_DATE('2020-01-01') AND (mcrd_mch.MERCHANT_CATEGORY_CODE IN (4468, 4582, 4784, 7523, 9405, 5712) AND mcrd_mch.NAME LIKE '%Bolt%')
GROUP BY DATE_TRUNC('MONTH', exp.CREATED_AT)    
ORDER BY DATE_TRUNC('MONTH', exp.CREATED_AT) ASC; 

SELECT LEFT(mcrd_trct.DATA:Merch_Postcode::string, 3) AS Code, mcrd_trct.DATA:Merch_Country::string AS Country FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mcrd_trct WHERE Code IS NOT NULL 
    AND LEN(Code)>=3     
    AND mcrd_trct.DATA:Merch_Country = 'FRA'   
    AND Code IN ('692');
    
SELECT 
    LEFT(DATE_TRUNC('MONTH', exp.CREATED_AT), 10) AS PERIOD, ROUND(SUM(exp.AMOUNT/-1), 2) AS "Volume", COUNT(exp.AMOUNT) AS "Number of Expenditures", ROUND(AVG(exp.AMOUNT/-1), 2) AS "Average expenses"
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
INNER JOIN 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mcrd_trct
ON
    mcrd_trct.CARD_EXPENSE_ID = crd_exp.ID    
WHERE 
    exp.CREATED_AT >= TO_DATE('2021-01-01') 
    AND mcrd_trct.TRANSACTION_TYPE = 16 AND mcrd_trct.TRANSACTION_STATUS =19      --  20332.30 1529  13.30   --  23025.80 1974  11.66
    AND mcrd_mch.MERCHANT_CATEGORY_CODE IN (4468, 4582, 4784, 7523, 9405, 5712) 
    AND (mcrd_mch.NAME LIKE '%Aprr%' OR mcrd_mch.NAME LIKE '%Area%')
    AND LEFT(mcrd_trct.DATA:Merch_Postcode::string, 3) ='692'
GROUP BY DATE_TRUNC('MONTH', exp.CREATED_AT)    
ORDER BY DATE_TRUNC('MONTH', exp.CREATED_AT) ASC; 


SELECT SUM(Volume) FROM MY_DATABASE.PUBLIC.PS_DBL_CHK;  -- 229284.30
SELECT SUM(Volume) FROM MY_DATABASE.PUBLIC.PS_DBL;  -- 229284.30



SELECT LEFT(mcrd_trct.DATA:Merch_Postcode::string, 3) AS Code, mcrd_trct.DATA:Merch_Country::string AS Country FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mcrd_trct WHERE Code IS NOT NULL 
    AND LEN(Code)>=3     
    AND mcrd_trct.DATA:Merch_Country = 'FRA'   
    AND Code IN ('692');

SELECT 
    LEFT(mcrd_trct.DATA:Merch_Postcode::string, 5) AS Code,  ROUND(SUM(exp.AMOUNT/-1), 2) AS "Volume", COUNT(exp.AMOUNT) AS "Number of Expenditures", ROUND(AVG(exp.AMOUNT/-1), 2) AS "Average expenses"
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
INNER JOIN 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mcrd_trct
ON
    mcrd_trct.CARD_EXPENSE_ID = crd_exp.ID    
WHERE 
    exp.CREATED_AT >= TO_DATE('2021-01-01') 
    AND mcrd_trct.TRANSACTION_TYPE = 16 AND mcrd_trct.TRANSACTION_STATUS =19      --  20332.30 1529  13.30   --  23025.80 1974  11.66
    AND mcrd_mch.MERCHANT_CATEGORY_CODE IN (4468, 4582, 4784, 7523, 9405, 5712) 
    AND (mcrd_mch.NAME LIKE '%Aprr%')
    --AND LEFT(mcrd_trct.DATA:Merch_Postcode::string, 3) ='692'
GROUP BY Code    
--ORDER BY DATE_TRUNC('MONTH', exp.CREATED_AT) ASC
; 

DROP TABLE MY_DATABASE.PUBLIC.ATTENDEES;

DROP TABLE "MY_DATABASE"."TEMP_TABS".ACCOUNTING_EXPORTS;
-- 69671, 84270, and 21850
-- with 10, 1, and 15811 number of transactions respectively


SELECT DISTINCT ADDRESSABLE_TYPE FROM MY_DATABASE.PUBLIC.ADDRESSES;

SELECT DISTINCT COUNTRY FROM MY_DATABASE.PUBLIC.ADDRESSES;

SELECT DISTINCT LEFT(POSTCODE, 2), CITY FROM MY_DATABASE.PUBLIC.ADDRESSES WHERE COUNTRY = 'FRA' AND POSTCODE IS NOT NULL AND POSTCODE > 0;

SELECT COUNT(ID) FROM MY_DATABASE.PUBLIC.ADDRESSES WHERE ADDRESSABLE_TYPE = 'Company';


--MY_DATABASE.SALESFORCE.ACCOUNT  MOONCARDCOMPANYID__C

SELECT 
    LEFT(adr.POSTCODE, 2)AS POSTCODE, COUNT(comp.ID) AS Number_OF_Companies
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp    
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES adr
ON    
    comp.ID = adr.ADDRESSABLE_ID
WHERE 
    LEFT(PARSE_JSON (comp.FLAGS): whereareyou, 1) IN ('5', '6', '7', '8')
    AND adr.ADDRESSABLE_TYPE = 'Company'
    AND adr.COUNTRY = 'FRA'
    AND LEFT(adr.POSTCODE, 2) IN ('75', '92', '93', '94', '91', '78', '95', '33', '69', '59', '13', '38', '44') 
GROUP BY LEFT(adr.POSTCODE, 2)
ORDER BY Number_OF_Companies DESC;


SELECT 
    adr.CITY, COUNT(comp.ID) AS Number_OF_Companies
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp    
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES adr
ON    
    comp.ID = adr.ADDRESSABLE_ID
WHERE 
    LEFT(PARSE_JSON (comp.FLAGS): whereareyou, 1) IN ('5', '6', '7', '8')
    AND adr.ADDRESSABLE_TYPE = 'Company'
    AND adr.COUNTRY = 'BEL'
    AND adr.CITY = 'Bruxelles' 
GROUP BY adr.CITY;



SELECT 
    sf_acc.COMPANYSIZE__C AS COMPANY_SIZE, COUNT(sf_acc.COMPANYSIZE__C)AS NUMBER_OF_CUSTOMERS 
FROM 
    MY_DATABASE.SALESFORCE.ACCOUNT sf_acc 
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES comp  
ON    
    comp.ID = sf_acc.MOONCARDCOMPANYID__C
WHERE 
    LEFT(PARSE_JSON (comp.FLAGS): whereareyou, 1) IN ('5', '6', '7', '8')    
GROUP BY sf_acc.COMPANYSIZE__C
ORDER BY NUMBER_OF_CUSTOMERS DESC; 

-- VIEWS adh_mc adh_mcx annul_mc annul_mcX
CREATE OR REPLACE VIEW adh_mc AS
SELECT 
     LEFT(DATE_TRUNC('MONTH', crd_ins.SUBSCRIBED_AT), 10)AS PERIOD, COUNT(crd_ins.ID)AS adh_mc  
FROM 
    MY_DATABASE.PUBLIC.CARD_INSURANCES crd_ins
INNER JOIN
    MY_DATABASE.PUBLIC.CARDS crd
ON
    crd_ins.CARD_ID = crd.ID
INNER JOIN
    MY_DATABASE.PUBLIC.LICENSES lc
ON
    crd.LICENSE_ID = lc.ID    
WHERE     
    crd_ins.SUBSCRIBED_AT >= TO_DATE('2021-01-01')
    -- AND lc.ENDED_AT IS NULL
    AND crd_ins.CLOSED_AT IS  NULL
    AND crd_ins.GRAS_SAVOYE_CANCELLATION_CALL IS  NULL
    AND lc.TYPE = 0
GROUP BY LEFT(DATE_TRUNC('MONTH', crd_ins.SUBSCRIBED_AT), 10)
-- ORDER BY LEFT(DATE_TRUNC('MONTH', crd_ins.SUBSCRIBED_AT)
; 


CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.ADH_MCX AS
SELECT 
     LEFT(DATE_TRUNC('MONTH', crd_ins.SUBSCRIBED_AT), 10)AS PERIOD, COUNT(crd_ins.ID)AS adh_mcx  
FROM 
    MY_DATABASE.PUBLIC.CARD_INSURANCES crd_ins
INNER JOIN
    MY_DATABASE.PUBLIC.CARDS crd
ON
    crd_ins.CARD_ID = crd.ID
INNER JOIN
    MY_DATABASE.PUBLIC.LICENSES lc
ON
    crd.LICENSE_ID = lc.ID    
WHERE     
    crd_ins.SUBSCRIBED_AT >= TO_DATE('2021-01-01')   
    AND lc.TYPE = 1
GROUP BY LEFT(DATE_TRUNC('MONTH', crd_ins.SUBSCRIBED_AT), 10)
;


CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.ADH_MC AS
SELECT 
     LEFT(DATE_TRUNC('MONTH', crd_ins.SUBSCRIBED_AT), 10)AS PERIOD, COUNT(crd_ins.ID)AS adh_mc  
FROM 
    MY_DATABASE.PUBLIC.CARD_INSURANCES crd_ins
INNER JOIN
    MY_DATABASE.PUBLIC.CARDS crd
ON
    crd_ins.CARD_ID = crd.ID
INNER JOIN
    MY_DATABASE.PUBLIC.LICENSES lc
ON
    crd.LICENSE_ID = lc.ID    
WHERE     
    crd_ins.SUBSCRIBED_AT >= TO_DATE('2021-01-01')    
    AND lc.TYPE = 0
GROUP BY LEFT(DATE_TRUNC('MONTH', crd_ins.SUBSCRIBED_AT), 10)
;

SELECT 
    adc.PERIOD, adh_mc, adh_mcx, annul_mc * - 1 AS annul_mc, annul_mcX * -1 AS annul_mcX 
FROM 
    MY_DATABASE.PUBLIC.adh_mc adc, MY_DATABASE.PUBLIC.adh_mcx adx, MY_DATABASE.PUBLIC.annul_mc anc, MY_DATABASE.PUBLIC.annul_mcX anx
WHERE    
    adc.PERIOD = adx.PERIOD AND adc.PERIOD = anc.PERIOD AND adc.PERIOD = anx.PERIOD ORDER BY adc.PERIOD;



SELECT 
        LEFT(DATE_TRUNC('MONTH', exp.CREATED_AT), 10) AS PERIOD, ROUND(SUM(exp.AMOUNT/-1), 2) AS "Volume", COUNT(exp.AMOUNT) AS "Frequency/Number", ROUND(AVG(exp.AMOUNT/-1), 2) AS "Average expenses"
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
WHERE 
    exp.CREATED_AT >= TO_DATE('2021-01-01') AND mcrd_mch.NAME LIKE '%Fulli%'
GROUP BY DATE_TRUNC('MONTH', exp.CREATED_AT)    
ORDER BY DATE_TRUNC('MONTH', exp.CREATED_AT) ASC; 

SELECT * FROM MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS WHERE NAME LIKE '%Fulli%';


SELECT DISTINCT CAUSE FROM MY_DATABASE.PUBLIC.PAYMENT_ERRORS;

--DROP VIEW MY_DATABASE.PUBLIC.EXPENDITURE_BY_DEPARTMENTS;

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.EXPENDITURE_BY_DEPARTMENTS AS
SELECT 
    LOWER(CITY) AS CITY,    
    ROUND(SUM(exp.AMOUNT)/-1, 2) AS AMOUNT 
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN    
    MY_DATABASE.PUBLIC.COMPANIES comp   
ON
    exp.COMPANY_ID = comp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES adr
ON    
    comp.ID = adr.ADDRESSABLE_ID
WHERE 
    LEFT(PARSE_JSON (comp.FLAGS): whereareyou, 1) IN ('5', '6', '7', '8')
    AND adr.ADDRESSABLE_TYPE = 'Company'
    AND adr.COUNTRY = 'FRA'    
    AND adr.POSTCODE IS NOT NULL
    AND adr.CITY IS NOT NULL
GROUP BY LOWER(CITY)
ORDER BY AMOUNT DESC;



CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.ANNUL_MC AS
SELECT 
     LEFT(DATE_TRUNC('MONTH', crd_ins.CLOSED_AT), 10)AS PERIOD, COUNT(crd_ins.ID)AS annul_mc  
FROM 
    MY_DATABASE.PUBLIC.CARD_INSURANCES crd_ins
INNER JOIN
    MY_DATABASE.PUBLIC.CARDS crd
ON
    crd_ins.CARD_ID = crd.ID
INNER JOIN
    MY_DATABASE.PUBLIC.LICENSES lc
ON
    crd.LICENSE_ID = lc.ID    
WHERE     
    crd_ins.CLOSED_AT >= TO_DATE('2021-01-01')
    AND crd_ins.CLOSED_AT IS NOT NULL
    AND crd_ins.GRAS_SAVOYE_CANCELLATION_CALL IS NOT NULL
    AND lc.TYPE = 0
GROUP BY LEFT(DATE_TRUNC('MONTH', crd_ins.CLOSED_AT), 10);



CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.ANNUL_MCX AS
SELECT 
     LEFT(DATE_TRUNC('MONTH', crd_ins.CLOSED_AT), 10)AS PERIOD, COUNT(crd_ins.ID)AS annul_mcX  
FROM 
    MY_DATABASE.PUBLIC.CARD_INSURANCES crd_ins
INNER JOIN
    MY_DATABASE.PUBLIC.CARDS crd
ON
    crd_ins.CARD_ID = crd.ID
INNER JOIN
    MY_DATABASE.PUBLIC.LICENSES lc
ON
    crd.LICENSE_ID = lc.ID    
WHERE     
    crd_ins.CLOSED_AT >= TO_DATE('2021-01-01')
    AND crd_ins.CLOSED_AT IS NOT NULL
    AND crd_ins.GRAS_SAVOYE_CANCELLATION_CALL IS NOT NULL
    AND lc.TYPE = 1
GROUP BY LEFT(DATE_TRUNC('MONTH', crd_ins.CLOSED_AT), 10);

SELECT ID, NAME FROM MY_DATABASE.PUBLIC.COMPANIES WHERE APE = '6430Z' AND  LEFT(PARSE_JSON (FLAGS): whereareyou, 1) IN ('5', '6', '7', '8');


SELECT NAME FROM MY_DATABASE.PUBLIC.DEPARTMENTS dpt INNER JOIN MY_DATABASE.PUBLIC.EXPENSES exp ON dpt.ID = exp.DEPARTMENT_ID;



SELECT DATE_TRUNC('HOUR',CREATED_AT) AS WEEK, SUM(AMOUNT/-1) FROM MY_DATABASE.PUBLIC.EXPENSES WHERE CREATED_AT >= TO_DATE('2021-12-06') GROUP BY DATE_TRUNC('HOUR',CREATED_AT) ORDER BY DATE_TRUNC('HOUR',CREATED_AT);

SELECT 
    LEFT(DATE_TRUNC('MONTH',CREATED_AT), 4) AS YEAR, ROUND((AMOUNT/-1), 2) AS TotalExp, TotalExp - LAG(TotalExp, 1, 0) OVER (PARTITION BY  DATE_TRUNC('MONTH',CREATED_AT) ORDER BY DATE_TRUNC('MONTH',CREATED_AT)) AS Diff_TotalExp
FROM 
    MY_DATABASE.PUBLIC.EXPENSES      
--GROUP BY DATE_TRUNC('YEAR',CREATED_AT) 
ORDER BY DATE_TRUNC('MONTH',CREATED_AT);


-- https://stackoverflow.com/questions/2357515/calculate-time-difference-between-two-rows       LAST ANSWER

-- Time difference

SELECT
      DATE_TRUNC('MINUTE', CREATED_AT), DATEDIFF(minute, LAG(CREATED_AT) OVER (ORDER BY CREATED_AT), CREATED_AT) AS AVG_TIME
FROM  MY_DATABASE.PUBLIC.EXPENSES 
WHERE CREATED_AT >= TO_DATE('2021-12-06');


-- GET the most active week of the year 2021 -- The most active week was 2021-11-16 TO 2021-11-22 with 45886 transactions

SELECT DATE_TRUNC('WEEK', CREATED_AT) AS MONTH, COUNT(ID)AS NUM_OPERATIONS 
FROM  MY_DATABASE.PUBLIC.EXPENSES 
WHERE CREATED_AT >= TO_DATE('2021-01-01')
GROUP BY DATE_TRUNC('WEEK', CREATED_AT)
ORDER BY NUM_OPERATIONS DESC; 


-- GET the most active week of the month -- The most active week was 2021-10-11 with 43267 transactions

SELECT DATE_TRUNC('WEEK', CREATED_AT) AS MONTH, COUNT(ID)AS NUM_OPERATIONS 
FROM  MY_DATABASE.PUBLIC.EXPENSES 
WHERE CREATED_AT BETWEEN TO_DATE('2021-09-30') AND TO_DATE('2021-11-01')
GROUP BY DATE_TRUNC('WEEK', CREATED_AT)
ORDER BY NUM_OPERATIONS DESC; 


-- Date Difference of the most active WEEk -- We have 49,323 rows, taking the average of the minutes should give us the max AVG time 

--CREATE OR REPLACE VIEW TIME_DIFF_MOST_ACTIVE_WEEK AS
SELECT
      DATE_TRUNC('MINUTE', CREATED_AT) AS MINUTES, DATEDIFF(minute, LAG(CREATED_AT) OVER (ORDER BY CREATED_AT), CREATED_AT) AS AVG_TIME
FROM  MY_DATABASE.PUBLIC.EXPENSES 
WHERE CREATED_AT BETWEEN TO_DATE('2021-11-16') AND TO_DATE('2021-11-23')  ORDER BY AVG_TIME DESC;  


SELECT COUNT(ID) FROM  MY_DATABASE.PUBLIC.EXPENSES WHERE CREATED_AT = TO_DATE('2019-12-25');
 

--WHERE CREATED_AT BETWEEN TO_DATE('2021-11-16') AND TO_DATE('2021-11-23') ORDER BY AVG_TIME DESC;  


-- GETING the AVG time = 14.012820 i.e on Average we have 13.151340 seconds between two transactions

SELECT MAX(AVG_TIME) FROM MY_DATABASE.PUBLIC.TIME_DIFF_MOST_ACTIVE_WEEK;

--NB* On the 2021-11-16, we had a time difference between two transactions of about 60 minutes 2021-11-16 04:21:00.000 2021-11-16 05:24:00.000


DROP TABLE MY_DATABASE.PUBLIC.Special_Tables;
CREATE TABLE MY_DATABASE.PUBLIC.Special_Tables(
    tabs varchar not null
);


CREATE TABLE MY_DATABASE.SALESFORCE.special_Tables(
    tabs varchar not null
);


CREATE TABLE MY_DATABASE.PUBLIC.Tmp_Fuel_Price(
    prix float,
    dates 
); 

DROP TABLE MY_DATABASE.PUBLIC.Tmp_Fuel_Price;

CREATE TABLE MY_DATABASE.PUBLIC.Tmp_Fuel_Price(
    prix NUMBER(9,2),
    dates varchar 
);

DROP TABLE MY_DATABASE.PUBLIC.Tmp_Fuel_Price;

CREATE TABLE MY_DATABASE.SALESFORCE.Salesforce_Tables(
    tableNameWithSchema varchar not null
); 


CREATE TABLE MY_DATABASE.PUBLIC.ALL_Pub_Tables(
    TABLENAMEWITHSCHEMA varchar not null
);


CREATE TABLE MY_DATABASE.SALESFORCE.ALL_Salesforce_Tables(
    TABLENAMEWITHSCHEMA varchar not null
);


SELECT DATE_TRUNC('WEEK',TO_DATE(DATES))AS WEEK, ROUND(AVG(PRIX), 2)AS "WEEkly Average"   FROM MY_DATABASE.PUBLIC.Tmp_Fuel_Price GROUP BY DATE_TRUNC('WEEK',TO_DATE(DATES)) ORDER BY DATE_TRUNC('WEEK',TO_DATE(DATES)) DESC;


SELECT DATES FROM MY_DATABASE.PUBLIC.Tmp_Fuel_Price LIMIT 100;

SELECT COUNT(ID)AS Num FROM MY_DATABASE.PUBLIC.CARDS WHERE TEMPORARY_RULE:temporary_threshold <> '0';

SELECT COUNT(ID)AS Num FROM MY_DATABASE.PUBLIC.CARDS WHERE TEMPORARY_RULE:temporary_threshold <> 0 AND CREATED_AT BETWEEN TO_DATE('2021-10-01') AND TO_DATE('2021-10-31');

SELECT TEMPORARY_RULE, TEMPORARY_RULE:temporary_expiration_date::string  FROM MY_DATABASE.PUBLIC.CARDS WHERE TEMPORARY_RULE:temporary_threshold <> '0' AND CREATED_AT BETWEEN TO_DATE('2021-10-01') AND TO_DATE('2021-10-31');


SELECT TEMPORARY_RULE, TEMPORARY_RULE:temporary_expiration_date::string  FROM MY_DATABASE.PUBLIC.CARDS WHERE TEMPORARY_RULE:temporary_threshold <> '0' AND TEMPORARY_RULE:temporary_expiration_date::string BETWEEN TO_DATE('2021-10-01') AND TO_DATE('2021-10-31');


SELECT COUNT(ID)AS Num  FROM MY_DATABASE.PUBLIC.CARDS WHERE TEMPORARY_RULE:temporary_threshold <> '0' AND TEMPORARY_RULE:temporary_expiration_date::string BETWEEN TO_DATE('2021-10-01') AND TO_DATE('2021-10-31');


DROP TABLE MY_DATABASE.PUBLIC.SOME_GUY_1;

SELECT * FROM MY_DATABASE.PUBLIC.SOME_GUY_3;

DELETE  FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('some_guy_1', 'some_guy_2', 'some_guy_3');


SELECT * FROM MY_DATABASE.SALESFORCE.SOME_GUY_1;

DROP TABLE MY_DATABASE.SALESFORCE.SOME_GUY_2;

DELETE  FROM MY_DATABASE.SALESFORCE.SALESFORCE_TABLES WHERE TABLENAMEWITHSCHEMA IN ('some_guy_1', 'some_guy_2', 'some_guy_3');

DROP TABLE MY_DATABASE.PUBLIC.ACCOUNTS;

DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('account_direct_debits', 'accounts');

DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES;


SELECT COUNT(TABLENAMEWITHSCHEMA) FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES;


DELETE FROM MY_DATABASE.SALESFORCE.SALESFORCE_TABLES;

SELECT * FROM MY_DATABASE.PUBLIC.ALL_Pub_Tables;

INSERT INTO MY_DATABASE.SALESFORCE.SPECIAL_TABLES (TABS) VALUES ('contact');

SELECT * FROM MY_DATABASE.SALESFORCE.SPECIAL_TABLES;

DELETE FROM MY_DATABASE.SALESFORCE.SPECIAL_TABLES WHERE TABS = '_sf_event_log';

DELETE FROM MY_DATABASE.SALESFORCE.SPECIAL_TABLES WHERE TABS = 'contact';

DROP TABLE MY_DATABASE.SALESFORCE.PUBLIC_TABLES;

DROP TABLE MY_DATABASE.PUBLIC.TASKS;


DELETE FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES WHERE TABS = 'tasks';

SELECT * FROM MY_DATABASE.PUBLIC.ALL_PUB_TABLES;

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Chk_tabs AS 
SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES
UNION ALL
SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES ORDER BY TABLENAMEWITHSCHEMA;

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Cnt_App_P_tabs AS 
SELECT COUNT(all_t.TABLENAMEWITHSCHEMA) AS ALL_Tabs FROM MY_DATABASE.PUBLIC.ALL_PUB_TABLES all_t;

-- CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Check_tabs AS 

SELECT all_t.ALL_Tabs, COUNT(chk.TABLENAMEWITHSCHEMA) AS ALL_Migrated FROM MY_DATABASE.PUBLIC.Chk_tabs chk, MY_DATABASE.PUBLIC.ALL_PUB_TABLES all_t;

SELECT * FROM (SELECT COUNT(chk.TABLENAMEWITHSCHEMA) AS ALL_Migrated FROM MY_DATABASE.PUBLIC.Chk_tabs chk) AS Q1;

SELECT * FROM (SELECT COUNT(all_t.TABLENAMEWITHSCHEMA) AS ALL_Tabs FROM MY_DATABASE.PUBLIC.ALL_PUB_TABLES all_t) AS Q2;



SELECT * FROM (SELECT COUNT(chk.TABLENAMEWITHSCHEMA) AS ALL_Migrated FROM MY_DATABASE.PUBLIC.Chk_tabs chk) AS Q1
UNION
SELECT * FROM (SELECT COUNT(all_t.TABLENAMEWITHSCHEMA) AS ALL_Tabs FROM MY_DATABASE.PUBLIC.ALL_PUB_TABLES all_t) AS Q2;

-- FINISH THIS TEST


TRUNCATE TABLE MY_DATABASE.SALESFORCE._HCMETA;



SELECT * FROM MY_DATABASE.PUBLIC.INBOUND_SMS isms WHERE SERVICE = 33755507480;


show tables in MY_DATABASE.PUBLIC where name not in ('all_pub_tables', 'special_tables', 'public_tables');

use role sysadmin;
SELECT * from MY_DATABASE.information_schema;

use role sysadmin;


-- Figures for Carrefour

SELECT 
        LEFT(DATE_TRUNC('MONTH', exp.CREATED_AT), 10) AS PERIOD, ROUND(SUM(exp.AMOUNT/-1), 2) AS "Volume", COUNT(exp.AMOUNT) AS "Frequency/Number", ROUND(AVG(exp.AMOUNT/-1), 2) AS "Average expenses"
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID  
WHERE 
    exp.CREATED_AT >= TO_DATE('2021-01-01') AND mcrd_mch.NAME LIKE '%Carrefour%'
GROUP BY DATE_TRUNC('MONTH', exp.CREATED_AT)    
ORDER BY DATE_TRUNC('MONTH', exp.CREATED_AT) ASC; 


SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES;


DROP TABLE MY_DATABASE.PUBLIC.TASKS;


DELETE FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES WHERE TABS IN ('identities', 'fleet_whitelists', 'calendar_events');


SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = 'PUBLIC' AND TABLE_NAME NOT IN ('ALL_PUB_TABLES', 'SPECIAL_TABLES', 'PUBLIC_TABLES', 'COLUMN_MAPPING');


--key_value_pair

DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES  WHERE TABLENAMEWITHSCHEMA = 'tasks';

DELETE FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES  WHERE TABS = 'devices';

--workflow_steps

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES;


SELECT * FROM MY_DATABASE.PUBLIC.ALL_PUB_TABLES;


SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES;


INSERT INTO MY_DATABASE.PUBLIC.SPECIAL_TABLES (TABS) VALUES ('tasks');


SELECT DISTINCT SOURCE_TYPE FROM MY_DATABASE.PUBLIC.EXPENSES;

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.No_EUR_EXP AS
SELECT  exp.ID AS Exp_ID,exp.CURRENCY, cexp.CARD_ID, crd.TOKEN, crd.DIGITS, crd.NAME FROM MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN MY_DATABASE.PUBLIC.CARD_EXPENSES cexp
ON cexp.ID = exp.SOURCE_ID
INNER JOIN MY_DATABASE.PUBLIC.CARDS crd
ON crd.ID = cexp.CARD_ID
WHERE SOURCE_TYPE = 'CardExpense' limit 3;

SELECT  exp.ID AS Exp_ID, exp.CURRENCY, SOURCE_ID  FROM MY_DATABASE.PUBLIC.EXPENSES exp WHERE exp.SOURCE_TYPE = 'CardExpense';


SELECT CARD_ID, CURRENCY FROM MY_DATABASE.PUBLIC.No_EUR_EXP GROUP BY CARD_ID, CURRENCY;

SELECT CURRENCY, CARD_ID, COUNT(CURRENCY) FROM MY_DATABASE.PUBLIC.No_EUR_EXP GROUP BY  CURRENCY, CARD_ID;


SELECT DISTINCT CARD_ID FROM MY_DATABASE.PUBLIC.No_EUR_EXP WHERE CURRENCY <> 'EUR';


CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.EUR_EXP AS
SELECT exp.CURRENCY, cexp.CARD_ID FROM MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN MY_DATABASE.PUBLIC.CARD_EXPENSES cexp
ON cexp.ID = exp.SOURCE_ID
INNER JOIN MY_DATABASE.PUBLIC.CARDS crd
ON crd.ID = cexp.CARD_ID
WHERE SOURCE_TYPE = 'CardExpense' AND exp.CURRENCY = 'EUR';

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.NO_EUR_EXP AS
SELECT exp.CURRENCY, cexp.CARD_ID FROM MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN MY_DATABASE.PUBLIC.CARD_EXPENSES cexp
ON cexp.ID = exp.SOURCE_ID
INNER JOIN MY_DATABASE.PUBLIC.CARDS crd
ON crd.ID = cexp.CARD_ID
WHERE SOURCE_TYPE = 'CardExpense' AND exp.CURRENCY <> 'EUR';

SELECT DISTINCT CARD_ID FROM MY_DATABASE.PUBLIC.EUR_EXP;

SELECT DISTINCT CARD_ID FROM MY_DATABASE.PUBLIC.NO_EUR_EXP;


-- ANDROS or WARREN
SELECT 
    crd.ID AS CARD_ID, crd.TOKEN, crd.DIGITS, crd.NAME AS CARD_NAME, cmp.NAME AS Company, addr.COUNTRY 
FROM 
    MY_DATABASE.PUBLIC.CARDS crd 
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES cmp
ON
    crd.COMPANY_ID = cmp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    addr.ADDRESSABLE_ID = cmp.ID    
WHERE 
  crd.ID in ('00020268-3b9d-406e-8e20-a96bf679671c',
 '026c3a30-4b0b-4fb5-9e15-45a9211130b6',
 '02acdf48-dfe8-436b-90ff-da8efb599b2f',
 '043ed5e6-d81d-47d0-b8a8-c564faf43ac7',
 '09ec4b7f-575b-4024-8e7c-9eeab9932884',
 '0a23f4f3-40bf-4386-bff6-03f04284af4c',
 '0bf2b96b-ede6-4608-95dd-d2d65e0e34d6',
 '0d596ec7-a345-46a0-be5b-c60f1017bd02',
 '0e2af7f0-4553-472f-9dc8-ce0b0c3cfb60',
 '0ed8d75f-5099-42b0-a431-44ee131f26a8',
 '116bb813-b115-4703-9afd-e2cde38bc3a3',
 '11b37f98-4516-43d6-a709-d2e68619aab2',
 '151e9de1-7811-4362-b816-e8af77226ee3',
 '1b96fca0-ce69-4800-b626-161b6ecb1808',
 '1cc659dd-526c-4064-bb9d-4e4cc40eeb23',
 '1e13b3fe-d1b5-4335-bdcf-920d33d04d4c',
 '200b17bc-6c3c-4040-a1fd-9ced4a8cd617',
 '267fb7d4-3497-411b-bfcd-43cf3902cdbe',
 '2691a72c-756f-4c4b-94f5-f57e92b0d5d4',
 '2a547eaf-e693-458a-951a-33bd2527a1ab',
 '32a984a1-986d-448f-add0-d6780710dc32',
 '34152d38-4861-4755-80a5-6dc5b7fd26aa',
 '34784aba-038d-46c4-a8fb-980ca6d80b23',
 '3800a7cc-37e6-492b-ae79-246489bd3fb8',
 '39c0f0a3-cc8c-4ae9-96ad-f38602f0ae39',
 '3e4f063c-2cfa-48eb-8191-5adde2fa9385',
 '3f039f77-b9fb-4627-a2ff-67e556c13e77',
 '4188eb5e-c966-463a-93ee-437c9c8d9a76',
 '425b186c-4123-4542-a849-64b715ed294a',
 '42c1469a-d9f4-4b27-b2c1-f28c7b872522',
 '43edc285-b49f-431e-82c4-8f6a0623dbb2',
 '445ecbc8-a287-44d1-b01b-4a865ec7ca5a',
 '46349d5c-0c9f-4f0f-a4b6-9d0bee544ada',
 '46f71a9f-2683-458c-841e-b7c2f105430c',
 '47c1c730-0466-47a3-95b6-a27a383efe8d',
 '4ad8dcbf-6955-49ae-9f9d-c42c24d340fb',
 '4b70844a-f8df-4f0d-b825-3bf0be55283d',
 '51929adb-b4a8-4c14-83bc-39f9c6ceccf4',
 '549778b7-7caf-4080-96f7-ca89909f11c9',
 '55478dcd-019f-4926-8e55-2a6bceee24bd',
 '5984c858-a75a-4afd-a712-5284663e1dd2',
 '5aa84a8a-8428-412a-a37a-4be4ee6b2d90',
 '5f554925-0e86-4e3b-8c20-385870939d6a',
 '6064bd85-0035-4bc4-8ffc-6f0a706a1f02',
 '608256b0-8b9f-4b53-8dff-6310f53ea08b',
 '62e16cf2-ab16-4739-bad1-5b5727bc14a0',
 '663aeaff-be37-45c0-8964-4ceb589c92b8',
 '6748c9ef-1b30-43b6-9167-da9a2179e786',
 '6e2709a1-7fc0-42e7-9a8a-202bf5088ed9',
 '7370a147-f1d7-473f-b4c7-782b41dd4458',
 '75f9719a-542d-4db0-b45f-1e838e0228b4',
 '7d41a158-ca5e-4cee-a001-41b68f3c79a4',
 '80878f0e-294d-4689-a3de-e07f13f0beee',
 '88951b84-c0af-4edd-9a39-ab151683557d',
 '981fec3b-e560-4711-ac6a-4b0e7f7a6e25',
 '98923816-e5d3-43eb-a3ca-f8eda416d512',
 '98a45346-bbd8-4f0c-8509-5371b561f1c2',
 'a09e04ba-d7c7-49f9-a2eb-c40c58bace0e',
 'a119a29f-ce48-4d14-86a6-a1ef8e62abc3',
 'a2aab080-c74f-4d21-88e4-03e5278326b8',
 'a2bb9330-b58b-4051-a367-b11012ef5398',
 'a2dc2749-7f3e-4b9c-bf51-3c2ec86197a0',
 'a3da8e0e-d33a-4a15-a9c9-3b66502dc2ae',
 'a5aa8dd5-42c3-4599-a343-02228bf9e9ce',
 'b78607ac-a5b0-481d-b379-68383a404cbd',
 'b84d0e24-4460-4dfc-8681-2fa2b3800bfe',
 'c2b067e5-5695-42e5-9ed8-334c0d5a53ee',
 'c5947256-9ef7-4733-a242-2033468d9606',
 'c8ec89dc-7fc3-4e3b-8971-40a8de26d777',
 'ca8465ce-e3fd-4eec-b034-267493d28d2d',
 'cb8306ab-3168-40c8-809e-6538fe6ac974',
 'cc9577f0-bd83-4da5-aa4a-21f319969cb5',
 'ccba9e0b-1604-458f-aed6-67d28e1d8220',
 'd0ee8a24-5b9a-4759-a8ce-308250467dd8',
 'd127746f-c25a-48e3-b26f-9e97569cd722',
 'd16c7e09-b168-4b9b-a2a2-e32ab38d92dc',
 'd313cbda-2e25-4b65-b7ce-90af730ad2d2',
 'd981e27c-9e0e-4c0b-9626-58345c1d7b6e',
 'dc75b51b-a9ef-4432-b861-ff30173f3b21',
 'dd2be7c2-f4c2-4edb-a64b-d771197a123a',
 'e0ccfd53-2ccc-46d6-a566-62b2ff556f32',
 'e0cfb9ff-135b-4d54-8ff4-17d927497b38',
 'e1b1dade-8d85-4fde-a436-c33f9f63d805',
 'e1f4b2dd-8ab9-4f0c-90ed-a0288c982f52',
 'e488ab11-a332-48b4-bbe6-ac0121d8894a',
 'e492f2d3-9b40-467f-bcfd-d977fae01182',
 'e55ab9a0-eb5a-43da-b6a1-e06f8f5be1f1',
 'e66585f5-d388-463e-9364-0855660962f4',
 'e7b827b0-2d83-43d5-83de-170a14042aa0',
 'e8ddc68b-e6f7-4eba-a151-fd2933dcb9b2',
 'ea973d80-c47b-4a2a-922a-3b97777e1c13',
 'eb22a708-4db8-479c-a22a-5764a6cb78bb',
 'efc7d451-70e5-48dd-969b-b2d214f338fd',
 'f18751bc-85bd-452f-b306-3583c331ed41',
 'f48917c7-7dbc-4cd2-b04e-25835a2470b2',
 'f7e1720e-3f89-48ef-bad7-ba88f07d07e4',
 'f893f575-cf4d-4d72-a36e-5cc9c0946dba',
 'fa540086-e052-4e3a-9b27-9fa5e2d771d2',
 'fc9261e6-0d15-4d25-a654-f14331c9d9b0',
 'fd7ee90d-bca8-42d1-8740-405fd64b1686',
 'fdcc5e49-5566-4b94-8a30-9b157a4d27a9',
 'ffd132c0-d190-4c6a-9e13-16cb89d27c5a')
 AND addr.ADDRESSABLE_TYPE = 'Company'
 AND addr.COUNTRY NOT IN ('FRA', 'NCD', 'FR');




SELECT comp.ID, comp.NAME AS COMPANY_NAME, addr.COUNTRY, addr.CITY, comp.SIREN, LEFT(comp.CREATED_AT, 10) AS CREATED_AT FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp 
INNER JOIN 
    MY_DATABASE.PUBLIC.ADDRESSES addr 
ON 
    comp.ID = addr.ADDRESSABLE_ID 
WHERE 
    comp.ID IN (SELECT kyc_r.COMPANY_ID FROM MY_DATABASE.PUBLIC.KYC_REVIEWS kyc_r
INNER JOIN MY_DATABASE.PUBLIC.TREEZOR_COMPANIES tz_comp
ON kyc_r.COMPANY_ID = tz_comp.COMPANY_ID
WHERE kyc_r.VALIDATED_AT IS NULL)
    AND addr.ADDRESSABLE_TYPE = 'Company' 
    AND COUNTRY NOT IN  ('FR', 'FRA', 'NCL');

SELECT kyc_r.COMPANY_ID FROM MY_DATABASE.PUBLIC.KYC_REVIEWS kyc_r
INNER JOIN MY_DATABASE.PUBLIC.TREEZOR_COMPANIES tz_comp
ON kyc_r.COMPANY_ID = tz_comp.COMPANY_ID
WHERE kyc_r.VALIDATED_AT IS NULL LIMIT 100;



CREATE OR REPLACE VIEW  MY_DATABASE.PUBLIC.PEAGE AS
SELECT mc.ID, mc.NAME, mc.COUNTRY, mc.MERCHANT_CATEGORY_CODE, mc_tr.DATA, mc.CREATED_AT, PARSE_JSON(mc_tr.DATA): MCC_Code AS MCC_code, PARSE_JSON(mc_tr.DATA): Acquirer_id_DE32::string AS Acquirer_ID_DE32, PARSE_JSON(mc_tr.DATA): MCC_Desc::string AS MCC_Desc FROM
"MY_DATABASE"."PUBLIC"."MASTERCARD_MERCHANTS" mc
INNER JOIN
"MY_DATABASE"."PUBLIC"."MASTERCARD_TRANSACTIONS" mc_tr
ON
TO_VARCHAR(mc.MERCHANT_CATEGORY_CODE) = PARSE_JSON(mc_tr.DATA): MCC_Code
WHERE
mc.MERCHANT_CATEGORY_CODE = 4784
AND mc_tr.TRANSACTION_TYPE = 16
AND mc_tr.TRANSACTION_STATUS = 19
-- GROUP BY Acquirer_ID_DE32
LIMIT 10000;


SELECT COUNTRY,Acquirer_ID_DE32, NAME, MCC_Desc FROM MY_DATABASE.PUBLIC.PEAGE GROUP BY COUNTRY, Acquirer_ID_DE32,NAME, MCC_Desc;

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Vehicle_IDS AS
SELECT DISTINCT exp.VEHICLE_ID FROM MY_DATABASE.PUBLIC.EXPENSES exp WHERE 
    exp.VEHICLE_ID IS NOT NULL 
    AND exp.VEHICLE_FUEL_VOLUME IS NOT NULL 
    AND exp.VEHICLE_KILOMETERS IS NOT NULL;

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.EXP_VEH AS
SELECT 
    exp.VEHICLE_ID, exp.AMOUNT/-1 AS AMOUNT, exp.VEHICLE_KILOMETERS, exp.VEHICLE_FUEL_VOLUME  
FROM 
    MY_DATABASE.PUBLIC.EXPENSES exp
WHERE 
    exp.VEHICLE_ID IN (SELECT * FROM MY_DATABASE.PUBLIC.Vehicle_IDS)
    AND exp.VEHICLE_ID IS NOT NULL 
    AND exp.VEHICLE_FUEL_VOLUME IS NOT NULL 
    AND exp.VEHICLE_KILOMETERS IS NOT NULL;
    
    
CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.VEH_ID AS    
SELECT 
    vhcle.ID,vhcle.MANUFACTURER, vhcle.MODEL, vhcle.FUEL_CODE  
FROM 
    MY_DATABASE.PUBLIC.VEHICLES vhcle 
WHERE 
    vhcle.ID IN (SELECT * FROM MY_DATABASE.PUBLIC.Vehicle_IDS);
    

SELECT  
    exp.VEHICLE_ID, exp.AMOUNT/-1 AS AMOUNT, exp.VEHICLE_KILOMETERS, exp.VEHICLE_FUEL_VOLUME,vhcle.ID,vhcle.MANUFACTURER, vhcle.MODEL, vhcle.FUEL_CODE  
FROM    
    MY_DATABASE.PUBLIC.EXP_VEH exp, MY_DATABASE.PUBLIC.VEH_ID vhcle
WHERE     
    exp.VEHICLE_ID = vhcle.ID;


SELECT * FROM MY_DATABASE.PUBLIC.COMPANIES WHERE SIREN = '519866347';

SELECT ID FROM MY_DATABASE.PUBLIC.COMPANIES WHERE SIREN = '519866347';


SELECT * FROM MY_DATABASE.PUBLIC.CARDS WHERE COMPANY_ID = '656ca2ed-2c18-4ae7-8850-4834e68be6e7' AND DIGITS = 2705;




CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.EXP AS   
SELECT
distinct exp.VEHICLE_ID, ROUND(exp.AMOUNT/-1, 2) AS AMOUNT, exp.VEHICLE_KILOMETERS, exp.VEHICLE_FUEL_VOLUME
FROM
MY_DATABASE.PUBLIC.EXPENSES exp
WHERE
exp.VEHICLE_ID IN (SELECT * FROM MY_DATABASE.PUBLIC.Vehicle_IDS)
AND exp.VEHICLE_ID IS NOT NULL
AND exp.VEHICLE_FUEL_VOLUME IS NOT NULL
AND exp.VEHICLE_KILOMETERS IS NOT NULL;


CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.VEH AS   
SELECT
distinct vhcle.ID,vhcle.MANUFACTURER, vhcle.MODEL, vhcle.FUEL_CODE
FROM
MY_DATABASE.PUBLIC.VEHICLES vhcle
WHERE
vhcle.ID IN (SELECT * FROM MY_DATABASE.PUBLIC.Vehicle_IDS);


SELECT * FROM MY_DATABASE.PUBLIC.EXP INNER JOIN MY_DATABASE.PUBLIC.VEH ON VEHICLE_ID = ID;



SELECT * FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS WHERE TRANSACTION_TYPE = 16 AND TRANSACTION_STATUS = 19 LIMIT 10;


SELECT comp.NAME, comp.SIREN,  comp.PUBLIC_MARKET_ATTRIBUTES, comp.SIRENE_DATA, PARSE_JSON(mctr.DATA):Merch_ID_DE42::string AS Merch_ID_DE42, PARSE_JSON(mctr.DATA):Txn_Desc::string AS Txn_Desc, mctr.DATA FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mctr
INNER JOIN MY_DATABASE.PUBLIC.CARD_EXPENSES cex
ON mctr.CARD_EXPENSE_ID = cex.ID
INNER JOIN MY_DATABASE.PUBLIC.CARDS crd
ON cex.CARD_ID = crd.ID
INNER JOIN MY_DATABASE.PUBLIC.COMPANIES comp
ON crd.COMPANY_ID = comp.ID
WHERE TRANSACTION_TYPE = 16 AND TRANSACTION_STATUS = 19 LIMIT 10;


SELECT
lsc.TYPE, COUNT(DISTINCT usr.ID)
FROM
MY_DATABASE.PUBLIC.USERS usr
INNER JOIN
MY_DATABASE.PUBLIC.USER_PROFILES usr_pr
ON
usr.ID = usr_pr.USER_ID
INNER JOIN
MY_DATABASE.PUBLIC.COMPANIES cmp
ON
cmp.ID = usr_pr.COMPANY_ID
INNER JOIN
MY_DATABASE.PUBLIC.CARDS crd
ON
usr_pr.ID = crd.USER_PROFILE_ID
INNER JOIN
MY_DATABASE.PUBLIC.LICENSES lsc
ON
lsc.ID = crd.LICENSE_ID
WHERE
usr.DELETED_AT IS NULL
AND usr_pr.ARCHIVED_AT IS NULL
AND usr_pr.ACTIVE = TRUE
AND usr_pr.DELETED_AT IS NULL
AND cmp.DELETED_AT IS NULL
AND cmp.CONTRACT = 0
AND PARSE_JSON(cmp.PREFERENCES):use_manual_expenses::string = true
AND LEFT(PARSE_JSON (cmp.flags): whereareyou, 1) IN ('5', '6', '7', '8')
AND crd.LICENSE_ID IS NOT NULL
AND crd.DELETED_AT IS NULL
AND crd.DEPRECATED_AT IS NULL
AND crd.DISABLE_AT IS NULL
AND lsc.ENDED_AT IS NULL
GROUP BY
lsc.TYPE;



SELECT COUNT(*) FROM MY_DATABASE.PUBLIC.EXPENSES WHERE CREATED_AT BETWEEN TO_DATE('2021-06-01') AND TO_DATE('2021-12-31');


SELECT SOURCE_TYPE, ROUND((COUNT(SOURCE_TYPE)/1103560) *100, 2) AS PER FROM MY_DATABASE.PUBLIC.EXPENSES WHERE CREATED_AT BETWEEN TO_DATE('2021-06-01') AND TO_DATE('2021-12-31') group by SOURCE_TYPE;





SELECT 
    SUM(bil.QUANTITY) AS LS_EXP 
FROM 
    MY_DATABASE.PUBLIC.BILLING_INVOICES bi
INNER JOIN
    MY_DATABASE.PUBLIC.BILLING_INVOICE_LINES bil
ON
  bi.ID = bil.BILLING_INVOICE_ID  
INNER JOIN
    MY_DATABASE.PUBLIC.BILLING_PRODUCTS bip
ON
  bil.BILLING_PRODUCT_ID = bip.ID 
WHERE  
    bil.TYPE = 0
    AND bip.NAME = 'Abonnement saisie de frais'
    AND bi.BILLED_AT BETWEEN TO_DATE('2021-11-01') AND TO_DATE('2021-11-30');


SELECT 
    cmp.NAME AS Company, addr.COUNTRY 
FROM 
    MY_DATABASE.PUBLIC.COMPANIES cmp
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    cmp.ID = addr.ADDRESSABLE_ID
WHERE  addr.ADDRESSABLE_TYPE = 'Company'
AND addr.COUNTRY NOT IN ('FRA', 'NCD', 'FR')
AND LEFT(PARSE_JSON (cmp.flags): whereareyou, 1) IN ('5', '6', '7', '8');








--- DATA ON VEHICLE EXPENDITURE

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.EXP AS
SELECT
DISTINCT exp.VEHICLE_ID, exp.CREATED_AT, ROUND(exp.AMOUNT/-1, 2) AS AMOUNT, exp.VEHICLE_KILOMETERS, exp.VEHICLE_FUEL_VOLUME
FROM
MY_DATABASE.PUBLIC.EXPENSES exp
WHERE
exp.VEHICLE_ID IN (SELECT * FROM MY_DATABASE.PUBLIC.Vehicle_IDS)
AND exp.VEHICLE_ID IS NOT NULL
AND exp.VEHICLE_FUEL_VOLUME IS NOT NULL
AND exp.VEHICLE_KILOMETERS IS NOT NULL
ORDER BY exp.VEHICLE_ID, exp.CREATED_AT ASC;

--- DATA ON VEHICLE CHARACTERISTICS

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.VEH AS
SELECT
distinct vhcle.ID,vhcle.MANUFACTURER, vhcle.MODEL, vhcle.FUEL_CODE
FROM
MY_DATABASE.PUBLIC.VEHICLES vhcle
WHERE
vhcle.ID IN (SELECT * FROM MY_DATABASE.PUBLIC.Vehicle_IDS);

--- Complete dataset
CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.FINAL_DATA AS
SELECT * FROM MY_DATABASE.PUBLIC.EXP INNER JOIN MY_DATABASE.PUBLIC.VEH ON VEHICLE_ID = ID;
SELECT km.*, km.VEHICLE_KILOMETERS - LAG(km.VEHICLE_KILOMETERS, 1, 0) IGNORE NULLS OVER (PARTITION BY VEHICLE_ID ORDER BY VEHICLE_ID, CREATED_AT ASC) AS DIff_vkm FROM MY_DATABASE.PUBLIC.FINAL_DATA km;


SELECT VEHICLE_ID FROM MY_DATABASE.PUBLIC.FINAL_DATA GROUP BY ID;



CREATE TABLE MY_DATABASE.PUBLIC.KM_DATA IF NOT EXISTS(
  VEHICLE_ID varchar,
  CREATED_AT TIMESTAMP_NTZ(9),
  AMOUNT NUMBER(9,2),
  VEHICLE_KILOMETERS NUMBER(38,0),
  VEHICLE_FUEL_VOLUME NUMBER(8,3),
  ID varchar,
  MANUFACTURER varchar,
  MODEL varchar,
  FUEL_CODE NUMBER(38,0)  
);

TRUNCATE TABLE MY_DATABASE.PUBLIC.KM_DATA;

INSERT INTO MY_DATABASE.PUBLIC.KM_DATA (VEHICLE_ID, CREATED_AT, AMOUNT, VEHICLE_KILOMETERS, VEHICLE_FUEL_VOLUME, ID, MANUFACTURER, MODEL, FUEL_CODE) SELECT * FROM MY_DATABASE.PUBLIC.FINAL_DATA;


SELECT count(VEHICLE_ID) FROM MY_DATABASE.PUBLIC.KM_DATA kd GROUP BY VEHICLE_ID;



SELECT km.*, km.VEHICLE_KILOMETERS - LAG(km.VEHICLE_KILOMETERS, 1, 0) IGNORE NULLS OVER (PARTITION BY VEHICLE_ID ORDER BY VEHICLE_ID, CREATED_AT ASC) AS DIff_vkm FROM MY_DATABASE.PUBLIC.FINAL_DATA km;


-- table cards, group by date_trunc(month,branded at) , cp.contract


SELECT 
    LEFT(DATE_TRUNC('MONTH', crd.BRANDED_AT), 10) AS MONTH, cmp.CONTRACT, COUNT(crd.BRANDED_AT) AS "Number of Cards Branded" 
FROM 
    MY_DATABASE.PUBLIC.CARDS crd 
INNER JOIN 
    MY_DATABASE.PUBLIC.COMPANIES cmp 
ON 
    crd.COMPANY_ID = cmp.ID 
WHERE
    crd.BRANDED_AT BETWEEN TO_DATE('2021-06-01') AND TO_DATE('2021-12-31')
GROUP BY DATE_TRUNC('MONTH', crd.BRANDED_AT) , cmp.CONTRACT
ORDER BY DATE_TRUNC('MONTH', crd.BRANDED_AT), cmp.CONTRACT ASC;  




DROP TABLE SAS_APPS.SALESFORCE.OPPORTUNITY;



SELECT * FROM MY_DATABASE.PUBLIC.COMPANIES  WHERE LOWER(NAME) LIKE '%sanef-sapn%';


DROP TABLE SAS_APPS.SALESFORCE.EMAILMESSAGE;



SELECT ORDINAL_POSITION, COLUMN_NAME 
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'ADMINS'
ORDER BY ORDINAL_POSITION;





SELECT 'Yes' WHERE "ID" in (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TAGS' ORDER BY ORDINAL_POSITION);



CREATE TABLE MY_DATABASE.PUBLIC.JOB_ACCURACY(
    tablename varchar,
    deleted_id varchar,
    verified_at varchar
);


SELECT * FROM MY_DATABASE.PUBLIC.JOB_ACCURACY;

SELECT CURRENT_TIMESTAMP();

"SELECT 'Yes' WHERE 'ID' iN (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME =  '" + context.table + "' )"; 


IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'Title' ) SELECT 'found' AS search_result ELSE SELECT 'not found' AS search_result;

  				
  			
  				
DELETE FROM MY_DATABASE.SALESFORCE.ALL_SALESFORCE_TABLES WHERE TABLENAMEWITHSCHEMA = 'order';  			
  				
				

SELECT LOWER(info_sch.TABLE_NAME) AS TABLENAMEWITHSCHEMA FROM INFORMATION_SCHEMA.TABLES info_sch WHERE info_sch.TABLE_SCHEMA = 'PUBLIC' AND info_sch.TABLE_TYPE = 'BASE TABLE' AND info_sch.TABLE_NAME NOT IN ('ALL_PUB_TABLES', 'PUBLIC_TABLES', 'SPECIAL_TABLES', 'TEMPORARY_RULES');

SELECT LOWER(info_sch.TABLE_NAME) AS TABLENAMEWITHSCHEMA FROM INFORMATION_SCHEMA.TABLES info_sch WHERE info_sch.TABLE_SCHEMA = 'SALESFORCE' AND info_sch.TABLE_TYPE = 'BASE TABLE' AND info_sch.TABLE_NAME NOT IN ('ALL_SALESFORCE_TABLES', 'SALESFORCE_TABLES', 'SPECIAL_TABLES', 'ORDER');


SELECT * FROM INFORMATION_SCHEMA.TABLES;

SELECT * FROM MY_DATABASE.PUBLIC.TEMPORARY_RULES;

DROP TABLE MY_DATABASE.SALESFORCE.ORDER;



SELECT DISTINCT GROUP_ID FROM MY_DATABASE.PUBLIC.COMPANIES; Join with MY_DATABASE.PUBLIC.GROUPS NAME containing Ministères;


SELECT * FROM MY_DATABASE.PUBLIC.ALL_PUB_TABLES WHERE TABLENAMEWITHSCHEMA = 'users';


CREATE OR REPLACE VIEW comp_exp_gt_50k AS
SELECT 
    exp.COMPANY_ID AS COMPANY, LEFT(DATE_TRUNC('MONTH', exp.CREATED_AT),4) AS PERIOD, ROUND(SUM(exp.AMOUNT/-1), 2) AS EXPENSE 
FROM 
    MY_DATABASE.PUBLIC.EXPENSES exp 
INNER JOIN    
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    exp.COMPANY_ID = comp.ID        
    WHERE  exp.CREATED_AT BETWEEN TO_DATE('2021-06-01') AND TO_DATE('2021-12-31')
    AND LEFT(PARSE_JSON (comp.flags): whereareyou, 1) IN ('5', '6', '7', '8') 
    AND comp.contract=0    
GROUP BY COMPANY, PERIOD
HAVING EXPENSE > 50000;



SELECT 
    COUNT(urs.ID) AS nbr_Users
FROM
    MY_DATABASE.PUBLIC.USERS urs
INNER JOIN
    MY_DATABASE.PUBLIC.USER_PROFILES usr_pr
ON
    urs.ID = usr_pr.USER_ID
WHERE usr_pr.COMPANY_ID IN(SELECT DISTINCT COMPANY FROM MY_DATABASE.PUBLIC.comp_exp_gt_50k); 



CREATE OR REPLACE VIEW USER_TYPE_EXPENSE AS 
SELECT 
     DISTINCT exp.USER_PROFILE_ID AS USR_PROF 
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN    
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN    
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID   

WHERE 
    exp.CREATED_AT BETWEEN TO_DATE('2021-10-01') AND TO_DATE('2021-12-31')
    AND exp.SOURCE_TYPE = 'CardExpense'
    AND mcrd_mch.MERCHANT_CATEGORY_CODE IN (4468, 3794, 3507, 4112, 3033, 3832, 3813, 3520, 3245, 3745, 3177, 3510, 3515, 3738, 3573, 3190, 3742, 3024, 5811, 3653, 3008, 3018, 3570, 3540, 3056, 3695, 3825, 3667, 3644, 3812, 3297, 3007, 3631, 3206, 4111, 3770, 4582, 3636, 3782, 3608, 3719, 3819, 3032, 3078, 3015, 3019, 3675, 3504, 4119, 3029, 3047, 8999, 3621, 3773, 3647, 3668, 3750, 3001, 3822, 5921, 3785, 3103, 3583, 3689, 3752, 3084, 3613, 7012, 3260, 3006, 5331, 3816, 3596, 3826, 3044, 3082, 3551, 3677, 3722, 3069, 3511, 3641, 3818, 5451, 3524, 3174, 3501, 3618, 5813, 3786, 3680, 763, 3798, 3099, 3670, 4411, 3609, 3774, 3837, 3536, 3595, 3681, 3672, 3530, 3715, 3034, 3775, 3043, 3267, 3687, 3829, 3553, 3665, 5422, 3125, 3292, 3064, 3295, 3005, 3734, 3020, 3660, 3581, 3693, 3612, 3009, 3146, 3791, 3684, 3089, 3732, 3516, 3182, 3645, 3048, 3519, 3811, 3590, 3236, 3602, 3081, 3066, 3505, 3585, 3637, 3628, 3072, 3025, 3012, 3102, 4011, 3535, 3643, 3698, 7011, 3639, 3040, 3256, 4131, 3699, 3607, 3294, 3720, 3017, 3021, 3625, 3180, 3769, 3000, 3521, 3537, 3792, 3723, 3671, 3004, 3030, 3801, 3175, 3191, 3717, 3098, 3617, 3075, 3035, 3575, 3223, 3703, 3777, 3240, 3638, 3132, 3544, 3096, 3586, 3013, 3651, 3652, 3538, 3016, 3039, 3730, 3591, 3619, 3663, 3662, 3548, 5812, 3037, 3068, 3052, 3688, 3783, 3246, 3678, 3649, 7033, 5411, 3661, 3623, 3063, 3558, 3632, 3771, 3011, 3747, 3112, 3654, 3248, 3784, 3592, 3765, 3572, 7032, 3690, 3561, 3795, 3560, 3136, 3050, 3528, 3559, 3051, 3808, 3022, 3513, 3741, 3512, 3178, 3541, 3010, 3526, 3796, 3506, 3694, 3597, 5441, 3234, 3567, 3751, 3800, 3057, 3555, 3830, 3692, 3100, 3298, 3088, 3014, 5462, 3710, 3076, 3676, 3219, 3634, 3502, 3650, 3299, 3031, 3228, 3261, 3038, 3129, 3655, 3658, 3824, 4722, 5499, 3674, 3700, 4789, 3659, 6513, 3503, 3657, 3640, 3058, 3543, 3737, 3642, 3111, 3731, 3539, 3079, 3184, 3780, 3797, 3577, 3779, 3077, 3196, 3740, 3598, 3706, 3049, 3509, 3579, 3514, 5814, 3533, 3615, 3144, 3302, 3026, 3549, 3028, 3716, 3772, 3728, 3604, 3211, 3778, 3183, 3127, 3296, 3629, 3635, 3042, 3542, 3799, 3718, 3835, 4723, 3754, 3562, 3508, 3702, 3793, 4511, 3648, 3301, 3523, 3802, 3217, 3027, 3790, 3545, 3247, 3065, 3161, 3721, 3552, 3709, 4121, 3814);
    

SELECT 
    COUNT(urs.ID) AS nbr_Users
FROM
    MY_DATABASE.PUBLIC.USERS urs
INNER JOIN
    MY_DATABASE.PUBLIC.USER_PROFILES usr_pr
ON
    urs.ID = usr_pr.USER_ID
WHERE usr_pr.ID IN (SELECT USR_PROF FROM MY_DATABASE.PUBLIC.USER_TYPE_EXPENSE); 





SELECT MAX(ID) FROM MY_DATABASE.PUBLIC.ACCOUNT_DIRECT_DEBITS;


SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.USER_PROFILES;

-- ffcad9e9-09cb-4bff-9176-86ce6f263b0d

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA = 'USER_PROFILES';


DROP TABLE MY_DATABASE.PUBLIC.email_validations;

SELECT axv.CODE, axv.NAME FROM MY_DATABASE.PUBLIC.ANALYTICAL_AXIS_VALUES axv WHERE ANALYTICAL_AXIS_ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.ANALYTICAL_AXES WHERE COMPANY_ID = '75c44203-1d00-44bc-867c-f07268152b41');

SELECT ax.CODE AS AXES_CODE, ax.NAME AS AXES_NAME, axv.CODE AS VALUE_CODE, axv.NAME AS VALUE_NAME FROM MY_DATABASE.PUBLIC.ANALYTICAL_AXES ax
INNER JOIN MY_DATABASE.PUBLIC.ANALYTICAL_AXIS_VALUES axv
ON ax.ID = axv.ANALYTICAL_AXIS_ID 
WHERE COMPANY_ID = '75c44203-1d00-44bc-867c-f07268152b41'; 






CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.user_profiles
(
    id varchar NOT NULL,
    user_id varchar NOT NULL,
    company_id varchar NOT NULL,
    active boolean NOT NULL,
    analytic_code varchar,
    creator_id varchar,
    executive_officer boolean NOT NULL,
    expense_type integer,
    "position" varchar,
    code varchar,
    role integer NOT NULL,
    accounting_employee_account varchar,
    accounting_charge_account varchar,
    preferences variant NOT NULL DEFAULT '{}'::variant,
    deleted_at timestamp without time zone,
    api_consumer_secret varchar,
    confirmed_at timestamp without time zone,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    archived_at timestamp without time zone,
    exact_contact_guid varchar,
    pushed_to_exact_at timestamp without time zone,
    two_factor_active boolean,
    notification_settings variant NOT NULL DEFAULT '{}'::variant,
    PRIMARY KEY(id)
);


CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.account_direct_debits (
	id varchar,
	company_id varchar NOT NULL,
	account_id varchar NOT NULL,
	"mode" integer NOT NULL DEFAULT 0,
	settings variant NOT NULL DEFAULT '{}'::variant,
	amount numeric(9, 2) NOT NULL DEFAULT 0.0,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	validated_at timestamp NULL,
	pushed_at timestamp NULL,
	done_at timestamp NULL,
	loyaltek_request_id integer NULL,
	canceled_at timestamp NULL,
	collect_date timestamp NULL,
	refusal_code varchar NULL,
	created_by varchar NULL,
	bank_account_id varchar NULL,
	expected_money_availability_date date NULL,
	linked_direct_debit_id varchar NULL,
	validated_by_id varchar NULL,
	PRIMARY KEY (id)
);


CREATE TABLE IF NOT EXISTS public.treezor_payins (
	id integer NOT NULL,
	"json" variant NULL,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	treezor_account_id integer NULL,
	treezor_virtual_iban_id integer NULL,
	PRIMARY KEY (id)
);


CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.flying_blue_accounts (
	id varchar,
	user_id varchar NULL,
	deleted_at timestamp NULL,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	account_number varchar NULL,
	subscribed_at timestamp NULL,
	PRIMARY KEY (id)
);


CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.email_validations (
	email varchar NOT NULL,
	sendgrid_data variant NOT NULL DEFAULT '{}'::variant,
	id varchar NOT NULL,
	PRIMARY KEY (id)
);


CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.accounts (
	id varchar NOT NULL,
	company_id varchar NOT NULL,
	currency varchar NOT NULL,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	deleted_at timestamp NULL,
	"name" varchar NULL,
	balance_at timestamp NULL,
	balance_available numeric(9, 2) NOT NULL,
	balance_real numeric(9, 2) NOT NULL,
	distributor_id varchar NULL,
	"token" integer NULL,
	master_account_id varchar NULL,
	closed_at timestamp NULL,
	debit_mode integer NOT NULL DEFAULT 0,
	debit_settings variant NOT NULL DEFAULT '{}'::variant,
	scheme integer NOT NULL DEFAULT 0,
	accounting variant NOT NULL DEFAULT '{}'::variant,
	monthly_spendings float8 NULL,
	PRIMARY KEY (id)
);



CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.card_orders (
	id varchar NOT NULL,
	company_id varchar NOT NULL,
	user_id varchar NULL,
	status integer NOT NULL ,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	recipient varchar NULL,
	private_note text NULL,
	names text NULL,
	my_companys_count integer NOT NULL,
	my_companysx_count integer NOT NULL,
	"type" integer NOT NULL,
	card_shipping_id varchar NULL,
	shipping_amount numeric(7, 2) NULL,
	user_profile_id varchar NULL,
	shipping_notes varchar NULL,
	my_companys_fleet_count integer NOT NULL DEFAULT 0,
	scheme integer NOT NULL,
	account_id varchar NULL,
	"options" variant NOT NULL DEFAULT '{}'::variant,
	PRIMARY KEY (id)
);

DROP TABLE MY_DATABASE.PUBLIC.ACCOUNTS;


SELECT * FROM MY_DATABASE.PUBLIC.USER_PROFILES;

DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('email_validations', 'flying_blue_accounts');

INSERT INTO MY_DATABASE.PUBLIC.SPECIAL_TABLES (TABS) VALUES('flying_blue_accounts');

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES;

SELECT * FROM MY_DATABASE.PUBLIC.KPIS ORDER BY DATE_FROM DESC LIMIT 1;

SELECT * FROM MY_DATABASE.PUBLIC.KPIS;

DROP TABLE MY_DATABASE.KPI.kpis;

CREATE TABLE IF NOT EXISTS MY_DATABASE.KPI.kpi(
start_at date NULL, End_at date NULL, Lead_users_new integer Null, Current_lead_users_count integer Null, Lead_companies_new integer Null, Current_lead_companies_count integer Null, Cardholders_new integer Null, Cardholders_count integer Null, Active_license_my_company_count float Null, Active_license_my_companyx_count float Null, Active_license_expense_count float Null, Active_license_archiving_count float Null, Accounts_new integer Null, Accounts_count integer Null, Accounts_low_balance integer Null, Account_loads_count integer Null, Account_loads_sum float Null, Closed_accounts_new integer Null, First_account_loads_count integer Null, New_card_orders_new float Null, Pending_card_orders_count float Null, Card_orders_new float Null, Billable_companies_count integer Null, First_active_card_new integer Null, Branded_cards_new integer Null, Branded_cards_count integer Null, Active_cards_new integer Null, Activated_cards_new integer Null, Activated_cards_count integer Null, Deprecated_cards_new integer Null, Payments_successful_new integer Null, Payments_successful_count integer Null, Payments_failed_new integer Null, Spendings_new_sum float Null, Spendings_sum float Null, Top_expense float Null, Period varchar Null
);


CREATE TABLE IF NOT EXISTS MY_DATABASE.KPI.kpis(
start_at date NULL, End_at date NULL, Lead_users_new integer Null, Current_lead_users_count integer Null, Lead_companies_new integer Null, Current_lead_companies_count integer Null, Cardholders_new integer Null, Cardholders_count integer Null, Active_license_my_company_count float Null, Active_license_my_companyx_count float Null, Active_license_expense_count float Null, Active_license_archiving_count float Null, Accounts_new integer Null, Accounts_count integer Null, Accounts_low_balance integer Null, Account_loads_count integer Null, Account_loads_sum float Null, Closed_accounts_new integer Null, First_account_loads_count integer Null, New_card_orders_new float Null, Pending_card_orders_count float Null, Card_orders_new float Null, Billable_companies_count integer Null, First_active_card_new integer Null, Branded_cards_new integer Null, Branded_cards_count integer Null, Active_cards_new integer Null, Activated_cards_new integer Null, Activated_cards_count integer Null, Deprecated_cards_new integer Null, Payments_successful_new integer Null, Payments_successful_count integer Null, Payments_failed_new integer Null, Spendings_new_sum float Null, Spendings_sum float Null, Top_expense float Null, Period varchar Null
);

INSERT INTO MY_DATABASE.KPI.kpis (start_at, End_at, Lead_users_new, Current_lead_users_count, Lead_companies_new, Current_lead_companies_count, Cardholders_new, Cardholders_count, Active_license_my_company_count , Active_license_my_companyx_count, Active_license_expense_count, Active_license_archiving_count, Accounts_new, Accounts_count, Accounts_low_balance, Account_loads_count, Account_loads_sum, Closed_accounts_new, First_account_loads_count, New_card_orders_new, Pending_card_orders_count, Card_orders_new, Billable_companies_count, First_active_card_new, Branded_cards_new, Branded_cards_count, Active_cards_new, Activated_cards_new, Activated_cards_count, Deprecated_cards_new, Payments_successful_new, Payments_successful_count, Payments_failed_new, Spendings_new_sum, Spendings_sum, Top_expense, Period 
) SELECT TO_DATE(start_at), TO_DATE(End_at), Lead_users_new, Current_lead_users_count, Lead_companies_new, Current_lead_companies_count, Cardholders_new, Cardholders_count, Active_license_my_company_count , Active_license_my_companyx_count, Active_license_expense_count, Active_license_archiving_count, Accounts_new, Accounts_count, Accounts_low_balance, Account_loads_count, Account_loads_sum, Closed_accounts_new, First_account_loads_count, New_card_orders_new, Pending_card_orders_count, Card_orders_new, Billable_companies_count, First_active_card_new, Branded_cards_new, Branded_cards_count, Active_cards_new, Activated_cards_new, Activated_cards_count, Deprecated_cards_new, Payments_successful_new, Payments_successful_count, Payments_failed_new, Spendings_new_sum, Spendings_sum, Top_expense, Period FROM MY_DATABASE.KPI.kpi;


INSERT INTO MY_DATABASE.KPI.kpi (start_at, End_at, Lead_users_new, Current_lead_users_count, Lead_companies_new, Current_lead_companies_count, Cardholders_new, Cardholders_count, Active_license_my_company_count , Active_license_my_companyx_count, Active_license_expense_count, Active_license_archiving_count, Accounts_new, Accounts_count, Accounts_low_balance, Account_loads_count, Account_loads_sum, Closed_accounts_new, First_account_loads_count, New_card_orders_new, Pending_card_orders_count, Card_orders_new, Billable_companies_count, First_active_card_new, Branded_cards_new, Branded_cards_count, Active_cards_new, Activated_cards_new, Activated_cards_count, Deprecated_cards_new, Payments_successful_new, Payments_successful_count, Payments_failed_new, Spendings_new_sum, Spendings_sum, Top_expense, Period 
) SELECT start_at, End_at, Lead_users_new, Current_lead_users_count, Lead_companies_new, Current_lead_companies_count, Cardholders_new, Cardholders_count, Active_license_my_company_count , Active_license_my_companyx_count, Active_license_expense_count, Active_license_archiving_count, Accounts_new, Accounts_count, Accounts_low_balance, Account_loads_count, Account_loads_sum, Closed_accounts_new, First_account_loads_count, New_card_orders_new, Pending_card_orders_count, Card_orders_new, Billable_companies_count, First_active_card_new, Branded_cards_new, Branded_cards_count, Active_cards_new, Activated_cards_new, Activated_cards_count, Deprecated_cards_new, Payments_successful_new, Payments_successful_count, Payments_failed_new, Spendings_new_sum, Spendings_sum, Top_expense, Period FROM MY_DATABASE.KPI.kpis;


SELECT TO_DATE('2022-02-02 00:00:00.000');

SELECT * FROM MY_DATABASE.KPI.kpi;   


ALTER TABLE MY_DATABASE.KPI.kpi ALTER COLUMN START_AT date;





SELECT MERCHANT_CATEGORY_CODE, COUNT(MERCHANT_CATEGORY_CODE) AS COUNT_CODE FROM MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS WHERE MERCHANT_CATEGORY_CODE IN (5542, 5541) AND COUNTRY = 'FRA' GROUP BY MERCHANT_CATEGORY_CODE;


SELECT * FROM MY_DATABASE.KPI.kpi kpis WHERE kpis.PERIOD = 'Weekly';



SELECT LEFT(START_AT, 4) AS START_AT, SPENDINGS_SUM FROM MY_DATABASE.KPI.kpi kpis WHERE kpis.PERIOD = 'Weekly';


SELECT AVG(SPENDINGS_SUM) FROM MY_DATABASE.KPI.kpi kpis WHERE kpis.PERIOD = 'Weekly';


SELECT DATE_TRUNC('Year', START_AT) AS YEAR, DATE_TRUNC('MONTH', START_AT) AS PERIOD, AVG(SPENDINGS_SUM) FROM MY_DATABASE.KPI.kpi kpis WHERE kpis.PERIOD = 'Daily' GROUP BY DATE_TRUNC('YEAR', START_AT), DATE_TRUNC('MONTH', START_AT) ORDER BY PERIOD ASC;



SELECT LEFT(START_AT, 4) AS YEAR, DATE_TRUNC('MONTH', START_AT) AS PERIOD, ROUND(AVG(SPENDINGS_SUM), 2) AS AVG_SPENDINGS_SUM FROM MY_DATABASE.KPI.kpi kpis WHERE kpis.PERIOD = 'Daily' GROUP BY LEFT(START_AT, 4), DATE_TRUNC('MONTH', START_AT) ORDER BY PERIOD ASC;



SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES;
SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES;


SELECT * FROM MY_DATABASE.PUBLIC.ALL_PUB_TABLES;



DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('public.some_guy_1', 'public.some_guy_2', 'public.some_guy_3', 'public.some_guy_bloob_1', 'some_guy_1', 'some_guy_2', 'some_guy_3', 'some_guy_bloob_1');

SELECT START_AT, END_AT, ROUND((PAYMENTS_FAILED_NEW/(PAYMENTS_FAILED_NEW + PAYMENTS_SUCCESSFUL_NEW)) * 100) AS Fail_rate, PERIOD FROM MY_DATABASE.KPI.kpi kpis WHERE  PAYMENTS_SUCCESSFUL_NEW > 0 AND PAYMENTS_FAILED_NEW > 0;

SELECT AVG(ROUND((PAYMENTS_FAILED_NEW/(PAYMENTS_FAILED_NEW + PAYMENTS_SUCCESSFUL_NEW)) * 100)) AS Fail_rate FROM MY_DATABASE.KPI.kpi kpis WHERE kpis.PERIOD = 'Daily' AND PAYMENTS_SUCCESSFUL_NEW > 0 AND PAYMENTS_FAILED_NEW > 0;



SELECT LEFT(START_AT, 4) AS YEAR, START_AT, PERIOD, PAYMENTS_SUCCESSFUL_NEW  FROM MY_DATABASE.KPI.kpi ORDER BY YEAR ASC;

SELECT LEFT(START_AT, 4) AS YEAR, START_AT, PERIOD, PAYMENTS_FAILED_NEW  FROM MY_DATABASE.KPI.kpi ORDER BY YEAR ASC;



--Success_payment_new/Billabale_companies

SELECT LOWER(info_sch.TABLE_NAME) AS TABLENAMEWITHSCHEMA FROM INFORMATION_SCHEMA.TABLES info_sch WHERE info_sch.TABLE_SCHEMA = 'PUBLIC' AND info_sch.TABLE_TYPE = 'BASE TABLE' AND info_sch.TABLE_NAME NOT IN ('ALL_PUB_TABLES', 'PUBLIC_TABLES', 'SPECIAL_TABLES', 'TEMPORARY_RULES', '');



SELECT LOWER(info_sch.TABLE_NAME) AS TABLENAMEWITHSCHEMA FROM INFORMATION_SCHEMA.TABLES info_sch WHERE info_sch.TABLE_SCHEMA = 'PUBLIC' AND info_sch.TABLE_TYPE = 'BASE TABLE' AND info_sch.TABLE_NAME <>'merchant_server_transactions';


DROP TABLE "MY_DATABASE"."PUBLIC"."PUBLIC"."SOME_GUY_1";


SELECt * FROM MY_DATABASE.KPI.KPI; -- 2,483 rows


SELECT 565118.3 + 227857593.1;

SELECT 228422711.4 - 230324841.99;



DELETE FROM MY_DATABASE.KPI.KPI WHERE START_AT = TO_DATE('2022-02-02');          

CREATE OR REPLACE VIEW MY_DATABASE.KPI.Number_of_Expenses_By_Company AS
SELECT 
    comp.NAME AS COMPANY, COUNT(exp.ID) AS Number_of_Expenses, ROUND(SUM(exp.AMOUNT/-1) , 2) AS Total_of_Expenses
FROM 
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES comp
ON    
    exp.COMPANY_ID = comp.ID
GROUP BY comp.NAME
ORDER BY Number_of_Expenses ASC;



SELECT 3836982 - 3752282;




DROP TABLE SAS_APPS.SALESFORCE.OPPORTUNITY;


SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES  WHERE TABS = 'merchant_server_transactions';

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES  WHERE TABLENAMEWITHSCHEMA = 'merchant_server_transactions';

DELETE  FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES  WHERE TABLENAMEWITHSCHEMA = 'merchant_server_transactions';

INSERT INTO MY_DATABASE.PUBLIC.SPECIAL_TABLES (TABS) VALUES ('merchant_server_transactions');



ALTER TABLE MY_DATABASE.PUBLIC.FLYING_BLUE_CALLS RENAME TO MY_DATABASE.PUBLIC.FLYING_BLUE_CALLS_OLD;


SELECT * FROM MY_DATABASE.KPI.KPI ORDER BY START_AT DESC;

SELECT * FROM MY_DATABASE.PUBLIC.KPIS ORDER BY DATE_FROM DESC LIMIT 10;

SELECT * FROM MY_DATABASE.kpi.KPI ORDER BY start_at DESC LIMIT 10;


SELECT * FROM MY_DATABASE.PUBLIC.KPIS WHERE DATE_FROM BETWEEN TO_DATE('2022-02-09') AND TO_DATE('2022-02-09') ORDER BY DATE_FROM DESC;

SELECT * FROM MY_DATABASE.KPI.KPI WHERE START_AT BETWEEN TO_DATE('2022-02-02') AND TO_DATE('2022-02-09') AND PERIOD = 'Daily' ORDER BY START_AT DESC;

DELETE FROM MY_DATABASE.KPI.KPI WHERE START_AT BETWEEN TO_DATE('2022-02-02') AND TO_DATE('2022-02-09') AND PERIOD = 'Daily';



CREATE TABLE IF NOT EXISTS MY_DATABASE.KPI.kpis(
start_at varchar NULL, End_at varchar NULL, Lead_users_new integer Null, Current_lead_users_count integer Null, Lead_companies_new integer Null, Current_lead_companies_count integer Null, Cardholders_new integer Null, Cardholders_count integer Null, Active_license_my_company_count float Null, Active_license_my_companyx_count float Null, Active_license_expense_count float Null, Active_license_archiving_count float Null, Accounts_new integer Null, Accounts_count integer Null, Accounts_low_balance integer Null, Account_loads_count integer Null, Account_loads_sum float Null, Closed_accounts_new integer Null, First_account_loads_count integer Null, New_card_orders_new float Null, Pending_card_orders_count float Null, Card_orders_new float Null, Billable_companies_count integer Null, First_active_card_new integer Null, Branded_cards_new integer Null, Branded_cards_count integer Null, Active_cards_new integer Null, Activated_cards_new integer Null, Activated_cards_count integer Null, Deprecated_cards_new integer Null, Payments_successful_new integer Null, Payments_successful_count integer Null, Payments_failed_new integer Null, Spendings_new_sum float Null, Spendings_sum float Null, Top_expense float Null, Period varchar Null
);

INSERT INTO MY_DATABASE.KPI.kpis (start_at, End_at, Lead_users_new, Current_lead_users_count, Lead_companies_new, Current_lead_companies_count, Cardholders_new, Cardholders_count, Active_license_my_company_count , Active_license_my_companyx_count, Active_license_expense_count, Active_license_archiving_count, Accounts_new, Accounts_count, Accounts_low_balance, Account_loads_count, Account_loads_sum, Closed_accounts_new, First_account_loads_count, New_card_orders_new, Pending_card_orders_count, Card_orders_new, Billable_companies_count, First_active_card_new, Branded_cards_new, Branded_cards_count, Active_cards_new, Activated_cards_new, Activated_cards_count, Deprecated_cards_new, Payments_successful_new, Payments_successful_count, Payments_failed_new, Spendings_new_sum, Spendings_sum, Top_expense, Period 
) SELECT TO_DATE(start_at), TO_DATE(End_at), Lead_users_new, Current_lead_users_count, Lead_companies_new, Current_lead_companies_count, Cardholders_new, Cardholders_count, Active_license_my_company_count , Active_license_my_companyx_count, Active_license_expense_count, Active_license_archiving_count, Accounts_new, Accounts_count, Accounts_low_balance, Account_loads_count, Account_loads_sum, Closed_accounts_new, First_account_loads_count, New_card_orders_new, Pending_card_orders_count, Card_orders_new, Billable_companies_count, First_active_card_new, Branded_cards_new, Branded_cards_count, Active_cards_new, Activated_cards_new, Activated_cards_count, Deprecated_cards_new, Payments_successful_new, Payments_successful_count, Payments_failed_new, Spendings_new_sum, Spendings_sum, Top_expense, Period FROM MY_DATABASE.KPI.kpi;





SELECT * FROM MY_DATABASE.KPI.KPIS;

-- , END_AT = TO_DATE('2022-02-09') 

UPDATE MY_DATABASE.KPI.KPIS SET START_AT = '2022-02-09' WHERE LEAD_USERS_NEW = 57;


CREATE TABLE IF NOT EXISTS MY_DATABASE.KPI.kpis_KKPI(
start_at varchar NULL, End_at varchar NULL, Lead_users_new integer Null, Current_lead_users_count integer Null, Lead_companies_new integer Null, Current_lead_companies_count integer Null, Cardholders_new integer Null, Cardholders_count integer Null, Active_license_my_company_count float Null, Active_license_my_companyx_count float Null, Active_license_expense_count float Null, Active_license_archiving_count float Null, Accounts_new integer Null, Accounts_count integer Null, Accounts_low_balance integer Null, Account_loads_count integer Null, Account_loads_sum float Null, Closed_accounts_new integer Null, First_account_loads_count integer Null, New_card_orders_new float Null, Pending_card_orders_count float Null, Card_orders_new float Null, Billable_companies_count integer Null, First_active_card_new integer Null, Branded_cards_new integer Null, Branded_cards_count integer Null, Active_cards_new integer Null, Activated_cards_new integer Null, Activated_cards_count integer Null, Deprecated_cards_new integer Null, Payments_successful_new integer Null, Payments_successful_count integer Null, Payments_failed_new integer Null, Spendings_new_sum float Null, Spendings_sum float Null, Top_expense float Null, Period varchar Null
);



SELECT TO_DATE(LEFT(START_AT, 10)) FROM MY_DATABASE.KPI.KPIS;

INSERT INTO MY_DATABASE.KPI.kpi (start_at, End_at, Lead_users_new, Current_lead_users_count, Lead_companies_new, Current_lead_companies_count, Cardholders_new, Cardholders_count, Active_license_my_company_count , Active_license_my_companyx_count, Active_license_expense_count, Active_license_archiving_count, Accounts_new, Accounts_count, Accounts_low_balance, Account_loads_count, Account_loads_sum, Closed_accounts_new, First_account_loads_count, New_card_orders_new, Pending_card_orders_count, Card_orders_new, Billable_companies_count, First_active_card_new, Branded_cards_new, Branded_cards_count, Active_cards_new, Activated_cards_new, Activated_cards_count, Deprecated_cards_new, Payments_successful_new, Payments_successful_count, Payments_failed_new, Spendings_new_sum, Spendings_sum, Top_expense, Period 
) SELECT TO_DATE(LEFT(START_AT, 10)), TO_DATE(LEFT(END_AT, 10)), Lead_users_new, Current_lead_users_count, Lead_companies_new, Current_lead_companies_count, Cardholders_new, Cardholders_count, Active_license_my_company_count , Active_license_my_companyx_count, Active_license_expense_count, Active_license_archiving_count, Accounts_new, Accounts_count, Accounts_low_balance, Account_loads_count, Account_loads_sum, Closed_accounts_new, First_account_loads_count, New_card_orders_new, Pending_card_orders_count, Card_orders_new, Billable_companies_count, First_active_card_new, Branded_cards_new, Branded_cards_count, Active_cards_new, Activated_cards_new, Activated_cards_count, Deprecated_cards_new, Payments_successful_new, Payments_successful_count, Payments_failed_new, Spendings_new_sum, Spendings_sum, Top_expense, 'Weekly' FROM MY_DATABASE.KPI.kpis;



SELECT * FROM MY_DATABASE.KPI.KPI ORDER BY START_AT DESC LIMIT 100;

SELECT * FROM MY_DATABASE.PUBLIC.KPIS ORDER BY DATE_FROM DESC LIMIT 100;



SELECT * FROM MY_DATABASE.PUBLIC.KPIS WHERE ID = 3374; -- 11, 12, 13

SELECT * FROM MY_DATABASE.PUBLIC.KPIS WHERE DATE_FROM BETWEEN TO_DATE('2022-02-10') AND TO_DATE('2022-02-13') AND DATE_TO BETWEEN TO_DATE('2022-02-10') AND TO_DATE('2022-02-13');


SELECT * FROM MY_DATABASE.KPI.KPIS;

DELETE FROM MY_DATABASE.KPI.KPI WHERE START_AT BETWEEN TO_DATE('2022-02-10') AND TO_DATE('2022-02-13') AND END_AT BETWEEN TO_DATE('2022-02-10') AND TO_DATE('2022-02-13');

DELETE FROM MY_DATABASE.KPI.KPI WHERE START_AT = TO_DATE('2022-02-23') AND END_AT = TO_DATE('2022-03-01') AND PERIOD = 'Weekly';


SELECT * FROM MY_DATABASE.KPI.KPI ORDER BY START_AT DESC LIMIT 100;

SELECT START_AT, END_AT, ACTIVE_CARDS_NEW, PERIOD  FROM MY_DATABASE.KPI.KPI WHERE PERIOD = 'Weekly' ORDER BY START_AT DESC LIMIT 100;

SELECT * FROM MY_DATABASE.PUBLIC.KPIS ORDER BY DATE_TO DESC LIMIT 100;




DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('expense_business_code_guesses', 'disputes', 'department_user_profiles', 'expense_exports', 'expense_categories', 'generali_calls', 'loyaltek_calls', 'invoices', 'invoice_lines', 'billing_issues');


DROP TABLE MY_DATABASE.PUBLIC.billing_issues;

--parse_json(comp):whereareyou::string

Select cp.name, cp.created_at, gp.name, PARSE_JSON(cp.billing):billing_fleet_permanent_price::string as billing_fleet_permanent_price from  MY_DATABASE.PUBLIC.COMPANIES cp 
  left join MY_DATABASE.PUBLIC.GROUPS gp on gp.id=cp.group_id
where cp.contract=1;



SELECT 
    tr_py.ID AS PayID, tr_py.JSON, tr_acc.JSON, tr_py.TREEZOR_ACCOUNT_ID, tr_acc.ID, tr_py.CREATED_AT AS tr_py_CREATED_AT, tr_acc.ACCOUNT_ID, tr_acc.CREATED_AT AS tr_acc_CREATED_AT, acc.COMPANY_ID, comp.NAME, addr.COUNTRY 
FROM 
    MY_DATABASE.PUBLIC.TREEZOR_PAYINS tr_py 
INNER JOIN     
    MY_DATABASE.PUBLIC.TREEZOR_ACCOUNTS tr_acc
ON
    tr_py.TREEZOR_ACCOUNT_ID = tr_acc.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.ACCOUNTS acc
ON
    tr_acc.ACCOUNT_ID = acc.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    acc.COMPANY_ID = comp.ID    
INNER JOIN     
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    comp.ID = addr.ADDRESSABLE_ID        
WHERE addr.ADDRESSABLE_TYPE = 'Company' AND comp.CONTRACT = 0 --AND tr_py.ID = 13854948    
;

CREATE TABLE IF NOT EXISTS Fraud_BICS (bics varchar);
-- 

SELECT 
    comp.ID, UPPER(LEFT(PARSE_JSON(tr_py.JSON):DbtrIBAN::string, 2)) AS IBAN_source, COUNT(IBAN_source) AS Num_IN
FROM 
    MY_DATABASE.PUBLIC.TREEZOR_PAYINS tr_py 
INNER JOIN     
    MY_DATABASE.PUBLIC.TREEZOR_ACCOUNTS tr_acc
ON
    tr_py.TREEZOR_ACCOUNT_ID = tr_acc.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.ACCOUNTS acc
ON
    tr_acc.ACCOUNT_ID = acc.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    acc.COMPANY_ID = comp.ID    
INNER JOIN     
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    comp.ID = addr.ADDRESSABLE_ID        
WHERE addr.ADDRESSABLE_TYPE = 'Company'; --AND IBAN_source NOT IN ('UA', 'IQ', 'IR', 'RU', 'KP', 'AF', 'PK', 'GG');





SELECT LEFT(PARSE_JSON(tr_py.JSON):DbtrIBAN::string, 2) AS Source_Currency, COUNT(Source_Currency) AS Number FROM MY_DATABASE.PUBLIC.TREEZOR_PAYINS tr_py GROUP BY Source_Currency ORDER BY Number DESC;

SELECT  tr_py.JSON, tr_acc.JSON, tr_py.TREEZOR_ACCOUNT_ID, tr_acc.ID, tr_py.CREATED_AT AS tr_py_CREATED_AT, tr_acc.ACCOUNT_ID, tr_acc.CREATED_AT AS tr_acc_CREATED_AT, acc.COMPANY_ID, comp.NAME, addr.COUNTRY FROM MY_DATABASE.PUBLIC.TREEZOR_PAYINS tr_py  INNER JOIN MY_DATABASE.PUBLIC.TREEZOR_ACCOUNTS tr_acc ON  tr_py.TREEZOR_ACCOUNT_ID = tr_acc.ID INNER JOIN  MY_DATABASE.PUBLIC.ACCOUNTS acc ON tr_acc.ACCOUNT_ID = acc.ID INNER JOIN  MY_DATABASE.PUBLIC.COMPANIES comp ON acc.COMPANY_ID = comp.ID INNER JOIN MY_DATABASE.PUBLIC.ADDRESSES addr ON  comp.ID = addr.ADDRESSABLE_ID  WHERE addr.ADDRESSABLE_TYPE = 'Company'    ORDER BY ID ASC LIMIT 1000;

SELECT  UPPER(LEFT(PARSE_JSON(tr_py.JSON):DbtrIBAN::string, 2)) AS IBAN_source, tr_py.TREEZOR_ACCOUNT_ID, tr_acc.ID, tr_py.CREATED_AT AS tr_py_CREATED_AT, tr_acc.ACCOUNT_ID, tr_acc.CREATED_AT AS tr_acc_CREATED_AT, acc.COMPANY_ID, comp.NAME, addr.COUNTRY FROM MY_DATABASE.PUBLIC.TREEZOR_PAYINS tr_py  INNER JOIN MY_DATABASE.PUBLIC.TREEZOR_ACCOUNTS tr_acc ON  tr_py.TREEZOR_ACCOUNT_ID = tr_acc.ID INNER JOIN  MY_DATABASE.PUBLIC.ACCOUNTS acc ON tr_acc.ACCOUNT_ID = acc.ID INNER JOIN  MY_DATABASE.PUBLIC.COMPANIES comp ON acc.COMPANY_ID = comp.ID INNER JOIN MY_DATABASE.PUBLIC.ADDRESSES addr ON  comp.ID = addr.ADDRESSABLE_ID  WHERE addr.ADDRESSABLE_TYPE = 'Company'    ORDER BY ID ASC LIMIT 1000;



SELECT 
    comp.ID, UPPER(LEFT(PARSE_JSON(tr_py.JSON):DbtrIBAN::string, 2)) AS IBAN_source, COUNT( IBAN_source) AS Num_IN
FROM 
    MY_DATABASE.PUBLIC.TREEZOR_PAYINS tr_py 
INNER JOIN     
    MY_DATABASE.PUBLIC.TREEZOR_ACCOUNTS tr_acc
ON
    tr_py.TREEZOR_ACCOUNT_ID = tr_acc.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.ACCOUNTS acc
ON
    tr_acc.ACCOUNT_ID = acc.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    acc.COMPANY_ID = comp.ID    
INNER JOIN     
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    comp.ID = addr.ADDRESSABLE_ID        
WHERE addr.ADDRESSABLE_TYPE = 'Company'
GROUP BY comp.ID, IBAN_source;


CREATE TABLE IF NOT EXISTS Fraud_BICS (bics varchar);

-- V1

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Fraud AS  
SELECT 
    comp.NAME,  COUNT(DISTINCT UPPER(LEFT(PARSE_JSON(tr_py.JSON):DbtrIBAN::string, 2)) ) AS Num_Diff_ISO_IBAN, COUNT(DISTINCT UPPER(LEFT(PARSE_JSON(tr_py.JSON):DbtrIBAN::string, 2)) ) AS Num_Diff_Country
FROM 
    MY_DATABASE.PUBLIC.TREEZOR_PAYINS tr_py 
INNER JOIN     
    MY_DATABASE.PUBLIC.TREEZOR_ACCOUNTS tr_acc
ON
    tr_py.TREEZOR_ACCOUNT_ID = tr_acc.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.ACCOUNTS acc
ON
    tr_acc.ACCOUNT_ID = acc.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    acc.COMPANY_ID = comp.ID    
INNER JOIN     
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    comp.ID = addr.ADDRESSABLE_ID        
WHERE addr.ADDRESSABLE_TYPE = 'Company' AND LEFT(PARSE_JSON (comp.flags): whereareyou, 1) IN ('6','7','8') AND comp.CONTRACT = 0--AND comp.NAME = 'LBO TECH' --'Pierre et Maurice'
GROUP BY  comp.NAME
ORDER BY Num_Diff_ISO_IBAN DESC;

SELECT * FROM MY_DATABASE.PUBLIC.Fraud;


-- V2
---Fraud IBANS Countries

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Fraud_IBANS AS  
SELECT 
    comp.NAME,  COUNT(DISTINCT UPPER(LEFT(PARSE_JSON(tr_py.JSON):DbtrIBAN::string, 2)) ) AS FRAUD_IBANS
FROM 
    MY_DATABASE.PUBLIC.TREEZOR_PAYINS tr_py 
INNER JOIN     
    MY_DATABASE.PUBLIC.TREEZOR_ACCOUNTS tr_acc
ON
    tr_py.TREEZOR_ACCOUNT_ID = tr_acc.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.ACCOUNTS acc
ON
    tr_acc.ACCOUNT_ID = acc.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    acc.COMPANY_ID = comp.ID    
INNER JOIN     
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    comp.ID = addr.ADDRESSABLE_ID        
WHERE addr.ADDRESSABLE_TYPE = 'Company' AND comp.CONTRACT = 0 AND UPPER(LEFT(PARSE_JSON(tr_py.JSON):DbtrIBAN::string, 2)) IN ('UA', 'IQ', 'IR', 'RU', 'KP', 'AF', 'PK', 'GG') AND LEFT(PARSE_JSON (comp.flags): whereareyou, 1) IN ('6','7','8')
GROUP BY  comp.NAME
ORDER BY FRAUD_IBANS DESC;




SELECT frd.*, CASE WHEN frd_ib.FRAUD_IBANS IS NULL THEN 0 ELSE frd_ib.FRAUD_IBANS END AS FRAUD_IBANS FROM MY_DATABASE.PUBLIC.Fraud frd LEFT JOIN MY_DATABASE.PUBLIC.Fraud_IBANS frd_ib ON  frd.NAME = frd_ib.NAME;

SELECT * FROM MY_DATABASE.PUBLIC.TREEZOR_PAYINS; -- 13854947 13285097
SELECT * FROM MY_DATABASE.PUBLIC.TREEZOR_PAYINS ORDER BY ID DESC LIMIT 1;

SELECT * FROM MY_DATABASE.PUBLIC.TREEZOR_PAYINS_TEST ORDER BY ID DESC LIMIT 1;

UPDATE MY_DATABASE.PUBLIC.TREEZOR_PAYINS_TEST SET JSON = parse_json('{"DbtrIBAN": "IR7630003032210002002033671"}') WHERE ID = 13854947;

UPDATE MY_DATABASE.PUBLIC.TREEZOR_PAYINS_TEST SET ID = 13854948 WHERE ID = 13854947;


SELECT TO_TIMESTAMP_NTZ('2022-02-03 11:46:11.111');
SELECT TO_VARIANT('{"DbtrIBAN": "IR7610107003410032302970054"}');
INSERT INTO MY_DATABASE.PUBLIC.TREEZOR_PAYINS (ID, JSON, CREATED_AT, UPDATED_AT, TREEZOR_ACCOUNT_ID, TREEZOR_VIRTUAL_IBAN_ID) VALUES (13854948, parse_json('{"DbtrIBAN": "IR7630003032210002002033671"}'), TO_TIMESTAMP_NTZ('2022-02-03 11:46:11.111'), TO_TIMESTAMP_NTZ('2022-02-03 11:46:11.135'),  3010170, '');

INSERT INTO MY_DATABASE.PUBLIC.TREEZOR_PAYINS (ID, JSON, CREATED_AT, UPDATED_AT, TREEZOR_ACCOUNT_ID, TREEZOR_VIRTUAL_IBAN_ID) SELECT * FROM MY_DATABASE.PUBLIC.TREEZOR_PAYINS_TEST ORDER BY ID DESC LIMIT 1;

DELETE FROM MY_DATABASE.PUBLIC.FRAUD_BICS WHERE BICS = 'BICS';

CREATE TABLE IF NOT EXISTS Fraud_BICS (bics varchar);

CREATE TABLE IF NOT EXISTS Risky_MCC (mcc varchar);


--V3
-- Neo Bank BICs

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Check_FRAUD_BICS AS
SELECT 
    comp.NAME,  COUNT(DISTINCT PARSE_JSON(tr_py.JSON):ibanBic::string ) AS FRAUD_BICS
FROM 
    MY_DATABASE.PUBLIC.TREEZOR_PAYINS tr_py 
INNER JOIN     
    MY_DATABASE.PUBLIC.TREEZOR_ACCOUNTS tr_acc
ON
    tr_py.TREEZOR_ACCOUNT_ID = tr_acc.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.ACCOUNTS acc
ON
    tr_acc.ACCOUNT_ID = acc.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    acc.COMPANY_ID = comp.ID    
INNER JOIN     
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    comp.ID = addr.ADDRESSABLE_ID        
WHERE addr.ADDRESSABLE_TYPE = 'Company' AND comp.CONTRACT = 0 AND PARSE_JSON(tr_py.JSON):ibanBic::string IN (SELECT * FROM MY_DATABASE.PUBLIC.FRAUD_BICS) AND LEFT(PARSE_JSON (comp.flags): whereareyou, 1) IN ('6','7','8')
GROUP BY  comp.NAME
ORDER BY FRAUD_BICS DESC
;

SELECT PARSE_JSON(JSON):ibanBic::string FROM MY_DATABASE.PUBLIC.TREEZOR_PAYINS ORDER BY ID DESC LIMIT 101;

SELECT * FROM MY_DATABASE.PUBLIC.Check_FRAUD_BICS;

SELECT frd.*, CASE WHEN frd_ib.FRAUD_IBANS IS NULL THEN 0 ELSE frd_ib.FRAUD_IBANS END AS FRAUD_IBANS, CASE WHEN frd_bic.FRAUD_BICS IS NULL THEN 0 ELSE frd_bic.FRAUD_BICS END AS NUM_FRAUD_BICS FROM MY_DATABASE.PUBLIC.Fraud frd LEFT JOIN MY_DATABASE.PUBLIC.Fraud_IBANS frd_ib ON frd.NAME = frd_ib.NAME LEFT JOIN MY_DATABASE.PUBLIC.Check_FRAUD_BICS frd_bic ON  frd.NAME = frd_bic.NAME;



--V4
CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Check_Express_Loads AS
SELECT 
     --comp.NAME, COUNT(*) AS Num_EXPRESS_Load
     comp.NAME, COUNT(*) AS Num_EXPRESS_Load, DATEDIFF(MONTH, PARSE_JSON(comp.FLAGS):mvc_created_at::date, CURRENT_DATE()) AS Company_DURATION, ROUND(Num_EXPRESS_Load/Company_DURATION,1) AS AVG_MNTHLY_LOAD
FROM 
    MY_DATABASE.PUBLIC.ACCOUNT_EXPRESS_LOADS acc_exp_ld 
INNER JOIN     
    MY_DATABASE.PUBLIC.ACCOUNTS acc
ON
    acc_exp_ld.ACCOUNT_ID = acc.ID
INNER JOIN     
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    acc.COMPANY_ID = comp.ID    
INNER JOIN     
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    comp.ID = addr.ADDRESSABLE_ID        
WHERE addr.ADDRESSABLE_TYPE = 'Company' AND comp.CONTRACT = 0 AND LEFT(PARSE_JSON (comp.FLAGS): whereareyou, 1) IN ('6','7','8')
GROUP BY comp.NAME, Company_DURATION
--ORDER BY Num_EXPRESS_Load DESC
ORDER BY Num_EXPRESS_Load DESC
;    

SELECT TO_DATE(CURRENT_TIMESTAMP());


--V

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Company_FRAUD_TEMP1 AS
SELECT frd.*, CASE WHEN frd_ib.FRAUD_IBANS IS NULL THEN 0 ELSE frd_ib.FRAUD_IBANS END AS FRAUD_IBANS, CASE WHEN frd_bic.FRAUD_BICS IS NULL THEN 0 ELSE frd_bic.FRAUD_BICS END AS NUM_FRAUD_BICS FROM MY_DATABASE.PUBLIC.Fraud frd LEFT JOIN MY_DATABASE.PUBLIC.Fraud_IBANS frd_ib ON frd.NAME = frd_ib.NAME LEFT JOIN MY_DATABASE.PUBLIC.Check_FRAUD_BICS frd_bic ON  frd.NAME = frd_bic.NAME;




--V5
CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Company_FRAUD_TEMP2  AS
SELECT 
    comp_frd.*, CASE WHEN ch_exp_ld.NUM_EXPRESS_LOAD IS NULL THEN 0 ELSE ch_exp_ld.NUM_EXPRESS_LOAD END AS NUM_EXPRESS_LOAD, 
    CASE WHEN ch_exp_ld.COMPANY_DURATION IS NULL THEN 0 ELSE ch_exp_ld.COMPANY_DURATION END AS COMPANY_DURATION,
    CASE WHEN ch_exp_ld.AVG_MNTHLY_LOAD IS NULL THEN 0 ELSE ch_exp_ld.AVG_MNTHLY_LOAD END AS AVG_MNTHLY_LOAD
FROM 
    MY_DATABASE.PUBLIC.Company_FRAUD_TEMP1 comp_frd 
LEFT JOIN 
    MY_DATABASE.PUBLIC.Check_Express_Loads ch_exp_ld ON  comp_frd.NAME = ch_exp_ld.NAME;



SELECT DISTINCT ADDRESSABLE_TYPE  FROM MY_DATABASE.PUBLIC.ADDRESSES;

SELECT * FROM MY_DATABASE.PUBLIC.Company_FRAUD;

SELECT * FROM MY_DATABASE.PUBLIC.Company_FRAUD_TEMP2;

SELECT 
    comp.NAME, addr.CARRIER_NAME --, usr.EMAIL 
FROM 
    MY_DATABASE.PUBLIC.USER_PROFILES usr_pr 
INNER JOIN 
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    usr_pr.ID = comp.OWNER_ID
INNER JOIN 
    MY_DATABASE.PUBLIC.USERS usr
ON
    usr_pr.USER_ID = usr.ID   
INNER JOIN     
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    usr.ID = addr.ADDRESSABLE_ID        
WHERE addr.ADDRESSABLE_TYPE = 'User' AND LEFT(PARSE_JSON (comp.FLAGS): whereareyou, 1) IN ('6','7','8');


SELECT 
   DISTINCT comp.NAME, usr.EMAIL, split_part(usr.EMAIL, '@', 2) AS Split_EMAIL, addr.CARRIER_NAME 
FROM 
    MY_DATABASE.PUBLIC.USERS usr 
INNER JOIN 
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    usr.ID = comp.OWNER_ID
INNER JOIN     
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    usr.ID = addr.ADDRESSABLE_ID     
WHERE addr.ADDRESSABLE_TYPE = 'User' AND LEFT(PARSE_JSON (comp.FLAGS): whereareyou, 1)  IN ('6','7','8');
    


--V6

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Company_FRAUD_TEMP3  AS 
SELECT 
    comp.NAME, comp_frd2.NUM_DIFF_ISO_IBAN, comp_frd2.NUM_DIFF_COUNTRY, comp_frd2.FRAUD_IBANS, comp_frd2.NUM_FRAUD_BICS, comp_frd2.NUM_EXPRESS_LOAD, comp_frd2.COMPANY_DURATION, comp_frd2.AVG_MNTHLY_LOAD
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp 
LEFT JOIN
    MY_DATABASE.PUBLIC.Company_FRAUD_TEMP2 comp_frd2
ON
    comp.NAME = comp_frd2.NAME
WHERE LEFT(PARSE_JSON (comp.FLAGS): whereareyou, 1)  IN ('6','7','8') AND comp.CONTRACT = 0;   

SELECT * FROM MY_DATABASE.PUBLIC.Company_FRAUD_TEMP3;



-- V7
-- Emails

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Company_FRAUD_Emails  AS
SELECT 
    comp.NAME,  COUNT(split_part(usr.EMAIL, '@', 2) )AS NUM_FRAUD_EMAIL 
FROM 
    MY_DATABASE.PUBLIC.USERS usr 
INNER JOIN 
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    usr.ID = comp.OWNER_ID   
WHERE 
    LEFT(PARSE_JSON (comp.FLAGS): whereareyou, 1)  IN ('6','7','8') AND comp.CONTRACT = 0 AND LOWER(split_part(usr.EMAIL, '@', 2)) IN ('outlook.com' , 'hotmail.com', 'gratuit.com', 'live.com', 'gmail.com')
GROUP BY comp.NAME;



-- V8
-- Phone Carrier


CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Company_FRAUD_Phone_carriere  AS
SELECT 
   comp.NAME, COUNT(addr.CARRIER_NAME) AS NUM_FRAUD_CARRIER ---addr.CARRIER_NAME 
FROM 
    MY_DATABASE.PUBLIC.USERS usr 
INNER JOIN 
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    usr.ID = comp.OWNER_ID
INNER JOIN     
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    usr.ID = addr.ADDRESSABLE_ID     
WHERE 
    addr.ADDRESSABLE_TYPE = 'User' 
    AND LEFT(PARSE_JSON (comp.FLAGS): whereareyou, 1) IN ('6','7','8') 
    AND comp.CONTRACT = 0
    AND ( LOWER(addr.CARRIER_NAME) NOT LIKE '%orange%' AND LOWER(addr.CARRIER_NAME) NOT LIKE '%bouygues%' AND LOWER(addr.CARRIER_NAME) NOT LIKE '%sfr%' AND LOWER(addr.CARRIER_NAME) NOT LIKE '%radiotelephone%' AND LOWER(addr.CARRIER_NAME) NOT LIKE '%free%' AND LOWER(addr.CARRIER_NAME) NOT LIKE '%colt%' AND LOWER(addr.CARRIER_NAME) NOT LIKE '%vodafone%' )
    --     AND ( LOWER(addr.CARRIER_NAME) NOT LIKE 'orange%' AND LOWER(addr.CARRIER_NAME) NOT LIKE 'bouygues%' AND LOWER(addr.CARRIER_NAME) NOT LIKE 'sfr%' AND LOWER(addr.CARRIER_NAME) NOT LIKE 'radiotelephone%' AND LOWER(addr.CARRIER_NAME) NOT LIKE 'free%' AND LOWER(addr.CARRIER_NAME) NOT LIKE 'colt%' AND LOWER(addr.CARRIER_NAME) NOT LIKE 'vodafone%' )
GROUP BY comp.NAME --, addr.CARRIER_NAME
;
-- ('orange', 'bouygues', 'sfr', 'radiotelephone', 'free', 'colt', 'vodafone')



--V9


CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.FRAUD_Countries  AS
SELECT 
    comp.NAME, COUNT(DISTINCT exp.INVOICE_COUNTRY) AS NUM_FRAUD_EXP_COUNTRY
FROM 
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    exp.COMPANY_ID = comp.ID   
WHERE 
    LEFT(PARSE_JSON (comp.FLAGS): whereareyou, 1)  IN ('6','7','8') AND comp.CONTRACT = 0 AND exp.INVOICE_COUNTRY IN ('UKR', 'IRQ', 'IRN', 'RUS', 'PRK', 'AFG', 'PAK', 'GGY')
GROUP BY comp.NAME --, NUM_FRAUD_EXP_COUNTRY,
; 


CREATE TABLE IF NOT EXISTS Risky_MCC (MCC integer);



-- V10

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.FRAUD_MCC  AS
SELECT 
    comp.NAME, COUNT( DISTINCt mcrd_mch.MERCHANT_CATEGORY_CODE ) AS NUM_FRAUD_MCC
FROM 
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    exp.COMPANY_ID = comp.ID   
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID     
WHERE 
    LEFT(PARSE_JSON (comp.FLAGS): whereareyou, 1)  IN ('6','7','8') AND comp.CONTRACT = 0 AND mcrd_mch.MERCHANT_CATEGORY_CODE IN (SELECT DISTINCT MCC FROM MY_DATABASE.PUBLIC.Risky_MCC)
GROUP BY comp.NAME 
; 



--V11

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Company_FRAUD  AS
SELECT 
    comp_frd3.*, comp_frd_ph.NUM_FRAUD_CARRIER, comp_frd_eml.NUM_FRAUD_EMAIL, frd_cty.NUM_FRAUD_EXP_COUNTRY, frd_mcc.NUM_FRAUD_MCC 
FROM 
    MY_DATABASE.PUBLIC.Company_FRAUD_TEMP3 comp_frd3
LEFT JOIN
    MY_DATABASE.PUBLIC.Company_FRAUD_Phone_carriere comp_frd_ph
ON
    comp_frd3.NAME = comp_frd_ph.NAME
LEFT JOIN
    MY_DATABASE.PUBLIC.Company_FRAUD_Emails comp_frd_eml
ON
    comp_frd3.NAME = comp_frd_eml.NAME
LEFT JOIN
    MY_DATABASE.PUBLIC.FRAUD_Countries frd_cty
ON
    comp_frd3.NAME = frd_cty.NAME
LEFT JOIN
    MY_DATABASE.PUBLIC.FRAUD_MCC frd_mcc
ON
    comp_frd3.NAME = frd_mcc.NAME;    
    


-- Risky_MCC
SELECT * FROM MY_DATABASE.PUBLIC.Company_FRAUD;

SELECT DISTINCT INVOICE_COUNTRY FROM MY_DATABASE.PUBLIC.EXPENSES;

--('UA', 'IQ', 'IR', 'RU', 'KP', 'AF', 'PK', 'GG') COUNT(DISTINCT exp.INVOICE_COUNTRY)

    

TRUNCATE MY_DATABASE.PUBLIC.BILLING_ISSUES;


CREATE TABLE IF NOT EXISTS MY_DATABASE.public.receipt_ocrs (
    id varchar NOT NULL,
    receipt_id varchar NOT NULL,
    data variant NOT NULL DEFAULT '{}'::variant,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);

DROP TABLE MY_DATABASE.PUBLIC.FRAUD_WEIGHTS;
CREATE TABLE IF NOT EXISTS MY_DATABASE.KPI.FRAUD_WEIGHTS(
    NUM_DIFF_ISO_IBAN NUMBER(38,1),
	NUM_DIFF_COUNTRY NUMBER(38,1),
	NUM_FRAUD_IBANS NUMBER(38,1),
	NUM_FRAUD_BICS NUMBER(38,1),
	NUM_EXPRESS_LOAD NUMBER(38,1),
	COMPANY_DURATION NUMBER(38,1),
	AVG_MNTHLY_LOAD NUMBER(38,1),
	NUM_FRAUD_CARRIER NUMBER(38,1),
	NUM_FRAUD_EMAIL NUMBER(38,1),
	NUM_FRAUD_EXP_COUNTRY NUMBER(38,1),
	NUM_FRAUD_MCC NUMBER(38,1)
);

SELECT * FROM MY_DATABASE.KPI.FRAUD_WEIGHTS ;
INSERT INTO MY_DATABASE.KPI.FRAUD_WEIGHTS (
    NUM_DIFF_ISO_IBAN,
	NUM_DIFF_COUNTRY,
	NUM_FRAUD_IBANS,
	NUM_FRAUD_BICS,
	NUM_EXPRESS_LOAD,
	COMPANY_DURATION,
	AVG_MNTHLY_LOAD,
	NUM_FRAUD_CARRIER,
	NUM_FRAUD_EMAIL,
	NUM_FRAUD_EXP_COUNTRY,
	NUM_FRAUD_MCC
) VALUES (2, 3, 2, 2, 1, 1, 1, 1, 1, 2,0.5);



SELECT 
    COUNT(*) AS TOTAl_CLIENTS
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp
WHERE  LEFT(PARSE_JSON (comp.FLAGS): whereareyou, 1)  IN ('6','7','8') AND comp.ID IN (SELECT DISTINCT ls.COMPANY_ID FROM MY_DATABASE.PUBLIC.LICENSES ls WHERE ls.TYPE = 2) AND PARSE_JSON(comp.PREFERENCES): use_manual_expenses::string =  'true' AND PARSE_JSON(comp.PREFERENCES): use_km_expenses::string =  'true' AND comp.CONTRACT <> 0;



SELECT 
     chr.CREATED_AT AS Date_Churned, chr.COMPANY_ID, 
     CASE WHEN chr.REASON = 0 THEN 'Other'
     WHEN chr.REASON = 1 THEN 'Company Health' 
     WHEN chr.REASON = 5 THEN 'Satisfaction'
     WHEN chr.REASON = 7 THEN 'competitor'
     WHEN chr.REASON = 8 THEN 'Fraudulent Usage'
     WHEN chr.REASON = 9 THEN 'Wrong Deal'
     ELSE 'Undefined'
     END AS REASON,
     CASE WHEN acc.COMPANYSIZE__C IS NULL THEN 'Undefined' ELSE acc.COMPANYSIZE__C END AS Size,
     REPLACE(INITCAP(split_part(adms.EMAIL, '@',1)), '.', ' ') AS Manager,  
     DATEDIFF(MONTH, TO_DATE(LEFT(PARSE_JSON (comp.FLAGS): mvc_created_at, 10)), TO_DATE(Date_Churned)) AS LIFE_TIME,
     CASE WHEN LIFE_TIME > 12 THEN '+1 Year(s)'
     WHEN LIFE_TIME BETWEEN 6 AND 12 THEN '+6 Months'
     WHEN LIFE_TIME = 6 THEN '6 Months'
     WHEN LIFE_TIME BETWEEN 1 AND 5 THEN '<6 Months'
     ELSE '<1 Month'
     END AS DURATION 
FROM 
    MY_DATABASE.PUBLIC.CHURNS chr
INNER JOIN
    MY_DATABASE.SALESFORCE.ACCOUNT acc
ON 
    chr.COMPANY_ID = acc.MOONCARDCOMPANYID__C
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES comp
ON 
    chr.COMPANY_ID = comp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.ADMINS adms
ON
    comp.CSM_ID = adms.ID;
    
    
SELECT 
     DISTINCT zm.NAME AS CALLER, zm.DURATION, zm.DIRECTION, zm.DATE_TIME, zm.CALLEE_LOCATION, zm.CALLER_LOCATION, sf_usr.NAME AS SF_NAME, sf_prfl.NAME AS PROFILE
FROM
    SAS_APPS.ZOOM_APP.ZOOM_CALL zm
INNER JOIN
    SAS_APPS.SALESFORCE.USER sf_usr
ON
    LOWER(zm.NAME) = LOWER(sf_usr.NAME)
INNER JOIN 
    SAS_APPS.SALESFORCE.PROFILE sf_prfl
ON
    sf_usr.PROFILEID = sf_prfl.ID
WHERE CALLER LIKE '%Gregoire%';     
    
    
create or replace view MY_DATABASE.KPI.ACCOUNT_MANAGER_UPSELL_AND_MRR(
	PERIOD,
	NAME,
	NEW_MRR,
    MRR,
	UPSELL
) as
select period,REPLACE(INITCAP(split_part(t1.email, '@',1)), '.', ' ') AS Name, ROUND(sum(MRR), 2) as new_mrr , ROUND(sum(MRR), 2) as mrr , sum(t1.nb_licenses) as Upsell from (
        select date_trunc('month', t.started_at) as period,t.email,count(t.l_id) as nb_licenses, nb_licenses*t.pricing as MRR  from (
            select distinct l.id as l_id,cp.id, l.type,l.started_at,l.ended_at,a2.email, ca.token,l.type,
            case 
                when parse_json(cp.billing):billing_cycle ='free' then '0.0'
                when l.type =0 then coalesce (parse_json(cp.billing):billing_my_company_permanent_price , '19.9')
                when l.type =1 then coalesce(parse_json(cp.billing):billing_my_companyx_permanent_price, '49.9')
                when l.type =2 then coalesce (parse_json(cp.billing):billing_fleet_permanent_price , '7.50') end as pricing,
           case 
                when datediff(month,parse_json(cp.flags):mvc_created_at::date,l.started_At) >=6  then 1 else 0 end as upsell
  

            from "MY_DATABASE"."PUBLIC"."LICENSES" l
                left join "MY_DATABASE"."PUBLIC"."COMPANIES" cp on cp.id= l.company_id 
                    left join "MY_DATABASE"."PUBLIC"."ADMINS" a2 on a2.id=cp.CSM_ID
                        left join "MY_DATABASE"."PUBLIC"."CARDS" ca on ca.license_id=l.id
            where a2.email !='alexandre.smadja@my_company.co' and upsell = 1) as t
            group by period,t.email,t.pricing) as t1
    group by t1.period,t1.email;    
    
SELECt * FROM MY_DATABASE.KPI.ACCOUNT_MANAGER_UPSELL_AND_MRR;

SELECT COMPANY FROM
(SELECT
    sf_prfl.NAME AS PROFILE, dpl.Score_Total__c, dpl.NAME AS COMPANY, dpl.STAGE__C, dpl.OWNERID, sf_usr.NAME 
FROM 
    SAS_APPS.SALESFORCE.DEPLOIEMENT dpl
INNER JOIN 
    SAS_APPS.SALESFORCE.USER sf_usr
ON
    dpl.OWNERID = sf_usr.ID    
INNER JOIN 
    SAS_APPS.SALESFORCE.PROFILE sf_prfl
ON
    sf_usr.PROFILEID = sf_prfl.ID
where PROFILE IN ('Mooncard - AM', 'Mooncard - AM Leader') AND sf_usr.NAME NOT IN ('Alexandra Coulbaut', 'Edouard Guichard') AND dpl.STAGE__C NOT IN ('Churned'));




SELECT
    DISTINCT dpl.NAME AS COMPANY, dpl.CREATEDDATE, sf_prfl.NAME AS PROFILE, dpl.Score_Total__c, dpl.STAGE__C, dpl.OWNERID, sf_usr.NAME, CASE WHEN acc.COMPANYSIZE__C IS NULL THEN 'Undefined' ELSE acc.COMPANYSIZE__C END AS Size 
FROM 
    SAS_APPS.SALESFORCE.DEPLOIEMENT dpl
INNER JOIN 
    SAS_APPS.SALESFORCE.USER sf_usr
ON
    dpl.OWNERID = sf_usr.ID    
INNER JOIN 
    SAS_APPS.SALESFORCE.PROFILE sf_prfl
ON
    sf_usr.PROFILEID = sf_prfl.ID
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES comp
ON 
    dpl.NAME = comp.NAME    
INNER JOIN
    MY_DATABASE.SALESFORCE.ACCOUNT acc
ON 
    comp.ID = acc.MOONCARDCOMPANYID__C    
where PROFILE IN ('Mooncard - AM', 'Mooncard - AM Leader') AND sf_usr.NAME NOT IN ('Alexandra Coulbaut', 'Edouard Guichard') AND dpl.STAGE__C NOT IN ('Churned');




--    ***************. Dashboard for International Sales BRANDED CARDS  *************** --

SELECT
    comp.NAME, 
    CASE WHEN addr.COUNTRY IN ('BEL', 'BE') THEN 'Belgium'
    WHEN addr.COUNTRY IN ('NLD', 'NL') THEN 'Netherlands'
    WHEN addr.COUNTRY IN ('DEU', 'DE') THEN 'Germany'
    WHEN addr.COUNTRY IN ('ITA', 'IT') THEN 'Italy'
    WHEN addr.COUNTRY IN ('ESP', 'ES') THEN 'Spain'
    WHEN addr.COUNTRY IN ('AUT', 'AU') THEN 'Austria'
    WHEN addr.COUNTRY IN ('CYP', 'CY') THEN 'Cyprus'
    WHEN addr.COUNTRY IN ('GBR', 'GB') THEN 'United Kingdom'
    ELSE addr.COUNTRY END AS COUNTRY, 
    LEFT(crd.BRANDED_AT, 10) AS BRANDED_AT, sf_role.NAME AS ROLE
FROM 
    MY_DATABASE.PUBLIC.CARDS crd 
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES comp
ON 
    crd.COMPANY_ID = comp.ID  
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON 
    comp.ID = addr.ADDRESSABLE_ID    
INNER JOIN 
    SAS_APPS.SALESFORCE.ACCOUNT acc
ON
    comp.ID = acc.MOONCARDCOMPANYID__C
INNER JOIN 
    SAS_APPS.SALESFORCE.USER sf_usr
ON
    acc.OWNERID = sf_usr.ID 
INNER JOIN 
    SAS_APPS.SALESFORCE.ROLE sf_role
ON
    sf_usr.USERROLEID = sf_role.ID     
WHERE crd.BRANDED_AT IS NOT NULL 
AND ( LOWER(sf_role.NAME) LIKE '%international%' OR LOWER(sf_role.NAME) LIKE 'team leader luxembourg%' OR LOWER(sf_role.NAME) LIKE 'team leader belgium%' OR LOWER(sf_role.NAME) LIKE 'team leader germany%' OR LOWER(sf_role.NAME) LIKE 'team leader italy%' OR LOWER(sf_role.NAME) LIKE 'team leader netherlands%')
AND addr.ADDRESSABLE_TYPE = 'Company'
AND addr.COUNTRY NOT IN ('FR', 'FRA') 
ORDER BY crd.BRANDED_AT ASC; 


SELECT DISTINCT ADDRESSABLE_TYPE FROM MY_DATABASE.PUBLIC.ADDRESSES;



--    ***************. Dashboard for International Sales NUMBER OF CLIENTS  *************** --

SELECT
    comp.NAME, 
    CASE WHEN addr.COUNTRY IN ('BEL', 'BE') THEN 'Belgium'
    WHEN addr.COUNTRY IN ('NLD', 'NL') THEN 'Netherlands'
    WHEN addr.COUNTRY IN ('DEU', 'DE') THEN 'Germany'
    WHEN addr.COUNTRY IN ('ITA', 'IT') THEN 'Italy'
    WHEN addr.COUNTRY IN ('ESP', 'ES') THEN 'Spain'
    WHEN addr.COUNTRY IN ('AUT', 'AU') THEN 'Austria'
    WHEN addr.COUNTRY IN ('CYP', 'CY') THEN 'Cyprus'
    WHEN addr.COUNTRY IN ('GBR', 'GB') THEN 'United Kingdom'
    ELSE addr.COUNTRY END AS COUNTRY, 
    PARSE_JSON(comp.FLAGS):mvc_created_at::date AS Joined_on, sf_role.NAME AS ROLE     
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp  
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON 
    comp.ID = addr.ADDRESSABLE_ID    
INNER JOIN 
    SAS_APPS.SALESFORCE.ACCOUNT acc
ON
    comp.ID = acc.MOONCARDCOMPANYID__C
INNER JOIN 
    SAS_APPS.SALESFORCE.USER sf_usr
ON
    acc.OWNERID = sf_usr.ID 
INNER JOIN 
    SAS_APPS.SALESFORCE.ROLE sf_role
ON
    sf_usr.USERROLEID = sf_role.ID     
WHERE Joined_on IS NOT NULL 
AND ( LOWER(sf_role.NAME) LIKE '%international%' OR LOWER(sf_role.NAME) LIKE 'team leader luxembourg%' OR LOWER(sf_role.NAME) LIKE 'team leader belgium%' OR LOWER(sf_role.NAME) LIKE 'team leader germany%' OR LOWER(sf_role.NAME) LIKE 'team leader italy%' OR LOWER(sf_role.NAME) LIKE 'team leader netherlands%')
AND addr.ADDRESSABLE_TYPE = 'Company'
AND addr.COUNTRY NOT IN ('FR', 'FRA') 
ORDER BY Joined_on ASC; 



--    ***************. Dashboard for International Sales TOTAL EXPENSES  *************** --

SELECT
    comp.NAME, 
    CASE WHEN addr.COUNTRY IN ('BEL', 'BE') THEN 'Belgium'
    WHEN addr.COUNTRY IN ('NLD', 'NL') THEN 'Netherlands'
    WHEN addr.COUNTRY IN ('DEU', 'DE') THEN 'Germany'
    WHEN addr.COUNTRY IN ('ITA', 'IT') THEN 'Italy'
    WHEN addr.COUNTRY IN ('ESP', 'ES') THEN 'Spain'
    WHEN addr.COUNTRY IN ('AUT', 'AU') THEN 'Austria'
    WHEN addr.COUNTRY IN ('CYP', 'CY') THEN 'Cyprus'
    WHEN addr.COUNTRY IN ('GBR', 'GB') THEN 'United Kingdom'
    ELSE addr.COUNTRY END AS COUNTRY, 
    LEFT(exp.CREATED_AT, 10) AS CREATED_AT, ROUND(exp.AMOUNT/-1, 2) AS AMOUNT, sf_role.NAME AS ROLE     
FROM 
    MY_DATABASE.PUBLIC.EXPENSES exp 
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES comp
ON 
    exp.COMPANY_ID = comp.ID  
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON 
    comp.ID = addr.ADDRESSABLE_ID    
INNER JOIN 
    SAS_APPS.SALESFORCE.ACCOUNT acc
ON
    comp.ID = acc.MOONCARDCOMPANYID__C
INNER JOIN 
    SAS_APPS.SALESFORCE.USER sf_usr
ON
    acc.OWNERID = sf_usr.ID 
INNER JOIN 
    SAS_APPS.SALESFORCE.ROLE sf_role
ON
    sf_usr.USERROLEID = sf_role.ID     
WHERE exp.CREATED_AT IS NOT NULL 
AND ( LOWER(sf_role.NAME) LIKE '%international%' OR LOWER(sf_role.NAME) LIKE 'team leader luxembourg%' OR LOWER(sf_role.NAME) LIKE 'team leader belgium%' OR LOWER(sf_role.NAME) LIKE 'team leader germany%' OR LOWER(sf_role.NAME) LIKE 'team leader italy%' OR LOWER(sf_role.NAME) LIKE 'team leader netherlands%')
AND addr.ADDRESSABLE_TYPE = 'Company'
AND addr.COUNTRY NOT IN ('FR', 'FRA') 
AND exp.SOURCE_TYPE = 'CardExpense'
ORDER BY exp.CREATED_AT ASC; 




--    ***************. Dashboard for International Sales AVERAGE CARD EXPENSES  *************** --

SELECT
    COUNT(DISTINCT crd.ID) AS Num_Cards,
    CASE WHEN addr.COUNTRY IN ('BEL', 'BE') THEN 'Belgium'
    WHEN addr.COUNTRY IN ('NLD', 'NL') THEN 'Netherlands'
    WHEN addr.COUNTRY IN ('DEU', 'DE') THEN 'Germany'
    WHEN addr.COUNTRY IN ('ITA', 'IT') THEN 'Italy'
    WHEN addr.COUNTRY IN ('ESP', 'ES') THEN 'Spain'
    WHEN addr.COUNTRY IN ('AUT', 'AU') THEN 'Austria'
    WHEN addr.COUNTRY IN ('CYP', 'CY') THEN 'Cyprus'
    WHEN addr.COUNTRY IN ('GBR', 'GB') THEN 'United Kingdom'
    ELSE addr.COUNTRY END AS COUNTRY, 
    LEFT(DATE_TRUNC('MONTH', exp.CREATED_AT), 10) AS Expense_DATE, ROUND(SUM(exp.AMOUNT/-1), 2) AS TOTAL_AMOUNT,
    ROUND(TOTAL_AMOUNT/Num_Cards, 2) AS AVG_CARD_EXP
FROM 
    MY_DATABASE.PUBLIC.CARDS crd 
INNER JOIN
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON 
    crd.ID = crd_exp.CARD_ID 
INNER JOIN
    MY_DATABASE.PUBLIC.EXPENSES exp
ON 
    crd_exp.ID = exp.SOURCE_ID 
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES comp
ON 
    crd.COMPANY_ID = comp.ID     
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON 
    comp.ID = addr.ADDRESSABLE_ID    
INNER JOIN 
    SAS_APPS.SALESFORCE.ACCOUNT acc
ON
    comp.ID = acc.MOONCARDCOMPANYID__C
INNER JOIN 
    SAS_APPS.SALESFORCE.USER sf_usr
ON
    acc.OWNERID = sf_usr.ID 
INNER JOIN 
    SAS_APPS.SALESFORCE.ROLE sf_role
ON
    sf_usr.USERROLEID = sf_role.ID     
WHERE exp.CREATED_AT IS NOT NULL 
AND ( LOWER(sf_role.NAME) LIKE '%international%' OR LOWER(sf_role.NAME) LIKE 'team leader luxembourg%' OR LOWER(sf_role.NAME) LIKE 'team leader belgium%' OR LOWER(sf_role.NAME) LIKE 'team leader germany%' OR LOWER(sf_role.NAME) LIKE 'team leader italy%' OR LOWER(sf_role.NAME) LIKE 'team leader netherlands%')
AND addr.ADDRESSABLE_TYPE = 'Company'
AND addr.COUNTRY NOT IN ('FR', 'FRA') 
AND exp.SOURCE_TYPE = 'CardExpense'
GROUP BY addr.COUNTRY, Expense_DATE
ORDER BY Expense_DATE ASC; 


select * from "MY_DATABASE"."PUBLIC"."INBOUND_SMS" where service='33755507481';


SELECT DISTINCT PARSE_JSON(gc.MESSAGE):mail::string AS Email, PARSE_JSON(gc.MESSAGE):firstName::string AS firstName, PARSE_JSON(gc.MESSAGE):lastName::string AS lastName, PARSE_JSON(gc.MESSAGE):birthDate::string AS birthDate, ROUND(2021- LEFT(birthDate, 4),0) AS AGE FROM MY_DATABASE.PUBLIC.GENERALI_CALLS gc WHERE lastName IS NOT NULL AND RIGHT(Email, 11) = 'my_company.co' ORDER BY birthDate ASC; 


SELECT * FROM MY_DATABASE.PUBLIC.INBOUND_SMS ORDER BY ID DESC LIMIT 10;


TRUNCATE TABLE MY_DATABASE.PUBLIC.INBOUND_SMS;



SELECT * FROM MY_DATABASE.PUBLIC.INBOUND_SMS;




--licenses', 'card_orders'

DELETE FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES WHERE TABS = 'treezor_beneficial_owners';
INSERT INTO MY_DATABASE.PUBLIC.SPECIAL_TABLES (TABS) VALUES ('card_orders');

DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA = 'inbound_sms';

SELECT * FROM MY_DATABASE.KPI.KPI ORDER BY START_AT DESC LIMIT 20;

--DELETE FROM MY_DATABASE.KPI.KPI WHERE START_AT = TO_DATE('2022-03-14') AND END_AT = TO_DATE('2022-03-20')  AND PERIOD = 'Weekly';


TRUNCATE TABLE LOGS.PUBLIC.AHOY_VISITS;


SELECT * FROM MY_DATABASE.PUBLIC.ADDRESSES  ORDER BY ID ASC LIMIT 1000;

CREATE TABLE IF NOT EXISTS  MY_DATABASE.PUBLIC.merchant_server_transactions(
	id varchar NOT NULL,
	"data" variant NOT NULL DEFAULT '{}'::variant,
	card_expense_id varchar NULL,
	card_expense_ids varchar,
	created_at timestamp,
	updated_at timestamp,
	PRIMARY KEY (id)
);


--TRUNCATE TABLE MY_DATABASE.PUBLIC.merchant_server_transactions;

SELECT * FROM MY_DATABASE.PUBLIC.merchant_server_transactions;



SELECT * FROM MY_DATABASE.PUBLIC.ADDRESSES WHERE STREET IS NOT NULL LIMIT 100; ORDER BY ID ASC;

SELECT LOWER(table_schema
       || '.'
       || table_name ) AS "table_name",
       table_schema, row_count
FROM   information_schema.tables
WHERE  table_type = 'BASE TABLE' AND table_schema = 'PUBLIC' 
ORDER  BY row_count;



SELECT table_schema
       || '.'
       || table_name AS "table_name",
       row_count
FROM   information_schema.tables
WHERE  table_type = 'BASE TABLE' AND table_schema = 'PUBLIC' 
ORDER  BY row_count;

--'treezor_accounts', 'treezor_beneficial_owners'
INSERT INTO MY_DATABASE.PUBLIC.SPECIAL_TABLES(TABS) VALUES ('treezor_accounts');


SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES WHERE TABS IN ('treezor_accounts');

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('treezor_accounts');

INSERT INTO MY_DATABASE.PUBLIC.PUBLIC_TABLES(TABLENAMEWITHSCHEMA) VALUES ('comments');

-- treezor_accounts et treezor_beneficial_owners ?
SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('treezor_accounts');
SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE LOWER(TABLENAMEWITHSCHEMA) NOT IN ('receipt_ocrs')  ORDER BY TABLE_NAME ASC;

SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES st INNER JOIN MY_DATABASE.PUBLIC.PUBLIC_TABLES pt on st.TABS = pt.TABLENAMEWITHSCHEMA;

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('treezor_documents',  'treezor_companies',  'treezor_beneficial_owners',  'treezor_accounts',  'treezor_payouts',  'treezor_payins',  'treezor_payin_refunds') ORDER BY TABLENAMEWITHSCHEMA ASC;

SELECT ROUND(300000000000/7000000000, 2);

--DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('expense_fuel_volume_guesses');

-- DROP TABLE MY_DATABASE.PUBLIC.kyc_typeform_forms_old;

CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.treezor_beneficial_owners (
	beneficial_owner_id varchar NOT NULL,
	"json" variant NOT NULL DEFAULT '{}'::variant,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	deleted_at timestamp NULL,
	treezor_id varchar NULL,
	id varchar NOT NULL,
	treezor_company_id varchar NOT NULL,
	PRIMARY KEY (id)
);

-- NUMBER(38,0)

-- DROP TABLE MY_DATABASE.PUBLIC.treezor_beneficial_owners;

CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.treezor_accounts (
	treezor_beneficiary_id varchar NULL,
	account_id varchar NOT NULL,
	"json" varchar NULL,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	whitelisted_ibans varchar NULL,
	deleted_at timestamp NULL,
	balance varchar NULL,
	treezor_id varchar NULL,
	id varchar NOT NULL,
	PRIMARY KEY (id)
);
--DROP TABLE MY_DATABASE.PUBLIC.TREEZOR_BENEFICIAL_OWNERS;

CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.treezor_beneficial_owners (
	beneficial_owner_id varchar NULL,
	json varchar NULL,
	created_at timestamp NULL,
	updated_at timestamp NULL,
	deleted_at timestamp NULL,
	treezor_id varchar NULL,
	id varchar NULL,
	treezor_company_id varchar NULL,
    PRIMARY KEY (id)
);

SELECT * FROM MY_DATABASE.PUBLIC.treezor_beneficial_owners;


SELECT * FROM MY_DATABASE.PUBLIC.TREEZOR_ACCOUNTS;

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('treezor_accounts', 'treezor_beneficial_owners');

-- ALTER TABLE MY_DATABASE.PUBLIC.loyaltek_calls RENAME TO MY_DATABASE.PUBLIC.treezor_logs_OLD;


CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.loyaltek_calls (
	id int NOT NULL,
	"method" varchar NULL,
	senderable_type varchar NULL,
	senderable_id varchar NULL,
	message variant NOT NULL DEFAULT '{}'::variant,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	response variant NOT NULL DEFAULT '{}'::variant,
	card_id varchar NULL,
	PRIMARY KEY (id)
);

DROP TABLE MY_DATABASE.PUBLIC.treezor_companies;

CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.treezor_companies (
	company_id varchar NOT NULL,
	"json" variant NOT NULL DEFAULT '{}'::variant,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	business_informations variant NOT NULL DEFAULT '{}'::variant,
	kyc_accepted_at timestamp NULL,
	treezor_id varchar NULL,
    id varchar NOT NULL,
	PRIMARY KEY (id)
);
SELECT * FROM MY_DATABASE.PUBLIC.treezor_logs;

CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.treezor_logs (
	treezor_id integer,
	webhook varchar NOT NULL,
	"object" varchar NOT NULL,
	object_id varchar NOT NULL,
	object_payload varchar NOT NULL,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	id varchar NOT NULL,
	webhook_created_at varchar NULL,
	PRIMARY KEY (id)
);


TRUNCATE TABLE MY_DATABASE.PUBLIC.Job_Execution_Time;

SELECT jet.*, DATEDIFF(second, START_AT, END_AT) AS EXECUTION_TIME, ROUND(DATEDIFF(second, START_AT, END_AT)/60, 2) AS EXECUTION_TIME_minutes FROM  MY_DATABASE.PUBLIC.Job_Execution_Time AS jet WHERE TABLE_MIGRATED <> '-1' ORDER BY START_AT ASC;


CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Actual_Job_Execution_Time AS
SELECT jet.*, DATEDIFF(second, START_AT, END_AT) AS EXECUTION_TIME, ROUND(DATEDIFF(second, START_AT, END_AT)/60, 2) AS EXECUTION_TIME_minutes FROM  MY_DATABASE.PUBLIC.Job_Execution_Time AS jet WHERE TABLE_MIGRATED <> '-1' ORDER BY EXECUTION_TIME DESC;

SELECT ROUND(SUM(EXECUTION_TIME)/60, 2) AS Total_Migration_Time FROM MY_DATABASE.PUBLIC.Actual_Job_Execution_Time;

SELECT ROUND(SUM(EXECUTION_TIME_MINUTES)/60, 2) FROM MY_DATABASE.PUBLIC.Actual_Job_Execution_Time;

SELECT * FROM MY_DATABASE.PUBLIC.Actual_Job_Execution_Time ORDER BY EXECUTION_TIME_MINUTES DESC;

SELECT * FROM  MY_DATABASE.PUBLIC.Job_Execution_Time AS jet WHERE TABLE_MIGRATED <> '-1' ORDER BY START_AT ASC;

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES ORDER BY TABLENAMEWITHSCHEMA ASC;


SELECT TABLENAMEWITHSCHEMA, TABLE_MIGRATED FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES LEFT JOIN MY_DATABASE.PUBLIC.Job_Execution_Time ON LOWER(TABLENAMEWITHSCHEMA) = LOWER(TABLE_MIGRATED) ORDER BY TABLENAMEWITHSCHEMA ASC;

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE LOWER(TABLENAMEWITHSCHEMA) > 'loyaltek_calls' ORDER BY TABLENAMEWITHSCHEMA;

SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE' order by table_name asc;


TRUNCATE TABLE MY_DATABASE.PUBLIC.CARD_ORDERS;



SELECT * FROM MY_DATABASE.KPI.KPI WHERE PERIOD = 'Weekly' ORDER BY START_AT DESC LIMIT 100;

DELETE FROM MY_DATABASE.KPI.KPI WHERE PERIOD = 'Weekly' AND start_at = TO_DATE('2022-03-28') AND END_AT =  TO_DATE('2022-04-03');




SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE LOWER(TABLENAMEWITHSCHEMA) >= 'inbound_emails' ORDER BY TABLENAMEWITHSCHEMA ASC;
SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES ORDER BY TABLENAMEWITHSCHEMA ASC;


ALTER TABLE MY_DATABASE.PUBLIC.CARD_INSURANCES ADD subscription_number int;

SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE'  AND table_name in ('plans', 'card_insurances') order by table_name asc;


SELECT * FROM MY_DATABASE.PUBLIC.PLANS;

-- ('plans', 'card_insurances') 

--INSERT INTO MY_DATABASE.PUBLIC.PUBLIC_TABLES  (TABLENAMEWITHSCHEMA) VALUES  ('treezor_accounts');

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('virtual_card_requests')  ORDER BY TABLENAMEWITHSCHEMA DESC;

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES ORDER BY TABLENAMEWITHSCHEMA ASC;


ALTER TABLE MY_DATABASE.PUBLIC.EXPENSE_FUEL_VOLUME_GUESSES RENAME TO EXPENSE_FUEL_VOLUME_GUESSES_five_cols_old;


SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES ORDER BY TABLENAMEWITHSCHEMA ASC;

SELECT * FROM MY_DATABASE.PUBLIC.treezor_companies ORDER BY CREATED_AT DESC;
 
SELECT MAX(LEFT(CREATED_AT, 19)) AS CREATED_AT FROM MY_DATABASE.PUBLIC.treezor_companies;


SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA >= 'expense_fuel_volume_guesses' ORDER BY TABLENAMEWITHSCHEMA ASC;

SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run ORDER BY TABLE_NAME ASC;
CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.expense_fuel_volume_guesses (
	id VARCHAR NOT NULL,
	expense_id VARCHAR NOT NULL,
	volume numeric NOT NULL,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	PRIMARY KEY (id)
);

--DROP TABLE MY_DATABASE.PUBLIC.treezor_accounts;
CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.treezor_accounts (
	treezor_beneficiary_id varchar NULL,
	account_id varchar  NULL,
	"json" varchar NULL,
	created_at timestamp  NULL,
	updated_at timestamp  NULL,
	whitelisted_ibans varchar NULL,
	deleted_at timestamp NULL,
	balance varchar NULL,
	treezor_id varchar NULL,
	id varchar  NULL,
	PRIMARY KEY (id)
);

SELECT * FROM MY_DATABASE.PUBLIC.treezor_accounts order by created_at asc;

select  current_date - 4;

DELETE SELECT * FROM DROP TABLE MY_DATABASE.PUBLIC.A_SOME_TEST_TABLE_TIME_REDUCE WHERE CREATED_AT >= '2022-04-11';

SELECT * FROM MY_DATABASE.PUBLIC.ACCOUNTING_LINES;

DELETE  FROM MY_DATABASE.PUBLIC.ACCOUNTING_LINES WHERE ID = 7323638;

ALTER TABLE MY_DATABASE.PUBLIC.ACCOUNTING_LINES_old RENAME TO ACCOUNTING_LINES;

-- 7323638   7316588    7318950


SELECT MAX(CREATED_AT) FROM account_direct_debits;


SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE LOWER(TABLENAMEWITHSCHEMA) IN ('virtual_card_requests') ORDER BY TABLE_NAME ASC;

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES ORDER BY TABLENAMEWITHSCHEMA;


--> TREEZOR_BENEFICIAL_OWNERS 4,023

CREATE OR REPLACE VIEW AVG_Treezor_Beneficiary AS
SELECT COUNT(*) AS Cnt FROM MY_DATABASE.PUBLIC.treezor_beneficial_owners GROUP BY TREEZOR_COMPANY_ID;

SELECT AVG(cnt) FROM MY_DATABASE.PUBLIC.AVG_Treezor_Beneficiary;

SELECT TREEZOR_COMPANY_ID, COUNT(TREEZOR_COMPANY_ID) FROM MY_DATABASE.PUBLIC.treezor_beneficial_owners GROUP BY TREEZOR_COMPANY_ID;

SELECT DISTINCT TREEZOR_COMPANY_ID FROM MY_DATABASE.PUBLIC.treezor_beneficial_owners;



SELECT * FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS WHERE TO_DATE(AT) = TO_DATE(current_date) - 1 AND TRANSACTION_TYPE IN ('16', '14', '5') ORDER BY TRANSACTION_TYPE DESC LIMIT 200;

SELECT * FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES_CALCULATED WHERE ID = '18848653' EXPENSE_AMOUNT = -13.75 AND EXPENSE_MONTH = '2022-05-01' '18918056' AND EXPENSE_AMOUNT <> 0 LIMIT 200;


SELECT * FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES_CALCULATED WHERE ID = '18848653';

-- MASTERCARD_INTERCHANGES_CALCULATED
-- ID  EXPENSE_MONTH   EXPENSE_AMOUNT  EXPENSE_TYPE    AMOUNT_COST AMOUNT_BASE AMOUNT_EXCHANGE    AMOUNT_FEES

-- id, expense_month, expense_amount, expense_type, amount_cost, amount_base, amount_exchange, amount_fees

-- "INSERT INTO  MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES_CALCULATED (ID, EXPENSE_MONTH, EXPENSE_AMOUNT, EXPENSE_TYPE, AMOUNT_COST, AMOUNT_BASE, AMOUNT_EXCHANGE, AMOUNT_FEES) VALUES ('{trans_id}', '{exp_month}', '{exp_amount}', '{exp_type}', '{amt_cost}', '{amt_base}', '{amt_exchange}', '{amt_fees}');".format(trans_id = id, exp_month = expense_month, exp_amount = expense_amount, exp_type = expense_type,  amt_cost = amount_cost, amt_base = amount_base, amt_exchange = amount_exchange, amt_fees = amount_fees)

SELECT DATE_TRUNC(MONTH, current_date);

-- ID, EXPENSE_MONTH, TRANSACTION_TYPE, TRANSACTION_STATUS, DATA, SEQUENCE
-- 126,237 all transaction for the month
-- 64,350 rows All interchange for the month

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Data_for_interchange AS
SELECT 
    mc_trans.ID, LEFT(DATE_TRUNC(MONTH, mc_trans.AT), 10) AS expense_month, mc_trans.TRANSACTION_TYPE, mc_trans.TRANSACTION_STATUS, mc_trans.DATA, mc_trans.SEQUENCE 
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mc_trans 
WHERE 
    mc_trans.TRANSACTION_TYPE IN (16, 14, 5, 1)
    AND mc_trans.TRANSACTION_STATUS IN (19, 9, 1)
    AND expense_month = DATE_TRUNC(MONTH, TO_DATE(current_date))
    AND mc_trans.ID NOT IN (SELECT ID FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES WHERE EXPENSE_MONTH = DATE_TRUNC(MONTH, TO_DATE(current_date)))
ORDER BY mc_trans.ID ASC;
    
    
SELECT * FROM MY_DATABASE.PUBLIC.Data_for_interchange;    

SELECT * FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES_CALCULATED WHERE EXPENSE_MONTH = '2022-05-01';
    

SELECT * FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS WHERE  ID NOT IN (SELECT ID FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES WHERE EXPENSE_MONTH = DATE_TRUNC(MONTH, TO_DATE(current_date)));


SELECT DISTINCT WEBHOOK FROM MY_DATABASE.PUBLIC.TREEZOR_LOGS;


ALTER TABLE MY_DATABASE.PUBLIC.TREEZOR_ACCOUNTS RENAME TO TREEZOR_ACCOUNTS_OLD;



SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE LOWER(TABLENAMEWITHSCHEMA) NOT IN ('receipt_ocrs') ORDER BY TABLE_NAME ASC;

SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE LOWER(TABLENAMEWITHSCHEMA) IN ('disbursement_invoices') ORDER BY TABLE_NAME ASC;

TRUNCATE TABLE MY_DATABASE.PUBLIC.JOHN_PAUL_SENT;

SELECT * FROM MY_DATABASE.PUBLIC.JOHN_PAUL_SENT;


SELECT * FROM MY_DATABASE.PUBLIC.Data_for_interchange;
SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE' AND table_name NOT IN ('treezor_accounts') order by table_name asc;

SELECT LEFT(DATE_TRUNC(MONTH, mc_trans.AT), 10) AS expense_month, mc_trans.* FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mc_trans WHERE TO_DATE(AT) = TO_DATE(current_date) - 1 AND TRANSACTION_TYPE IN ('1') ORDER BY AT DESC LIMIT 200;

SELECT COUNT(*) AS NUM_ROWS FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES_CALCULATED;

DROP TABLE  MY_DATABASE.PUBLIC.VIRTUAL_CARD_REQUESTS;


-- DELETE FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES WHERE TABS IN ('virtual_card_requests');

SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES WHERE TABS IN ('virtual_card_requests');

--DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('virtual_card_requests');

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('virtual_card_requests');


SELECT * FROM MY_DATABASE.PUBLIC.DRIVER_CODES;

SELECT * FROM MY_DATABASE.PUBLIC.BILLING_INVOICES WHERE CHORUS_DATA <> '{}';

SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS;
SELECT * FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS WHERE AT = '2022-05-19 19:41:16.713';

ALTER TABLE MY_DATABASE.PUBLIC.COMMENTS RENAME TO COMMENTS_OLD_1;


CREATE TABLE MY_DATABASE.public.sso_configs (
	id varchar NOT NULL,
	company_id integer NULL,
	enforce_2fa boolean NOT NULL DEFAULT false,
	allow_changing_phone_number boolean NOT NULL DEFAULT true,
	allow_changing_emails boolean NOT NULL DEFAULT true,
	allow_local_accounts boolean NOT NULL DEFAULT true,
	allow_adding_domains boolean NOT NULL DEFAULT false,
	token varchar NULL,
	metadata_url varchar NULL,
	certificate text NULL,
	entity_id varchar NULL,
	login_url varchar NULL,
	logout_url varchar NULL,
	enable_provisioning boolean NOT NULL DEFAULT false,
	scim_token varchar NULL,
	deactivate_on_sync boolean NOT NULL DEFAULT false,
	delete_on_sync boolean NOT NULL DEFAULT false,
	enable_sso boolean NOT NULL DEFAULT false,
	PRIMARY KEY (id)
);


CREATE TABLE MY_DATABASE.public.sso_email_domains (
	id varchar NOT NULL,
	sso_configs_id integer NULL,
	host varchar NULL,
	PRIMARY KEY (id)
);


CREATE TABLE MY_DATABASE.public.sso_login_domains (
	id varchar NOT NULL,
	sso_configs_id integer NULL,
	host varchar NULL,
	PRIMARY KEY (id)
);


SELECT ID, COUNT(ID) Num_ID FROM MY_DATABASE.PUBLIC.VEHICLES_OLD GROUP BY ID ORDER BY Num_ID DESC;

SELECT COUNT(DISTINCT ID) Num_ID FROM MY_DATABASE.PUBLIC.VEHICLES_OLD;

SELECT DISTINCT vcol.* FROM MY_DATABASE.PUBLIC.VEHICLES_OLD vcol;


SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE LOWER(TABLENAMEWITHSCHEMA) NOT IN ('receipt_ocrs', 'expense_reports') ORDER BY TABLE_NAME ASC;

SELECT LOWER(pub_tab.TABLENAMEWITHSCHEMA) AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES pub_tab WHERE pub_tab.TABLENAMEWITHSCHEMA NOT IN (SELECT TABLE_NAME FROM MY_DATABASE.PUBLIC.Tables_To_Run) ORDER BY pub_tab.TABLENAMEWITHSCHEMA ASC;

SELECT COUNT(*) FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES_CALCULATED;

SELECT 8426788 - 8426636;

Select * from SAS_APPS.MISCELLENEOUS_SAS.TEST_KILLBILL;

SELECT * FROM MY_DATABASE.PUBLIC_CONTRACT.PUBLIC_BALANCE WHERE ACCOUNT_ID = '3603c189-ac10-4894-b77d-0710b920aa6e';


SELECT * FROM PUBLIC_CONTRACT.PUBLIC_BALANCE LIMIT 3;


-- DROP TABLE MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES_CALCULATED;


/*
create or replace view MY_DATABASE.PUBLIC.DATA_FOR_INTERCHANGE(
	ID,
	EXPENSE_MONTH,
	TRANSACTION_TYPE,
	TRANSACTION_STATUS,
	DATA,
	SEQUENCE
) as
*/
SELECT 
    mc_trans.ID, LEFT(DATE_TRUNC(MONTH, mc_trans.AT), 10) AS expense_month, mc_trans.TRANSACTION_TYPE, mc_trans.TRANSACTION_STATUS, mc_trans.DATA, mc_trans.SEQUENCE 
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mc_trans 
WHERE 
    mc_trans.TRANSACTION_TYPE IN (16, 14, 5, 1)
    AND mc_trans.TRANSACTION_STATUS IN (19, 9, 1)
    AND expense_month = DATE_TRUNC(MONTH, TO_DATE(current_date))
    AND mc_trans.ID NOT IN (SELECT ID FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES_CALCULATED WHERE EXPENSE_MONTH = DATE_TRUNC(MONTH, TO_DATE(current_date)))
ORDER BY mc_trans.ID ASC;

SELECT ID FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES WHERE ID = 19873926;

SELECT * FROM MY_DATABASE.PUBLIC.DATA_FOR_INTERCHANGE;


SELECT MAX(CREATED_AT) AS Max_Date FROM MY_DATABASE.public.merchant_server_transactions;



TRUNCATE TABLE MY_DATABASE.PUBLIC.ACCOUNT_MOVEMENTS;




SELECT * FROM "MY_DATABASE"."PUBLIC"."COMPANIES" WHERE NAME = 'Uber' ORDER BY CREATED_AT DESC;


-- card_order_frequency

SELECT PERIOD,Num_Order AS NUM_CARDS_PER_ORDER, COUNT(ID) AS FREQUENCY FROM(
SELECT  
LEFT(DATE_TRUNC(MONTH, CREATED_AT), 10) AS PERIOD, ID, (MOONCARDS_COUNT + MOONCARDSX_COUNT + MOONCARDS_FLEET_COUNT) AS Num_Order
FROM MY_DATABASE.PUBLIC.CARD_ORDERS
WHERE CREATED_AT BETWEEN '2022-04-01' AND '2022-06-30'  
)
GROUP BY PERIOD,Num_Order
ORDER BY FREQUENCY DESC;


SELECT CARD_ORDER_ID FROM MY_DATABASE.PUBLIC.CARDS WHERE CREATED_AT BETWEEN '2022-04-01' AND '2022-06-30'; -- 12,668 rows

SELECT DISTINCT CARD_ORDER_ID FROM MY_DATABASE.PUBLIC.CARDS WHERE CREATED_AT BETWEEN '2022-04-01' AND '2022-06-30';

SELECT ID FROM MY_DATABASE.PUBLIC.CARD_ORDERS WHERE CREATED_AT BETWEEN '2022-04-01' AND '2022-06-30'; -- 4,470 rows

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.CARD_ORDERS_Counting AS 
SELECT 
    crd_ord.ID, crd_ord.STATUS, lic.TYPE 
FROM 
    MY_DATABASE.PUBLIC.CARD_ORDERS crd_ord
INNER JOIN MY_DATABASE.PUBLIC.CARDS crd 
ON 
    crd_ord.ID = crd.CARD_ORDER_ID
INNER JOIN MY_DATABASE.PUBLIC.LICENSES lic 
ON 
    crd.LICENSE_ID = lic.ID    
WHERE 
    crd_ord.CREATED_AT BETWEEN '2022-04-01' AND '2022-06-30'
    AND crd_ord.STATUS = 2;
    
SELECT * FROM MY_DATABASE.PUBLIC.CARD_ORDERS_Counting; 

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.CARD_ORDERS_Counting_corp AS 
SELECT ID, TYPE FROM MY_DATABASE.PUBLIC.CARD_ORDERS_Counting WHERE TYPE = 0;  

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.CARD_ORDERS_Counting_mobi AS 
SELECT ID, TYPE FROM MY_DATABASE.PUBLIC.CARD_ORDERS_Counting WHERE TYPE = 2;

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.CARD_ORDERS_Counting_mobility_and_Corporate AS 
SELECT corp.* FROM MY_DATABASE.PUBLIC.CARD_ORDERS_Counting_corp corp
INNER JOIN MY_DATABASE.PUBLIC.CARD_ORDERS_Counting_mobi mobi
ON corp.ID = mobi.ID;
    
SELECT COUNT(DISTINCT ID) FROM MY_DATABASE.PUBLIC.CARD_ORDERS_Counting_mobility_and_Corporate;
SELECT COUNT(DISTINCT ID) FROM MY_DATABASE.PUBLIC.CARD_ORDERS_Counting;

SELECT ROUND((75/2652) * 100, 2);


SELECT ROUND(((SELECT COUNT(DISTINCT ID) FROM MY_DATABASE.PUBLIC.CARD_ORDERS_Counting_mobility_and_Corporate) / (SELECT COUNT(DISTINCT ID) FROM MY_DATABASE.PUBLIC.CARD_ORDERS_Counting)) * 100, 2) AS Per_Mobi_Corp;
    
SELECT (COUNT(DISTINCT ID) FROM MY_DATABASE.PUBLIC.CARD_ORDERS_Counting_mobility_and_Corporate) / (SELECT COUNT(DISTINCT ID) FROM MY_DATABASE.PUBLIC.CARD_ORDERS_Counting);    
    
SELECT COUNT(DISTINCT ID) FROM MY_DATABASE.PUBLIC.CARD_ORDERS_Counting;    
    
SELECT ID, STATUS FROm MY_DATABASE.PUBLIC.CARD_ORDERS 
WHERE CREATED_AT BETWEEN '2022-04-01' AND '2022-06-30'
AND STATUS = 2
AND ID IN (SELECT CARD_ORDER_ID FROM MY_DATABASE.PUBLIC.CARDS);    
-- MY_DATABASE.PUBLIC.CARDS;    


SELECT COMPANY_ID, COUNT(COMPANY_ID) AS Num_Comp FROM MY_DATABASE.PUBLIC.ANALYTICAL_AXES GROUP BY COMPANY_ID ORDER BY Num_Comp;

-- f4a6b586-532c-427d-a785-7c61c375f71b


SELECT COMPANY_ID, CODE FROM MY_DATABASE.PUBLIC.ANALYTICAL_AXES WHERE COMPANY_ID = 'f4a6b586-532c-427d-a785-7c61c375f71b';

SELECT * FROM MY_DATABASE.PUBLIC.ANALYTICAL_AXES;


SELECT * FROM MY_DATABASE.PUBLIC.EXPENSE_ANALYTICAL_AXES exp_a_ax
INNER JOIN 
MY_DATABASE.PUBLIC.EXPENSE_ANALYTIC_CODES 
ON 
exp_a_ax.EXPENSE_ID = .EXPENSE_ID;


SELECT 
    crd_ord.ID, crd_ord.STATUS, crd_ord.TYPE AS Order_Type, lic.TYPE AS License_TYPE 
FROM 
    MY_DATABASE.PUBLIC.CARD_ORDERS crd_ord
INNER JOIN MY_DATABASE.PUBLIC.CARDS crd 
ON 
    crd_ord.ID = crd.CARD_ORDER_ID
INNER JOIN MY_DATABASE.PUBLIC.LICENSES lic 
ON 
    crd.LICENSE_ID = lic.ID    
WHERE 
    crd_ord.CREATED_AT BETWEEN '2022-04-01' AND '2022-06-30'
    AND crd_ord.TYPE IN (0, 1)
    AND lic.TYPE = 3
    AND crd_ord.STATUS = 2;

SELECT DISTINCT TYPE FROM MY_DATABASE.PUBLIC.LICENSES;

SELECT DISTINCT CATEGORY FROM MY_DATABASE.PUBLIC.PLANS;

SELECT * FROM MY_DATABASE.PUBLIC.PLANS WHERE USER_PROFILE_ID = 'e9e7f10c-3c97-444e-88eb-e7acaa564660';

SELECT USER_PROFILE_ID, COUNT(USER_PROFILE_ID) AS Num_Prof FROM MY_DATABASE.PUBLIC.PLANS WHERE ENDED_AT IS NULL GROUP BY USER_PROFILE_ID  ORDER BY Num_Prof DESC;

SELECT CURRENCY, COUNT(CURRENCY) Num_Exp, ROUND((Num_Exp/(SELECT COUNT(ID) FROM MY_DATABASE.PUBLIC.EXPENSES))* 100, 2) AS Per FROM MY_DATABASE.PUBLIC.EXPENSES GROUP BY CURRENCY ORDER BY Num_Exp DESC;


SELECT LEFT(DATE_TRUNC(MONTH,crd.CREATED_AT), 10), crd.USER_PROFILE_ID FROM MY_DATABASE.PUBLIC.CARDS crd WHERE NAME IS NOT NULL AND USER_PROFILE_ID IS NOT NULL;

SELECT USER_PROFILE_ID, COUNT(ID) AS Num_Prof_card FROM MY_DATABASE.PUBLIC.CARDS GROUP BY USER_PROFILE_ID ORDER BY Num_Prof_card DESC;

SELECT USER_PROFILE_ID, COUNT(USER_PROFILE_ID) AS Num_Prof FROM (
SELECT * FROM MY_DATABASE.PUBLIC.PLANS WHERE CATEGORY = 1 AND ENDED_AT IS NOT NULL
  ) GROUP BY USER_PROFILE_ID ORDER BY Num_Prof DESC;



SELECT PERIOD, COUNT(ID) AS NUM_CARDS_SOLD FROM (
SELECT 
    LEFT(DATE_TRUNC(MONTH,crd.BRANDED_AT), 10) AS PERIOD, crd.USER_PROFILE_ID, crd.ID 
FROM 
    MY_DATABASE.PUBLIC.CARDS crd 
INNER JOIN
     MY_DATABASE.PUBLIC.PLANS pln
ON
    crd.USER_PROFILE_ID  = pln.USER_PROFILE_ID
WHERE 
    NAME IS NOT NULL 
    AND crd.USER_PROFILE_ID IS NOT NULL
    AND pln.CATEGORY = 1 
    AND pln.ENDED_AT IS NULL
)
GROUP BY PERIOD
ORDER BY PERIOD DESC;


SELECT 
    exp_ax.EXPENSE_ID 
FROM 
    MY_DATABASE.PUBLIC.EXPENSE_ANALYTICAL_AXES exp_ax
INNER JOIN 
    MY_DATABASE.PUBLIC.EXPENSE_ANALYTIC_CODES exp_ac
ON
    exp_ax.EXPENSE_ID = exp_ac.EXPENSE_ID;


SELECT SOURCE_TYPE, COUNT(SOURCE_TYPE) AS Num_Exp FROM MY_DATABASE.PUBLIC.EXPENSES GROUP BY SOURCE_TYPE ORDER BY Num_Exp DESC;


SELECT CREATED_AT, COUNTRY, COUNT(DISTINCT USER_ID) AS Number_Card_Holders FROM(
SELECT     
    CASE WHEN addr.COUNTRY = 'NL' THEN 'NLD'
         WHEN addr.COUNTRY = 'FR' THEN 'FRA'                           
         WHEN addr.COUNTRY = 'IT' THEN 'ITA'
         WHEN addr.COUNTRY = 'ES' THEN 'ESP'
         WHEN addr.COUNTRY = 'DE' THEN 'DEU'         
         ELSE 'Others'    
         END AS COUNTRY,
         prf.COMPANY_ID, prf.ID AS USER_PROFILE_ID, prf.USER_ID, LEFT(prf.CREATED_AT , 4) AS CREATED_AT
FROM 
    MY_DATABASE.PUBLIC.USER_PROFILES prf
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    prf.COMPANY_ID = addr.ADDRESSABLE_ID
INNER JOIN
   MY_DATABASE.PUBLIC.CARDS crd
ON
    prf.ID = crd.USER_PROFILE_ID
)
GROUP BY COUNTRY, CREATED_AT
ORDER BY CREATED_AT, COUNTRY DESC;

SELECT CREATED, COUNTRY, COUNT(COMPANY_ID) AS NUM_CARDS FROM (
SELECT  
    LEFT(crd.CREATED_AT, 4) AS CREATED,
    CASE WHEN addr.COUNTRY = 'NL' THEN 'NLD'
         WHEN addr.COUNTRY = 'FR' THEN 'FRA'                           
         WHEN addr.COUNTRY = 'IT' THEN 'ITA'
         WHEN addr.COUNTRY = 'ES' THEN 'ESP'
         WHEN addr.COUNTRY = 'DE' THEN 'DEU'         
         ELSE 'Others'    
         END AS COUNTRY,
        crd.COMPANY_ID
FROM 
    MY_DATABASE.PUBLIC.CARDS crd
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    crd.COMPANY_ID = addr.ADDRESSABLE_ID
WHERE CREATED IS NOT NULL)
GROUP BY COUNTRY, CREATED
ORDER BY CREATED, COUNTRY ASC;


SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES;

ALTER TABLE MY_DATABASE.PUBLIC.VEHICLES RENAME TO VEHICLES_OLD;

SELECT * FROM MY_DATABASE.PUBLIC.VEHICLES;

SELECT * FROM MY_DATABASE.PUBLIC.VEHICLES WHERE CREATED_AT >= '2022-07-19';

CREATE TABLE MY_DATABASE.public.vehicles (
	id varchar NOT NULL,
	user_profile_id varchar NULL,
	engine_rating varchar NULL,
	initial_distance float NULL,
	deleted_at timestamp NULL,
	category float NULL,
	license_plate varchar NOT NULL,
	manufacturer varchar NULL,
	model varchar NULL,
	"name" varchar NOT NULL,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	ownership float NOT NULL,
	company_id varchar NULL,
	fuel_code float NULL,
	vehicle_code1 varchar NULL,
	vehicle_code2 varchar NULL,
	vehicle_code3 varchar NULL,
	qr_code_version float NOT NULL DEFAULT 1,
	department_id varchar NULL,
	PRIMARY KEY (id)
);

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES ORDER BY TABLENAMEWITHSCHEMA ASC;
SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('receipt_ocrs') ORDER BY TABLE_NAME ASC;

SELECT MAX(CREATED_AT) FROM  MY_DATABASE.PUBLIC.expense_reports;

SELECT * FROM MY_DATABASE.PUBLIC.ALL_PUB_TABLES;
SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES; 
DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('receipt_ocrs');


SELECT 
    LOWER(pub_tab.TABLENAMEWITHSCHEMA) AS TABLENAMEWITHSCHEMA 
FROM 
    MY_DATABASE.PUBLIC.PUBLIC_TABLES pub_tab 
WHERE pub_tab.TABLENAMEWITHSCHEMA NOT IN (SELECT TABLE_NAME FROM MY_DATABASE.PUBLIC.Tables_To_Run) AND pub_tab.TABLENAMEWITHSCHEMA NOT IN ('aaplop')
ORDER BY pub_tab.TABLENAMEWITHSCHEMA ASC;


SELECT CYCLE, COUNT(CYCLE) AS CYCLE_Distribution FROM (
SELECT 
    comp.ID, PARSE_JSON(comp.FLAGS):mvc_created_at::date AS mvc_created_at, PARSE_JSON(comp.FLAGS):billing_start_at::date AS billing_start_at, bi.CYCLE, acc.MASTER_ACCOUNT_ID, comp.FLAGS 
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp 
INNER JOIN
    MY_DATABASE.PUBLIC.BILLING_INVOICES bi
ON
    comp.ID = bi.COMPANY_ID
INNER JOIN
    MY_DATABASE.PUBLIC.ACCOUNTS acc
ON
  acc.COMPANY_ID = comp.ID
WHERE mvc_created_at BETWEEN '2022-07-01' AND '2022-07-31' AND bi.CYCLE = 1
)

GROUP BY CYCLE 
ORDER BY CYCLE_Distribution DESC;


SELECT DISTINCT COMPANY_ID AS Distinc_Company_ID FROM (
  
SELECT 
    comp.ID AS COMPANY_ID, addr.COUNTRY, PARSE_JSON(comp.FLAGS):mvc_created_at::date AS mvc_created_at, PARSE_JSON(comp.FLAGS):billing_start_at::date AS billing_start_at, bi.CYCLE, acc.MASTER_ACCOUNT_ID, acc_mvnt.TRANSACTION_TYPE, acc_mvnt.TRANSACTION_STATUS, comp.FLAGS 
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp 
INNER JOIN
    MY_DATABASE.PUBLIC.BILLING_INVOICES bi
ON
    comp.ID = bi.COMPANY_ID
INNER JOIN
    MY_DATABASE.PUBLIC.ACCOUNTS acc
ON
  acc.COMPANY_ID = comp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.ACCOUNT_MOVEMENTS acc_mvnt
ON
  acc.ID = acc_mvnt.ACCOUNT_ID    
INNER JOIN 
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON 
    comp.ID = addr.ADDRESSABLE_ID

WHERE (mvc_created_at BETWEEN '2022-07-01' AND '2022-07-31' 
       OR billing_start_at BETWEEN '2022-07-01' AND '2022-07-31' )
       AND bi.CYCLE = 1 
       AND acc.MASTER_ACCOUNT_ID IS NULL
       AND acc_mvnt.TRANSACTION_TYPE = 'L'
       AND acc_mvnt.TRANSACTION_STATUS = 'S'
       AND addr.ADDRESSABLE_TYPE = 'Company'
       AND addr.COUNTRY NOT IN ('FRA', 'FR') 
  
)

;



SELECT 
    comp.ID, PARSE_JSON(comp.FLAGS):mvc_created_at::date AS mvc_created_at, PARSE_JSON(comp.FLAGS):billing_start_at::date AS billing_start_at
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp 

WHERE mvc_created_at BETWEEN '2022-07-01' AND '2022-07-31' OR billing_start_at BETWEEN '2022-07-01' AND '2022-07-31' ;


-- billing_invoices

ALTER TABLE MY_DATABASE.PUBLIC.ADDRESSES_OLD RENAME TO ADDRESSES;



SELECT * FROM MY_DATABASE.PUBLIC.ADDRESSES WHERE ADDRESSABLE_TYPE = 'User';

SELECT * FROM MY_DATABASE.PUBLIC.ADDRESSES;

SELECT * FROM MY_DATABASE.PUBLIC.ADDRESSES order by created_at desc limit 10;



CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Carbon_Footprint_Ecolytic_Data AS
SELECT 
    exp.ID, exp.CREATED_AT, exp.CURRENCY, exp.AMOUNT, mcrd_mch.MERCHANT_CATEGORY_CODE
FROM 
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID
WHERE CURRENCY = 'EUR'
ORDER BY CREATED_AT DESC
LIMIT 3
;

SELECT * FROM MY_DATABASE.PUBLIC.Carbon_Footprint_Ecolytic_Data;


CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.john_paul_calls (
	id varchar NOT NULL,
	status int NOT NULL,
	frequency int NOT NULL,
	period date NOT NULL,
	sent_at timestamp NULL,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	PRIMARY KEY (id)
);

SELECT * FROM MY_DATABASE.PUBLIC.john_paul_calls;


CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.john_paul_call_plans (
	id int NOT NULL,
	john_paul_call_id varchar NOT NULL,
	plan_id varchar NOT NULL,
	created_at timestamp(6) NOT NULL,
	updated_at timestamp(6) NOT NULL,
	PRIMARY KEY (id)
);


CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.sso_users (
	id varchar NOT NULL,
	email varchar NULL,
	firstname varchar NULL,
	lastname varchar NULL,
	phone varchar NULL,
	identity_provider_id varchar NULL,
	user_profile_id varchar NULL,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	PRIMARY KEY (id)
);

SELECT * FROM MY_DATABASE.PUBLIC.john_paul_call_plans;



select expense_id, re.created_at from "MY_DATABASE"."PUBLIC"."RECEIPT_OCRS" ocr 
left join "MY_DATABASE"."PUBLIC"."RECEIPTS" re on ocr.receipt_id = re.id
left join "MY_DATABASE"."PUBLIC"."EXPENSES" exp on exp.id = re.expense_id
where exp.id is null and expense_id is not null;


SELECT * FROM MY_DATABASE.PUBLIC.EXPENSES exp WHERE ID = '0d2dcbaf-4103-475e-ad95-41cf69744362';

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES;

-- DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA = 'user_profiles';

-- INSERT INTO MY_DATABASE.PUBLIC.PUBLIC_TABLES (TABLENAMEWITHSCHEMA) VALUES ('user_profiles');


SELECT * FROM MY_DATABASE.PUBLIC.JOB_EXECUTION_TIME;


SELECT MAX(created_at) Max_created_at FROM MY_DATABASE.PUBLIC.EXPENSES;
-- 2022-08-29 11:03:51.309
-- 2022-08-29 11:36:40.000


SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('john_paul_call_plans', 'sso_config', 'john_paul_calls', 'sso_users') ORDER BY TABLE_NAME ASC;


SELECT * FROM MY_DATABASE.PUBLIC.INBOUND_EMAILS ORDER BY CREATED_AT DESC LIMIT 100;

SELECT 
    LEFT(DATE_TRUNC(MONTH, mc_trans.AT), 10) AS expense_month, mc_trans.* 
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mc_trans 
WHERE 
    TO_DATE(AT) = TO_DATE(current_date) - 1 AND TRANSACTION_TYPE IN ('1') ORDER BY AT DESC LIMIT 200;

SELECT * FROM MY_DATABASE.PUBLIC.Data_for_interchange; 

SELECT MAX(created_at) Max_created_at FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS; -- 2022-08-30 15:02:06.147

SELECT MAX(created_at) Max_created_at FROM MY_DATABASE.PUBLIC.COMPANIES; -- 2022-08-30 14:53:38.737

SELECT MAX(created_at) Max_created_at FROM MY_DATABASE.PUBLIC.CARD_ORDERS; -- 2022-08-30 14:53:38.746

SELECT * FROM MY_DATABASE.PUBLIC.COMPANIES ORDER BY created_at DESC LIMIT 1000;


SELECT DISTINCT CATEGORY FROM MY_DATABASE.PUBLIC.VEHICLES;

SELECT * FROM MY_DATABASE.PUBLIC.VEHICLES WHERE MODEL LIKE '%CAMION%';

-- EXP > 150 and Fuel type Diesel 




SELECT ID_STATION, COUNT(ID_STATION) Freq FROM STATION_SERVICE.PUBLIC.PIVOT_MERCH_STATIONS GROUP BY ID_STATION ORDER BY Freq DESC;


SELECT ACCOUNT_ID, COUNT(ACCOUNT_ID) Freq FROM MY_DATABASE.PUBLIC_CONTRACT.PUBLIC_BALANCE GROUP BY ACCOUNT_ID ORDER BY Freq DESC;


select * from "MY_DATABASE"."PUBLIC"."EXPENSES" exp
inner join "MY_DATABASE"."PUBLIC"."CARD_EXPENSES" cexp on exp.source_id = cexp.id
left join "MY_DATABASE"."PUBLIC"."MASTERCARD_MERCHANTS" merch on cexp.MASTERCARD_MERCHANT_ID = merch.id
where MERCHANT_CATEGORY_CODE in (3351 ,3355 ,3357 ,3359 ,3364 ,3366 ,3368 ,3381 ,3387 ,3389 ,3390 ,3393 ,3395 ,3400 ,3405 ,3409 ,3412
                                       ,3420 ,3427 ,3438 ,3441 ,7512 ,7513 ,7519 ,7521);

--ALTER TABLE MY_DATABASE.PUBLIC.USER_PROFILES RENAME TO USER_PROFILES_OLD;


SELECT MAX(AT) FROm MY_DATABASE.PUBLIC.PAYMENT_ERRORS; -- Rows: 536,131 on 2022-08-22 20:14:17.000  <-->  Rows: 549,822 on 2022-09-12 14:33:58.000

SELECT MAX(CREATED_AT) FROm MY_DATABASE.PUBLIC.CARD_EXPENSES; -- Rows: 5,145,666 on 2022-08-22 20:15:48.647 <--> Rows: 5,298,347 on 2022-09-12 14:37:18.504



SELECT DISTINCT SOURCE_TYPE FROM MY_DATABASE.PUBLIC.EXPENSES;


SELECT * FROM MY_DATABASE.PUBLIC.EXPENSES WHERE VEHICLE_ID IS NOT NULL  ORDER BY CREATED_AT DESC;


SELECT 
    ID AS EXPENSE_ID, VEHICLE_ID, VEHICLE_KILOMETERS, VEHICLE_FUEL_VOLUME, CREATED_AT 
FROM 
    MY_DATABASE.PUBLIC.EXPENSES 
WHERE 
    VEHICLE_ID IS NOT NULL 
    AND VEHICLE_KILOMETERS IS NOT NULL  
    AND VEHICLE_FUEL_VOLUME IS NOT NULL 
    ORDER BY CREATED_AT DESC;

-- last_updated_snwf, num_rows_snwf

CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.Migration_Monitoring (
	table_name varchar NULL,
	last_updated_snwf varchar NULL,
	num_rows_snwf integer NULL,
	last_updated_prod varchar NULL,
	num_rows_prod integer NULL,
	updated_at varchar NOT NULL,
	PRIMARY KEY (table_name)
);

SELECT * FROM MY_DATABASE.PUBLIC.Migration_Monitoring;

SELECT * FROM MY_DATABASE.PUBLIC.ALL_PUB_TABLES WHERE TABLENAMEWITHSCHEMA NOT IN ('account_movements') ORDER BY TABLENAMEWITHSCHEMA ASC;

SELECT COUNT(*) AS num_rows_snwf, MAX(created_at) AS last_updated_snwf FROM account_contact_balances;





SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('john_paul_call_plans', 'sso_config', 'john_paul_calls', 'sso_users', 'roles',  'user_exports') ORDER BY TABLE_NAME ASC;


create or replace view MY_DATABASE.PUBLIC.All_Pub_TABLES_TO_RUN AS
SELECT 
    LOWER(tab.table_name) AS TABLENAMEWITHSCHEMA
FROM 
    information_schema.tables tab
INNER JOIN 
    information_schema.columns inf_sch 
ON    
    inf_sch.table_schema = tab.table_schema AND inf_sch.table_name = tab.table_name
INNER JOIN
    MY_DATABASE.PUBLIC.ALL_PUB_TABLES pub_tab
ON 
    LOWER(tab.table_name) = LOWER(pub_tab.TABLENAMEWITHSCHEMA)
WHERE 
    tab.table_type = 'BASE TABLE' 
    --AND tab.table_schema = 'PUBLIC'
    --AND inf_sch.column_name LIKE '%UPDATED_AT%'
    --ND inf_sch.column_name = 'UPDATED_AT'
    AND inf_sch.column_name = 'CREATED_AT'
ORDER BY 
     tab.table_name ASC;

SELECT * FROM MY_DATABASE.PUBLIC.All_Pub_TABLES_TO_RUN;

SELECT * FROM MY_DATABASE.PUBLIC.All_Pub_TABLES_TO_RUN WHERE TABLENAMEWITHSCHEMA NOT IN ('account_movements', 'active_storage_variant_records', 'ahoy_messages') ;


SELECT ID AS EXPENSE_ID, VEHICLE_ID, VEHICLE_KILOMETERS, VEHICLE_FUEL_VOLUME, CREATED_AT FROM MY_DATABASE.PUBLIC.EXPENSES WHERE VEHICLE_ID IS NOT NULL  AND VEHICLE_KILOMETERS IS NOT NULL  AND VEHICLE_FUEL_VOLUME IS NOT NULL ORDER BY CREATED_AT DESC; 

--ALTER TABLE MY_DATABASE.public.BANK_ACCOUNTS RENAME TO BANK_ACCOUNTS_old_dynamic;

CREATE TABLE IF NOT EXISTS MY_DATABASE.public.account_statements (
	account_id varchar NOT NULL,
	year integer NOT NULL,
	month integer NOT NULL,
	created_at timestamp NOT NULL,
	updated_at timestamp NOT NULL,
	balance_eop numeric(9, 2) NOT NULL DEFAULT 0,
	balance_bop numeric(9, 2) NOT NULL DEFAULT 0,
	downloaded_at timestamp NULL,
	id varchar NOT NULL,
	PRIMARY KEY (id)
);

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.MIGRATION_MONITORING_DATA AS
SELECT 
    TABLE_NAME, LAST_UPDATED_SNWF::datetime AS LAST_UPDATED_SNWF, NUM_ROWS_SNWF, LAST_UPDATED_PROD::timestamp AS LAST_UPDATED_PROD, NUM_ROWS_PROD, UPDATED_AT::timestamp AS UPDATED_AT, NUM_ROWS_SNWF - NUM_ROWS_PROD AS "Row Difference",
    ROUND((NUM_ROWS_SNWF - NUM_ROWS_PROD)/ NUM_ROWS_PROD, 2)  AS "Per Row Difference", ROUND((NUM_ROWS_SNWF/ NUM_ROWS_PROD), 2)  AS "Percentage Complete", DATEDIFF(hour,LAST_UPDATED_SNWF, LAST_UPDATED_PROD) AS "Hour Difference" 
FROM 
    MY_DATABASE.PUBLIC.MIGRATION_MONITORING
WHERE
    NUM_ROWS_PROD > 0
ORDER BY "Row Difference" DESC;

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.MIGRATION_MONITORING_DATA1 AS
SELECT 
    TABLE_NAME, LAST_UPDATED_SNWF AS LAST_UPDATED_SNWF, NUM_ROWS_SNWF, LAST_UPDATED_PROD AS LAST_UPDATED_PROD, NUM_ROWS_PROD, UPDATED_AT AS UPDATED_AT, NUM_ROWS_SNWF - NUM_ROWS_PROD AS "Row Difference",
    ROUND((NUM_ROWS_SNWF - NUM_ROWS_PROD)/ NUM_ROWS_PROD, 2)  AS "Per Row Difference", DATEDIFF(hour,LAST_UPDATED_SNWF, LAST_UPDATED_PROD) AS "Hour Difference" 
FROM 
    MY_DATABASE.PUBLIC.MIGRATION_MONITORING
WHERE
    NUM_ROWS_PROD > 0
ORDER BY "Row Difference" DESC;

SELECT * FROM MY_DATABASE.PUBLIC.MIGRATION_MONITORING_DATA;

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES;

SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES;


-- DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('sso_users', 'user_exports', 'merchant_server_transactions', 'kilometer_rates');

-- DROP TABLE MY_DATABASE.PUBLIC.sso_configs;

SELECT _ID, COUNT(_ID) AS cnt FROM MY_DATABASE.PUBLIC.TEXT_MESSAGES GROUP BY _ID ORDER BY cnt DESC;

SELECT ID, COUNT(ID) AS cnt FROM MY_DATABASE.PUBLIC.bank_accounts_old GROUP BY ID ORDER BY cnt DESC;


-- bank_accounts
SELECT * FROM MY_DATABASE.PUBLIC.bank_accounts ORDER BY CREATED_AT ASC;

SELECT * FROM MY_DATABASE.PUBLIC.bank_accounts_old WHERE SIGNED_AT = '2018-10-30 10:40:53.534939' OR khkjhk = '2018-10-30 10:40:53.534939' OR uhouho = '2018-10-30 10:40:53.534939';

-- {"p":"jO5rR3dKiAvdOukrG73m0NzOs6ByS18cboia","h":{"iv":"r381JgMFE0+RG+vr","at":"XQDNDgp+gZ9J7jHwLcducw=="}}


SELECT 4876032 - 4880484;

SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.sso_config;

-- SPECIAL CASES :->. business_codes, analytic_codes

INSERT INTO MY_DATABASE.PUBLIC.PUBLIC_TABLES (TABLENAMEWITHSCHEMA) VALUES ('flying_blue_accounts');

DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA IN ('analytic_codes');



INSERT INTO MY_DATABASE.PUBLIC.SPECIAL_TABLES (TABS) VALUES ('analytic_codes');

DELETE FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES WHERE TABS IN ('flying_blue_accounts');

SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES;

--expense_expense_category_guesses

SELECT ID, COUNT(ID) cnt FROM MY_DATABASE.PUBLIC.BUSINESS_CODES GROUP BY ID ORDER BY cnt DESC;

ALTER TABLE MY_DATABASE.PUBLIC.user_exports RENAME TO user_exports_OLD;

-- DELETE FROM MY_DATABASE.PUBLIC.OAUTH_ACCESS_TOKENS WHERE ID = 160311; -- Rows: 292,814




-- SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('john_paul_call_plans', 'roles', 'sso_configs', 'john_paul_calls', 'kilometer_rate_periods') ORDER BY TABLE_NAME ASC


SELECT * FROM MY_DATABASE.SALESFORCE.LEAD WHERE ID = '00Q5q000004MTo3EAG';


SELECT ID, COUNT(ID) cnt FROM MY_DATABASE.PUBLIC.COMPANIES GROUP BY ID ORDER BY cnt DESC;

ALTER TABLE MY_DATABASE.PUBLIC.COMPANIES_OLD RENAME TO COMPANIES;

ALTER TABLE MY_DATABASE.PUBLIC.ACCOUNT_MOVEMENTS_OLD RENAME TO ACCOUNT_MOVEMENTS;

ALTER TABLE MY_DATABASE.PUBLIC.COMPANIES ADD COLUMN sso_config_id varchar NULL;


SELECT MAX(to_timestamp(SENT_AT)) FROM MY_DATABASE.PUBLIC.AHOY_MESSAGES;

SELECT MAX(AUTHORIZATION_DATE) FROM MY_DATABASE.PUBLIC.ACCOUNT_MOVEMENTS;

SELECT COUNT(*) FROM MY_DATABASE.PUBLIC.ACCOUNT_MOVEMENTS;


CREATE TABLE IF NOT EXISTS MY_DATABASE.public.card_patterns_expense_categories (
	card_pattern_id varchar NOT NULL,
	expense_category_id varchar NOT NULL,
	mcc_type varchar NULL
);

SELECT * FROM MY_DATABASE.PUBLIC.All_Pub_TABLES_TO_RUN WHERE TABLENAMEWITHSCHEMA IN ('account_movements', 'accounts') ;

SELECT * FROM MY_DATABASE.PUBLIC.All_Pub_TABLES_TO_RUN WHERE TABLENAMEWITHSCHEMA NOT IN ('account_movements', 'active_storage_variant_records', 'ahoy_messages') UNION (SELECT 'account_movements');




SELECT * FROM SAS_APPS.MISCELLENEOUS_SAS.KILLBILLS_RESPONSE;

SELECT * FROM MY_DATABASE.PUBLIC.MIGRATION_MONITORING_DATA;

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES;

SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES;



SELECT * FROM MY_DATABASE.PUBLIC.All_Pub_TABLES_TO_RUN WHERE TABLENAMEWITHSCHEMA NOT IN ('account_movements', 'active_storage_variant_records', 'ahoy_messages') UNION (SELECT 'account_movements') ORDER BY TABLENAMEWITHSCHEMA ASC ;

ALTER TABLE MY_DATABASE.PUBLIC.AHOY_MESSAGES_OLD RENAME TO AHOY_MESSAGES;

SELECT ID, COUNT(ID) AS NUM_ID FROM MY_DATABASE.PUBLIC.BANK_ACCOUNTS GROUP BY ID ORDER BY NUM_ID DESC;



SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('john_paul_call_plans', 'roles', 'sso_configs', 'john_paul_calls', 'kilometer_rate_periods', 'generali_calls', 'user_profiles', 'fleet_whitelists') ORDER BY TABLE_NAME ASC;



SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA IN ('analytic_codes') ORDER BY TABLE_NAME ASC;


SELECT MAX(TRANSACTION_DATE)AS CREATED_AT FROM MY_DATABASE.PUBLIC.ACCOUNT_MOVEMENTS; -- 2022-11-23 13:06:56.935


SELECT MAX(to_timestamp(SENT_AT)) FROM MY_DATABASE.PUBLIC.AHOY_MESSAGES; -- 2022-11-28 16:58:46.526

SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.BILLING_PRODUCTS;

(SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('john_paul_call_plans', 'roles', 'sso_configs', 'john_paul_calls', 'kilometer_rate_periods', 'generali_calls', 'user_profiles', 'fleet_whitelists')) UNION (SELECT 'business_codes' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC;

SELECT 'business_codes' AS TABLENAMEWITHSCHEMA;

--ALTER TABLE MY_DATABASE.PUBLIC.SSO_LOGIN_DOMAINS RENAME TO SSO_LOGIN_DOMAINS_OLD;

ALTER TABLE MY_DATABASE.PUBLIC.AHOY_MESSAGES DROP COLUMN "TO";

(SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('john_paul_call_plans', 'roles', 'sso_configs', 'john_paul_calls', 'kilometer_rate_periods', 'generali_calls', 'user_profiles', 'fleet_whitelists')) UNION (SELECT 'business_codes' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC;
SELECT  LOWER(pub_tab.TABLENAMEWITHSCHEMA) AS TABLENAMEWITHSCHEMA  FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES pub_tab  WHERE pub_tab.TABLENAMEWITHSCHEMA NOT IN (SELECT TABLE_NAME FROM MY_DATABASE.PUBLIC.Tables_To_Run) AND pub_tab.TABLENAMEWITHSCHEMA NOT IN ('aaplop', 'oauth_access_tokens', 'kilometer_rate_periods', 'sso_configs', 'card_patterns_expense_categories', 'cards_expense_categories') ORDER BY pub_tab.TABLENAMEWITHSCHEMA ASC;
SELECT  LOWER(pub_tab.TABLENAMEWITHSCHEMA) AS TABLENAMEWITHSCHEMA  FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES pub_tab  WHERE pub_tab.TABLENAMEWITHSCHEMA NOT IN (SELECT TABLE_NAME FROM MY_DATABASE.PUBLIC.Tables_To_Run) AND pub_tab.TABLENAMEWITHSCHEMA NOT IN ('aaplop', 'kilometer_rate_periods', 'sso_configs', 'card_patterns_expense_categories', 'cards_expense_categories') ORDER BY pub_tab.TABLENAMEWITHSCHEMA ASC;
SELECT CREATED_AT, COUNT(CREATED_AT) AS NUM_ID FROM (SELECT * FROM  MY_DATABASE.PUBLIC.EXPENSE_STEP_RECORDS ORDER BY CREATED_AT DESC LIMIT 3000) GROUP BY CREATED_AT ORDER BY NUM_ID DESC;

SELECT TOKEN, COUNT(TOKEN) AS NUM_ID FROM MY_DATABASE.PUBLIC.AHOY_MESSAGES GROUP BY TOKEN ORDER BY NUM_ID DESC;

SELECT ID, COUNT(ID) AS NUM_ID FROM MY_DATABASE.PUBLIC.STRIPE_PAYMENTS GROUP BY ID ORDER BY NUM_ID DESC;

expense_step_records


SELECT CONCAT(CREATED_AT,'  ',ID,'  ',UPDATED_AT,'  ',USER_ID) AS VAL, COUNT(VAL) AS NUM_ID FROM MY_DATABASE.PUBLIC.EXPENSE_STEP_RECORDS GROUP BY VAL ORDER BY NUM_ID DESC;

SELECT * FROM MY_DATABASE.PUBLIC.EXPENSE_STEP_RECORDS ORDER BY CREATED_AT DESC LIMIT 30;


SELECT PAGE, SUM(NUMBER_OF_VISITS) AS NUMBER_OF_VISITS FROM LOGS.PUBLIC.Page_Visits_Distro_Sankey GROUP BY PAGE ORDER BY NUMBER_OF_VISITS DESC LIMIT 10;


SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES;
SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES;

SELECT * FROM MY_DATABASE.PUBLIC.ROLES;

ALTER TABLE MY_DATABASE.PUBLIC.ROLES RENAME TO ROLES_old2;
-- user_profiles


SELECT * FROM MY_DATABASE.KPI.WEEKLY_KPI;

SELECT MAX(AUTHORIZATION_DATE) FROM MY_DATABASE.PUBLIC.ACCOUNT_MOVEMENTS;


SELECT ID,CREATED_AT, DATA, PARSE_JSON(DATA):etl_transaction_id::string AS etl_transaction_id FROM MY_DATABASE.PUBLIC.MERCHANT_SERVER_TRANSACTIONS  LIMIT 100;


SELECT * FROM MERCHANT_DATABASE.PUBLIC.TRANSACTIONS;

ALTER TABLE MY_DATABASE.PUBLIC.account_movements RENAME TO account_movements_OLD3;



-- MERCHANT_DATABASE.PUBLIC.TRANSACTIONS

-- MY_DATABASE.PUBLIC.MERCHANT_SERVER_TRANSACTIONS



-- 167,074 merchant server transactions
-- 195,134 transactions (Merchant DB)
-- transaction_date
-- merchant

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Merchant_Server_and_Transaction_matched AS
SELECT 
    DATE_TRUNC('month', LEFT(PARSE_JSON(tr.DATA):invoice:transaction_date::string, 10)::date) AS PERIOD, tr.ID AS Transactions_ID, PARSE_JSON(mch_sr_tr.DATA):etl_transaction_id::string AS etl_transaction_id, PARSE_JSON(tr.DATA):invoice:transaction_date::string AS TRANS_DATE, PARSE_JSON(mch_sr_tr.DATA):invoice:transaction_date::string AS mer_Created_Date, 
    DATEDIFF('day', tr.TRANSACTION_DATE, mch_sr_tr.CREATED_AT) AS Day_Difference, PARSE_JSON(tr.DATA):invoice:amount::string AS Trans_AMOUNT, PARSE_JSON(mch_sr_tr.DATA):invoice:amount::string AS MER_AMOUNT,
    PARSE_JSON(tr.DATA):invoice:vat_rate::string AS Trans_TVA, PARSE_JSON(mch_sr_tr.DATA):invoice:vat_rate::string AS MER_TVA,
    PARSE_JSON(tr.DATA):merchant:name::string AS Trans_Merchant, PARSE_JSON(mch_sr_tr.DATA):merchant:name::string AS MER_Merchant
FROM 
    MERCHANT_DATABASE.PUBLIC.TRANSACTIONS tr
INNER JOIN 
    MY_DATABASE.PUBLIC.MERCHANT_SERVER_TRANSACTIONS mch_sr_tr
ON
    tr.ID = PARSE_JSON(mch_sr_tr.DATA):etl_transaction_id::string
ORDER BY mch_sr_tr.CREATED_AT DESC;

SELECT * FROM MY_DATABASE.PUBLIC.Merchant_Server_and_Transaction_matched;
    
    
-- 163,802 rows of merchant server transactions matched, 571 unmatched rows. Percentage Match 99.65% => Results last Friday
-- 167,073 rows of merchant server transactions matched, 1 unmatched row. Percentage Match 99.99% => Results last Friday
    
CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Mer_Trans_Matched AS
SELECT 
    DATE_TRUNC('month', LEFT(PARSE_JSON(mch_sr_tr.DATA):invoice:transaction_date::string, 10)::date) AS PERIOD, COUNT(*) AS Num_Matched
FROM 
    MERCHANT_DATABASE.PUBLIC.TRANSACTIONS tr
INNER JOIN 
    MY_DATABASE.PUBLIC.MERCHANT_SERVER_TRANSACTIONS mch_sr_tr
ON
    tr.ID = PARSE_JSON(mch_sr_tr.DATA):etl_transaction_id::string
GROUP BY PERIOD
ORDER BY PERIOD DESC;   

SELECT * FROM MY_DATABASE.PUBLIC.Mer_Trans_Matched;
    
    
CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Monthly_Mer_Ser_Transactions AS    
SELECT 
    DATE_TRUNC('month', LEFT(PARSE_JSON(mch_sr_tr.DATA):invoice:transaction_date::string, 10)::date) AS PERIOD, COUNT(*) AS Num_mch_sr_tr
FROM     
    MY_DATABASE.PUBLIC.MERCHANT_SERVER_TRANSACTIONS mch_sr_tr
GROUP BY PERIOD
ORDER BY PERIOD DESC;       

SELECT * FROM MY_DATABASE.PUBLIC.Monthly_Mer_Ser_Transactions;


CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Percentage_Monthly_matched AS
SELECT 
    mtm.*, mmst.Num_mch_sr_tr, ROUND((mtm.Num_Matched/mmst.Num_mch_sr_tr) * 100, 2) AS Percentage_Matched
FROM 
    MY_DATABASE.PUBLIC.Mer_Trans_Matched mtm
INNER JOIN
    MY_DATABASE.PUBLIC.Monthly_Mer_Ser_Transactions mmst
ON
    mtm.period = mmst.period
--ORDER BY PERIOD DESC
;

SELECT * FROM MY_DATABASE.PUBLIC.Percentage_Monthly_matched;

CREATE OR REPLACE VIEW MY_DATABASE.PUBLIC.Parking_Tolls AS
SELECT 
    PARSE_JSON(DATA):Merch_ID_DE42::string AS Merch_ID_DE42
    --, PARSE_JSON(DATA):MCC_Code::string  
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS 
WHERE PARSE_JSON(DATA):MCC_Code::string = '4784' 
AND TRANSACTION_STATUS = 19 
AND TRANSACTION_TYPE = 16 
AND Merch_ID_DE42 IS NOT NULL 
--LIMIT 1000
;

SELECT * FROM MY_DATABASE.PUBLIC.Parking_Tolls LIMIT 10;

-- 84435837400016

SELECT DISTINCT TRANSACTION_STATUS FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS;



Select * from SAS_APPS.MISCELLENEOUS_SAS.KILL_BILL_TRANSACTION WHERE MERCHANT_NAME != 'None' LIMIT 1;




--TRUNCATE TABLE SAS_APPS.MISCELLENEOUS_SAS.KILLBILLS_RESPONSE;

(SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('john_paul_call_plans',  'oauth_access_tokens' , 'roles', 'sso_configs', 'john_paul_calls', 'kilometer_rate_periods', 'generali_calls', 'user_profiles', 'fleet_whitelists')) UNION (SELECT 'business_codes' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC;

SELECT  LOWER(pub_tab.TABLENAMEWITHSCHEMA) AS TABLENAMEWITHSCHEMA  FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES pub_tab  WHERE pub_tab.TABLENAMEWITHSCHEMA NOT IN (SELECT TABLE_NAME FROM MY_DATABASE.PUBLIC.Tables_To_Run) AND pub_tab.TABLENAMEWITHSCHEMA NOT IN ('aaplop', 'oauth_access_tokens', 'kilometer_rate_periods', 'sso_configs', 'card_patterns_expense_categories', 'cards_expense_categories', 'cegid_ar_invoices', 'cegid_customers', 'cegid_payments') ORDER BY pub_tab.TABLENAMEWITHSCHEMA ASC;



SELECT 'flying_blue_accounts' AS TABLENAMEWITHSCHEMA;
-- flying_blue_accounts
-- cegid_ar_invoices



SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.FLYING_BLUE_ACCOUNTS;

SELECT MAX(AT) FROM MY_DATABASE.PUBLIC.PAYMENT_ERRORS_OLD;

SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES;
SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES;




SELECT COUNT(*) FROM MY_DATABASE.PUBLIC.AHOY_MESSAGES WHERE OPENED_AT IS NULL;

SELECT ID, COUNT(ID) AS Num_ID FROM MY_DATABASE.PUBLIC.AHOY_MESSAGES GROUP BY ID ORDER BY Num_ID DESC; 
SELECT MAX(CREATED_AT) AS Max_ID FROM MY_DATABASE.PUBLIC.FLYING_BLUE_TRANSACTIONS;
SELECT MAX(ID)::numeric AS MAX_ID FROM public.AHOY_MESSAGES;
SELECT '3465120' > '3452441';

SELECT MASTERCARD_TRANSACTION_ID, COUNT(MASTERCARD_TRANSACTION_ID) AS NUM_TRANSLINK FROM MY_DATABASE.PUBLIC.ACCOUNT_MOVEMENTS GROUP BY MASTERCARD_TRANSACTION_ID ORDER BY NUM_TRANSLINK DESC;

SELECT ID, COUNT(ID) AS NUM_TRANSLINK FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS GROUP BY ID ORDER BY NUM_TRANSLINK DESC;

-- ALTER TABLE MY_DATABASE.PUBLIC.stripe_payments RENAME TO stripe_payments_old;
-- employee_expenses, external_expenses, oauth_access_tokens, stripe_payments(In special table)

(SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('john_paul_call_plans',  'oauth_access_tokens' , 'roles', 'sso_configs', 'john_paul_calls', 'kilometer_rate_periods', 'generali_calls', 'user_profiles', 'fleet_whitelists')) UNION (SELECT 'business_codes' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC;

SELECT 'stripe_payments' AS TABLENAMEWITHSCHEMA;

(SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('john_paul_call_plans',  'oauth_access_tokens' , 'roles', 'sso_configs', 'john_paul_calls', 'kilometer_rate_periods', 'generali_calls', 'user_profiles', 'fleet_whitelists')) UNION (SELECT 'business_codes' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC;

(SELECT  LOWER(TABLENAMEWITHSCHEMA) AS TABLENAMEWITHSCHEMA  FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES  WHERE TABLENAMEWITHSCHEMA NOT IN (SELECT TABLE_NAME FROM MY_DATABASE.PUBLIC.Tables_To_Run) AND TABLENAMEWITHSCHEMA NOT IN ('aaplop', 'oauth_access_tokens', 'kilometer_rate_periods', 'sso_configs', 'card_patterns_expense_categories', 'cards_expense_categories', 'cegid_ar_invoices', 'cegid_customers', 'cegid_payments', 'cegid_journal_transactions')) UNION (SELECT 'oauth_access_tokens' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC;

select * from public.account_movements;
SELECT MAX(TRANSACTION_DATE)  AS MAX_MASTERCARD_TRANSACTION_ID FROM MY_DATABASE.PUBLIC.ACCOUNT_MOVEMENTS; -- OLD2 Max_Auth_Date = 2022-12-11 21:01:26.707  -- Current Max_Auth_date = 2023-01-09 12:19:12.557

SELECT * FROM MY_DATABASE.PUBLIC.ACCOUNT_MOVEMENTS WHERE MASTERCARD_TRANSACTION_ID >= 11370 ORDER BY MASTERCARD_TRANSACTION_ID ASC;


select 29151007 - 29130405; -- 20602
--19,612,346
--19,631,644

SELECT 19631644 - 19612346; -- 19298


SELECT 13367825 + 10003; -- 13,377,828  -- Max Auth_date 2021-11-08 22:59:46.253

SELECT ID, COUNT(ID) AS NUM_ID FROM MY_DATABASE.PUBLIC.INSURANCES GROUP BY ID ORDER BY NUM_ID DESC;


SELECT * FROM MY_DATABASE.PUBLIC.INSURANCES WHERE ID = 49956;

SELECT * FROM MY_DATABASE.PUBLIC.All_Pub_TABLES_TO_RUN WHERE TABLENAMEWITHSCHEMA NOT IN ('account_movements', 'active_storage_variant_records', 'ahoy_messages') UNION (SELECT 'account_movements');


SELECT ID, COUNT(ID) AS num_ID FROM MY_DATABASE.PUBLIC.STRIPE_PAYMENTS GROUP BY ID ORDER BY num_ID DESC; 


-- stripe_dispute_balance_transaction


Select * from SAS_APPS.MISCELLENEOUS_SAS.KILL_BILL_TRANSACTION WHERE MERCHANT_NAME != 'None' ORDER BY CREATED_AT DESC ;


SHOW TABLES LIKE 'OLD' in MY_DATABASE.PUBLIC;


select table_name
    from MY_DATABASE.information_schema.tables
    WHERE table_schema = 'PUBLIC' AND table_name LIKE '%OLD%';




--ALTER VIEW MY_DATABASE.PUBLIC.COMPANY_EXPENSE_CATEGORISATION RENAME TO MY_DATABASE.OLD_TABLES.COMPANY_EXPENSE_CATEGORISATION;

--DROP VIEW MY_DATABASE.PUBLIC.MER_TRANS_MATCHED;

-- GET ALL PS AND AA Transactions
-- For PS Transactions, TRANSACTION_TYPE = 16 AND TRANSACTION_STATUS = 19
-- For AA Transactions, TRANSACTION_TYPE = 1 AND TRANSACTION_STATUS = 1

SELECT 
    * 
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS 
WHERE
   (TRANSACTION_TYPE = 16 AND TRANSACTION_STATUS = 19) OR (TRANSACTION_TYPE = 1 AND TRANSACTION_STATUS = 1)
   AND CREATED_AT >= '2021-09-01'
   ORDER BY CREATED_AT DESC
   LIMIT 100000
    ;
    
CREATE OR REPLACE VIEW MY_DATABASE.KPI.GET_All_needed_Data AS    
SELECT 
    CASE WHEN TRANSACTION_TYPE = 16 AND TRANSACTION_STATUS = 19 THEN 'PS'
         WHEN TRANSACTION_TYPE = 1 AND TRANSACTION_STATUS = 1 THEN 'AA'
         END AS Type,
    CREATED_AT, CARD_EXPENSE_ID, PARSE_JSON(DATA):Trans_link::string AS Trans_link, PARSE_JSON(DATA):Merch_Country::string AS Merch_Country, TRANSACTION_TYPE, TRANSACTION_STATUS, DATA
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS 
WHERE
   CREATED_AT >= '2021-09-01'
   AND CARD_EXPENSE_ID IS NOT NULL
   AND (TRANSACTION_TYPE = 16 AND TRANSACTION_STATUS = 19) OR (TRANSACTION_TYPE = 1 AND TRANSACTION_STATUS = 1)
   ORDER BY CREATED_AT DESC
    ;
    
SELECT COUNT(*) FROM MY_DATABASE.KPI.GET_All_needed_Data;

SELECT MIN(CREATED_AT) FROM MY_DATABASE.KPI.GET_All_needed_Data;

SELECT * FROM MY_DATABASE.KPI.GET_All_needed_Data LIMIT 100;

SELECT Trans_link, COUNT(Trans_link) AS NUM_Translink FROM MY_DATABASE.KPI.GET_All_needed_Data WHERE CREATED_AT >= '2021-09-01' GROUP BY Trans_link ORDER BY NUM_Translink DESC LIMIT 1000;


--SELECT MAX(DATA) FROM(

CREATE OR REPLACE VIEW MY_DATABASE.KPI.Merchant_Refacto_Data AS 
SELECT * FROM MY_DATABASE.KPI.GET_All_needed_Data WHERE CARD_EXPENSE_ID IS NOT NULL AND CREATED_AT >= '2021-09-01';

SELECT * FROM MY_DATABASE.KPI.Merchant_Refacto_Data LIMIT 1000;

-- "Acquirer_id_DE32": "06459519",  "Acquirer_id_DE32": "11899000",

-- "Trans_link": "220624000001497400",  "Merch_ID_DE42": "57213999600167", "Acquirer_id_DE32": "30004000",
SELECT * FROM MY_DATABASE.KPI.GET_All_needed_Data WHERE Trans_link = '211002000001459519'
AND PARSE_JSON(DATA):Acquirer_id_DE32::string = '30004000'
AND PARSE_JSON(DATA):Merch_ID_DE42::string = '57213999600167'
;
   
   
   
   
   
   
-- POS_Data_DE22

-- AA "Trans_link": "230126271058483888", ID 30236852 CREATED_AT 2023-01-26 16:58:52.300   ==>> GOT ==>>  PS "Trans_link": "230126271058483888", ID 30281145 CREATED_AT 2023-01-27 09:23:29.498
-- AA "Trans_link": "210831000015497608", ID 12121897 CREATED_AT 2021-08-31 13:24:25.263   ==>> GOT ==>>  PS "Trans_link": "210831000015497608", ID 12138298 CREATED_AT 2021-09-01 09:42:11.007

SELECT TRANSACTION_TYPE, COUNT(TRANSACTION_TYPE) AS NUM_TRANSACTION_TYPE, TRANSACTION_STATUS, COUNT(TRANSACTION_STATUS) AS NUM_TRANSACTION_STATUS FROM ( 
SELECT 
    * 
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS
WHERE 
     PARSE_JSON(DATA):Trans_link::string = '210831000015497608' -- OR PARSE_JSON(DATA):Acquirer_id_DE32::string = '06416590' --OR PARSE_JSON(DATA):Merch_ID_DE42::string = '045132133501856') 
    AND TRANSACTION_TYPE <> 16 AND TRANSACTION_STATUS <> 19
    --AND CREATED_AT >= '2021-09-01'  
--LIMIT 10
)
GROUP BY TRANSACTION_TYPE, TRANSACTION_STATUS
;    



SELECT 
    * 
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS
WHERE 
     PARSE_JSON(DATA):Trans_link::string = '210831000015497608'
    AND TRANSACTION_TYPE <> 16 AND TRANSACTION_STATUS <> 19
    --AND TRANSACTION_TYPE = 16 AND TRANSACTION_STATUS = 19
    --AND TRANSACTION_TYPE = 1 AND TRANSACTION_STATUS = 1
    --AND TRANSACTION_TYPE <> 1 AND TRANSACTION_STATUS <> 1
    --AND CREATED_AT >= '2021-09-01'
    ;


-- All with or withouth GPS_POS_Data ==> 7,166,308 rows (1,689,883 shown)
-- All withouth GPS_POS_Data ==> 11 rows

CREATE OR REPLACE VIEW MY_DATABASE.KPI.GET_All_needed_Transactions AS
SELECT 
    ID, CREATED_AT,
    CASE WHEN TRANSACTION_TYPE = 16 AND TRANSACTION_STATUS = 19 THEN 'PS'
         WHEN TRANSACTION_TYPE = 1 AND TRANSACTION_STATUS = 1 THEN 'AA'
         END AS Type,
    PARSE_JSON(DATA):POS_Termnl_DE41::string AS POS_Termnl_DE41, PARSE_JSON(DATA):POS_Data_DE22::string AS POS_Data_DE22, PARSE_JSON(DATA):GPS_POS_Capability::string AS GPS_POS_Capability, 
    PARSE_JSON(DATA):GPS_POS_Data::string AS GPS_POS_Data, PARSE_JSON(DATA):Visa_POS_Data_DE60::string AS Visa_POS_Data_DE60, DATA 
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS 
WHERE 
    CREATED_AT >= '2021-09-01'
    AND ((TRANSACTION_TYPE = 16 AND TRANSACTION_STATUS = 19) OR (TRANSACTION_TYPE = 1 AND TRANSACTION_STATUS = 1))
    AND LEFT(PARSE_JSON(DATA):POS_Data_DE22::string, 2) = '00'
    --AND PARSE_JSON(DATA):GPS_POS_Data::string IS NULL
ORDER BY CREATED_AT DESC
    LIMIT 10000
    ;

SELECT * FROM MY_DATABASE.KPI.GET_All_needed_Transactions;


DROP TABLE MY_DATABASE.MERCHANTS.someTable;


SELECT * FROM MY_DATABASE.MERCHANTS.GROUPs;

CREATE OR REPLACE VIEW MY_DATABASE.KPI.GET_AA_Transactions AS
SELECT 
   ID, DATA
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS 
WHERE
   --(TRANSACTION_TYPE = 16 AND TRANSACTION_STATUS = 19) OR 
   (TRANSACTION_TYPE = 1 AND TRANSACTION_STATUS = 1)
   AND CREATED_AT >= '2021-09-01'
   ORDER BY CREATED_AT DESC
   LIMIT 100000
    ;

SELECT * FROM MY_DATABASE.KPI.GET_AA_Transactions;


SELECT 
    aa.ID, ant.DATA
FROM
    MY_DATABASE.KPI.GET_All_needed_Transactions ant, MY_DATABASE.KPI.GET_AA_Transactions aa
WHERE PARSE_JSON(aa.DATA):Trans_link::string = PARSE_JSON(ant.DATA):Trans_link::string   
GROUP BY   
    aa.ID, ant.DATA
ORDER BY aa.ID DESC
LIMIT 10
;    



SELECT * FROM MY_DATABASE.KPI.Merchant_Refacto_Data LIMIT 1000;
SELECT Trans_link, COUNT(Trans_link) AS NUM_Translink FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE CREATED_AT >= '2021-09-01' GROUP BY Trans_link ORDER BY NUM_Translink DESC LIMIT 1000;

SELECT COUNT(*) FROM(SELECT Trans_link, COUNT(Trans_link) AS NUM_Translink FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE CREATED_AT >= '2021-09-01' GROUP BY Trans_link ORDER BY NUM_Translink DESC)
WHERE NUM_Translink = 1;



CREATE OR REPLACE VIEW MY_DATABASE.KPI.GET_All_needed_Data AS    
SELECT 
    CASE WHEN TRANSACTION_TYPE = 16 AND TRANSACTION_STATUS = 19 THEN 'PS'
         WHEN TRANSACTION_TYPE = 1 AND TRANSACTION_STATUS = 1 THEN 'AA'
         END AS Type,
    CREATED_AT, CARD_EXPENSE_ID, PARSE_JSON(DATA):Trans_link::string AS Trans_link, PARSE_JSON(DATA):Merch_Country::string AS Merch_Country, TRANSACTION_TYPE, TRANSACTION_STATUS, DATA
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS 
WHERE
   CREATED_AT >= '2021-09-01'
   AND CARD_EXPENSE_ID IS NOT NULL
   AND (TRANSACTION_TYPE = 16 AND TRANSACTION_STATUS = 19) OR (TRANSACTION_TYPE = 1 AND TRANSACTION_STATUS = 1)
   ORDER BY CREATED_AT DESC
    ;
    
SELECT COUNT(*) FROM MY_DATABASE.KPI.GET_All_needed_Data;

SELECT MIN(CREATED_AT) FROM MY_DATABASE.KPI.GET_All_needed_Data;

SELECT * FROM MY_DATABASE.KPI.GET_All_needed_Data LIMIT 100;



CREATE OR REPLACE VIEW MY_DATABASE.KPI.Merchant_Refacto_Data AS 
SELECT * FROM MY_DATABASE.KPI.GET_All_needed_Data WHERE CARD_EXPENSE_ID IS NOT NULL AND CREATED_AT >= '2021-09-01';

SELECT COUNT(*) FROM MY_DATABASE.KPI.Merchant_Refacto_Data;

SELECT MIN(CREATED_AT) FROM MY_DATABASE.KPI.Merchant_Refacto_Data;

SELECT * FROM MY_DATABASE.KPI.Merchant_Refacto_Data LIMIT 1000;

SELECT COUNT(*) FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE MERCH_COUNTRY IN ('FRA');

CREATE OR REPLACE VIEW MY_DATABASE.KPI.Merchant_Refacto_Data_Translink_Count AS 
SELECT Trans_link, COUNT(Trans_link) AS NUM_Translink FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE CREATED_AT >= '2021-09-01' GROUP BY Trans_link ORDER BY NUM_Translink DESC;

CREATE OR REPLACE VIEW MY_DATABASE.KPI.Merchant_Refacto_Data_Translink_Count_FR AS 
SELECT Trans_link, COUNT(Trans_link) AS NUM_Translink FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE CREATED_AT >= '2021-09-01' AND MERCH_COUNTRY IN ('FRA') GROUP BY Trans_link ORDER BY NUM_Translink DESC;

CREATE OR REPLACE VIEW MY_DATABASE.KPI.Merchant_Refacto_Data_Translink_Count_Others AS 
SELECT Trans_link, COUNT(Trans_link) AS NUM_Translink FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE CREATED_AT >= '2021-09-01' AND MERCH_COUNTRY NOT IN ('FRA') GROUP BY Trans_link ORDER BY NUM_Translink DESC;

SELECT COUNT(*) FROM (SELECT Trans_link, COUNT(Trans_link) AS NUM_Translink FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE CREATED_AT >= '2021-09-01' AND MERCH_COUNTRY IN ('FRA') GROUP BY Trans_link ORDER BY NUM_Translink DESC)
WHERE NUM_Translink <= 2;

SELECT MAX(DATA) FROM(SELECT Trans_link, COUNT(Trans_link) AS NUM_Translink FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE CREATED_AT >= '2021-09-01' AND MERCH_COUNTRY IN ('FRA') GROUP BY Trans_link ORDER BY NUM_Translink DESC)
WHERE NUM_Translink = 1;

SELECT COUNT(*) FROM MY_DATABASE.KPI.Merchant_Refacto_Data_Translink_Count WHERE NUM_Translink = 1;

SELECT * FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE TRANS_LINK = '230117394107498750';

SELECT * FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE TRANS_LINK IN (SELECT TRANS_LINK FROM MY_DATABASE.KPI.Merchant_Refacto_Data_Translink_Count_FR WHERE NUM_Translink = 1) LIMIT 10;



SELECT ROUND((6421548/7285251) * 100, 2) AS Market_Per;
/*
"Merch_City": "DUCOS",
"Merch_Country": "MTQ",
"Merch_Name": "WIZZEE_DIGICEL AFG",
"Txn_Desc": "WIZZEE_DIGICEL AFG DUCOS 97224 MTQ",
"MCC_Code": "5399",
"MCC_Desc": "Miscellaneous General Merchandise",
"Trans_link": "220909706829460905",
"Acquirer_id_DE32": "10069917",
"Merch_ID_DE42": "TM76A6NNTJ6KQYP",
"Merch_Postcode": "97224",
"POS_Data_DE22": "10",
"POS_Termnl_DE41": "UGSNTV8K",
"POS_Time_DE12": "220909000000",
*/

CREATE TABLE IF NOT EXISTS MY_DATABASE.KPI.First_Merchant_Clean(
    Type varchar null,
    CREATED_AT varchar null,
    CARD_EXPENSE_ID varchar null, 
    Merch_City varchar null, 
    Merch_Country varchar null, 
    Merch_Name varchar null, 
    Txn_Desc varchar null, 
    MCC_Code varchar null, 
    MCC_Desc varchar null, 
    Trans_link varchar null, 
    Acquirer_id_DE32 varchar null, 
    Merch_ID_DE42 varchar null, 
    Merch_Postcode varchar null, 
    POS_Data_DE22 varchar null, 
    POS_Termnl_DE41 varchar null, 
    POS_Time_DE12 varchar null
    --Primary (Trans_link)
);

TRUNCATE TABLE MY_DATABASE.KPI.First_Merchant_Clean;

-- Save all Translink Data with only 1 AA or PS
INSERT INTO MY_DATABASE.KPI.First_Merchant_Clean (Type, CREATED_AT, CARD_EXPENSE_ID, Merch_City, Merch_Country, Merch_Name, Txn_Desc, MCC_Code, MCC_Desc, Trans_link, Acquirer_id_DE32, Merch_ID_DE42, Merch_Postcode, POS_Data_DE22, POS_Termnl_DE41, POS_Time_DE12)
SELECT 
    TYPE, CREATED_AT, CARD_EXPENSE_ID, PARSE_JSON(DATA):Merch_City::string, PARSE_JSON(DATA):Merch_Country::string, PARSE_JSON(DATA):Merch_Name::string,
    PARSE_JSON(DATA):Txn_Desc::string, PARSE_JSON(DATA):MCC_Code::string, PARSE_JSON(DATA):MCC_Desc::string, PARSE_JSON(DATA):Trans_link::string,
    PARSE_JSON(DATA):Acquirer_id_DE32::string, PARSE_JSON(DATA):Merch_ID_DE42::string, PARSE_JSON(DATA):Merch_Postcode::string, PARSE_JSON(DATA):POS_Data_DE22::string,
    PARSE_JSON(DATA):POS_Termnl_DE41::string, PARSE_JSON(DATA):POS_Time_DE12::string
FROM 
    MY_DATABASE.KPI.Merchant_Refacto_Data 
WHERE TRANS_LINK IN (SELECT TRANS_LINK FROM MY_DATABASE.KPI.Merchant_Refacto_Data_Translink_Count WHERE NUM_Translink = 1);




ALTER TABLE MY_DATABASE.PUBLIC.EXPENSE_EXPORTS RENAME TO MY_DATABASE.OLD_TABLES.EXPENSE_EXPORTS_OLD;

SELECT * FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE TRANS_LINK IN (SELECT TRANS_LINK FROM MY_DATABASE.KPI.Merchant_Refacto_Data_Translink_Count_FR WHERE NUM_Translink = 2) LIMIT 100;

-- ('221028936478497840', '221028867336497840', '221028805688459519', '221027320618497400', '221028086655497400', '221028591247497200', '221027856386497400')
SELECT * FROM MY_DATABASE.KPI.Merchant_Refacto_Data  WHERE TRANS_LINK IN ('230208000008497587') ORDER BY TRANS_LINK; -- 230208000002497011 230208000001453310  230208000001497810

SELECT TYPE, COUNT(TYPE) AS Num_TYPE FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE TRANS_LINK IN (SELECT TRANS_LINK FROM MY_DATABASE.KPI.Merchant_Refacto_Data_Translink_Count_FR WHERE NUM_Translink = 2) GROUP BY TYPE;


-- Save all Translink Data  with only two AA
--Get the data 
--SELECT TRANS_LINK FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE TRANS_LINK IN (SELECT TRANS_LINK FROM MY_DATABASE.KPI.Merchant_Refacto_Data_Translink_Count WHERE NUM_Translink = 2) AND TYPE = 'AA' AND TYPE <> 'PS' LIMIT 10;

--Save the data
INSERT INTO MY_DATABASE.KPI.First_Merchant_Clean (Type, CREATED_AT, CARD_EXPENSE_ID, Merch_City, Merch_Country, Merch_Name, Txn_Desc, MCC_Code, MCC_Desc, Trans_link, Acquirer_id_DE32, 
Merch_ID_DE42, Merch_Postcode, POS_Data_DE22, POS_Termnl_DE41, POS_Time_DE12)
SELECT 
    TYPE, CREATED_AT, CARD_EXPENSE_ID, PARSE_JSON(DATA):Merch_City::string, PARSE_JSON(DATA):Merch_Country::string, PARSE_JSON(DATA):Merch_Name::string,
    PARSE_JSON(DATA):Txn_Desc::string, PARSE_JSON(DATA):MCC_Code::string, PARSE_JSON(DATA):MCC_Desc::string, PARSE_JSON(DATA):Trans_link::string,
    PARSE_JSON(DATA):Acquirer_id_DE32::string, PARSE_JSON(DATA):Merch_ID_DE42::string, PARSE_JSON(DATA):Merch_Postcode::string, PARSE_JSON(DATA):POS_Data_DE22::string,
    PARSE_JSON(DATA):POS_Termnl_DE41::string, PARSE_JSON(DATA):POS_Time_DE12::string
FROM 
    MY_DATABASE.KPI.Merchant_Refacto_Data WHERE TRANS_LINK IN (
    SELECT 
    TRANS_LINK
FROM 
    MY_DATABASE.KPI.Merchant_Refacto_Data 
WHERE TRANS_LINK IN (SELECT TRANS_LINK FROM MY_DATABASE.KPI.Merchant_Refacto_Data_Translink_Count WHERE NUM_Translink = 2) AND TYPE = 'AA'
GROUP BY TRANS_LINK
HAVING COUNT(TYPE) = 2
    );


                                                      
                                                      
-- Save all Translink Data  with only two PS
--Get the data 
--SELECT TRANS_LINK FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE TRANS_LINK IN (SELECT TRANS_LINK FROM MY_DATABASE.KPI.Merchant_Refacto_Data_Translink_Count WHERE NUM_Translink = 2) AND TYPE = 'PS' AND TYPE <> 'AA' LIMIT 10;

--Save the data
INSERT INTO MY_DATABASE.KPI.First_Merchant_Clean (Type, CREATED_AT, CARD_EXPENSE_ID, Merch_City, Merch_Country, Merch_Name, Txn_Desc, MCC_Code, MCC_Desc, Trans_link, Acquirer_id_DE32,
Merch_ID_DE42, Merch_Postcode, POS_Data_DE22, POS_Termnl_DE41, POS_Time_DE12)
SELECT 
    TYPE, CREATED_AT, CARD_EXPENSE_ID, PARSE_JSON(DATA):Merch_City::string, PARSE_JSON(DATA):Merch_Country::string, PARSE_JSON(DATA):Merch_Name::string,
    PARSE_JSON(DATA):Txn_Desc::string, PARSE_JSON(DATA):MCC_Code::string, PARSE_JSON(DATA):MCC_Desc::string, PARSE_JSON(DATA):Trans_link::string,
    PARSE_JSON(DATA):Acquirer_id_DE32::string, PARSE_JSON(DATA):Merch_ID_DE42::string, PARSE_JSON(DATA):Merch_Postcode::string, PARSE_JSON(DATA):POS_Data_DE22::string,
    PARSE_JSON(DATA):POS_Termnl_DE41::string, PARSE_JSON(DATA):POS_Time_DE12::string
FROM 
    MY_DATABASE.KPI.Merchant_Refacto_Data WHERE TRANS_LINK IN (
    SELECT 
    TRANS_LINK
FROM 
    MY_DATABASE.KPI.Merchant_Refacto_Data 
WHERE TRANS_LINK IN (SELECT TRANS_LINK FROM MY_DATABASE.KPI.Merchant_Refacto_Data_Translink_Count WHERE NUM_Translink = 2) AND TYPE = 'PS'
GROUP BY TRANS_LINK
HAVING COUNT(TYPE) = 2
    )
;

                                                      

SELECT 
    PARSE_JSON(DATA):Merch_ID_DE42::string AS Merch_ID_DE42, COUNT(PARSE_JSON(DATA):Merch_ID_DE42::string) AS NUM_Merch_ID_DE42 
FROM MY_DATABASE.KPI.Merchant_Refacto_Data WHERE CREATED_AT >= '2021-09-01' AND MERCH_COUNTRY IN ('FRA') GROUP BY PARSE_JSON(DATA):Merch_ID_DE42::string ORDER BY NUM_Merch_ID_DE42 DESC;


SELECT 
    TRANS_LINK
FROM 
    MY_DATABASE.KPI.Merchant_Refacto_Data 
WHERE TRANS_LINK IN (SELECT TRANS_LINK FROM MY_DATABASE.KPI.Merchant_Refacto_Data_Translink_Count WHERE NUM_Translink = 2) AND TYPE = 'AA'
GROUP BY TRANS_LINK
HAVING COUNT(TYPE) = 2
;

SELECT FROM MY_DATABASE.KPI.Trans_Link_AA_PS_Only;


SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE UPPER(TABLENAMEWITHSCHEMA) IN ('MASTERCARD_TRANSACTIONS', 'ADDRESSES', 'CARD_EXPENSES', 'COMPANIES', 'EXPENSES', 'EXPENSE_CATEGORIES');

SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES WHERE UPPER(TABS) IN ('MASTERCARD_TRANSACTIONS', 'ADDRESSES', 'CARD_EXPENSES', 'COMPANIES', 'EXPENSES', 'EXPENSE_CATEGORIES');


(SELECT  LOWER(TABLENAMEWITHSCHEMA) AS TABLENAMEWITHSCHEMA  FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES  WHERE TABLENAMEWITHSCHEMA NOT IN (SELECT TABLE_NAME FROM MY_DATABASE.PUBLIC.Tables_To_Run) AND TABLENAMEWITHSCHEMA NOT IN ('aaplop', 'oauth_access_tokens', 'kilometer_rate_periods', 'sso_configs', 'card_patterns_expense_categories', 'cards_expense_categories', 'cegid_ar_invoices', 'cegid_customers', 'cegid_payments', 'cegid_journal_transactions')) UNION (SELECT 'oauth_access_tokens' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC;

-- main
SELECT  LOWER(TABLENAMEWITHSCHEMA) AS TABLENAMEWITHSCHEMA  FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES  WHERE TABLENAMEWITHSCHEMA NOT IN (SELECT TABLE_NAME FROM MY_DATABASE.PUBLIC.Tables_To_Run) AND TABLENAMEWITHSCHEMA NOT IN ('aaplop', 'oauth_access_tokens', 'kilometer_rate_periods', 'sso_configs', 'card_patterns_expense_categories', 'cards_expense_categories', 'cegid_ar_invoices', 'cegid_customers', 'cegid_payments', 'cegid_journal_transactions','active_storage_attachments', 'active_storage_blobs', 'card_order_histories', 'oauth_access_grants', 'oauth_access_tokens') ORDER BY TABLENAMEWITHSCHEMA ASC;





-- Reduce Time
(SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('john_paul_call_plans',  'oauth_access_tokens' , 'roles', 'sso_configs', 'john_paul_calls', 'kilometer_rate_periods', 'generali_calls', 'user_profiles', 'fleet_whitelists', 'expense_categories', 'addresses')) UNION (SELECT 'business_codes' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC;


SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.ROLES;

ALTER TABLE MY_DATABASE.PUBLIC.BANK_ACCOUNTS_OLD  RENAME TO MY_DATABASE.OLD_TABLES.BANK_ACCOUNTS_OLD3;

SELECT MAX(ID::int) FROM MY_DATABASE.PUBLIC.INVOICE_LINES;

SELECT * FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES WHERE ID = '31039401';


SELECT MAX(ID::int) FROM MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTION_CORRECTIONS;

SELECT * FROM MY_DATABASE.PUBLIC.BILLING_INVOICE_LINES WHERE ID = 'ffffcabd-1c35-4089-af51-887841a616c4';

SELECT * FROM MY_DATABASE.PUBLIC.BANK_ACCOUNTS LIMIT 5;

UPDATE MY_DATABASE.PUBLIC.BANK_ACCOUNTS SET HOLDER = '**holder_val', UNIQUE_MANDATE_REFERENCE = 'ref_unique_mandate***', EXTERNAL_EXECUTIVE_OFFICER = '{some datas}' --WHERE CREATED_AT = '2023-02-08 17:30:53.000'
;


SELECT * FROM MY_DATABASE.PUBLIC.BANK_ACCOUNTS WHERE UPDATED_AT LIKE '2021-08-25%';

-- 2021-08-25 09:39:04.604415

SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES;
SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES;






SELECT ID, COUNT(ID) AS NUM_ID FROM MY_DATABASE.PUBLIC.BILLING_INVOICES GROUP BY ID having count(id)>1 ORDER BY NUM_ID DESC;

SELECT * FROM MY_DATABASE.PUBLIC.BILLING_INVOICES WHERE ID = 'abb436e6-e700-44ff-9341-4da6e053ad57';

/*
create or replace view MY_DATABASE.PUBLIC.TABLES_TO_RUN(
	TABLE_SCHEMA,
	TABLE_NAME,
	COLUMN_NAME
) as
*/

SELECT TABLE_NAME, column_name FROM(
SELECT 
    LOWER(tab.table_schema) AS table_schema, LOWER(tab.table_name) AS table_name, LOWER(inf_sch.column_name) AS column_name
FROM 
    information_schema.tables tab
INNER JOIN 
    information_schema.columns inf_sch 
ON    
    inf_sch.table_schema = tab.table_schema AND inf_sch.table_name = tab.table_name
INNER JOIN
    MY_DATABASE.PUBLIC.PUBLIC_TABLES pub_tab
ON 
    LOWER(tab.table_name) = LOWER(pub_tab.TABLENAMEWITHSCHEMA)
WHERE 
    tab.table_type = 'BASE TABLE' 
    --AND tab.table_schema = 'PUBLIC'
    --AND inf_sch.column_name LIKE '%UPDATED_AT%'
    --AND inf_sch.column_name = 'UPDATED_AT'
    AND inf_sch.column_name = 'CREATED_AT'
ORDER BY 
     tab.table_name ASC
)
WHERE TABLE_NAME IN (
(SELECT  LOWER(TABLENAMEWITHSCHEMA) AS TABLENAMEWITHSCHEMA  FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES  WHERE TABLENAMEWITHSCHEMA NOT IN (SELECT TABLE_NAME FROM MY_DATABASE.PUBLIC.Tables_To_Run) AND TABLENAMEWITHSCHEMA NOT IN ('aaplop', 'oauth_access_tokens', 'kilometer_rate_periods', 'sso_configs', 'card_patterns_expense_categories', 'cards_expense_categories', 'cegid_ar_invoices', 'cegid_customers', 'cegid_payments', 'cegid_journal_transactions')) UNION (SELECT 'oauth_access_tokens' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC
)
;


SELECT * FROM MY_DATABASE.PUBLIC.oauth_access_tokens LIMIT 10;


ALTER TABLE MY_DATABASE.PUBLIC.BILLING_PRODUCTS RENAME TO MY_DATABASE.OLD_TABLES.BILLING_PRODUCTS_OLD;
--ALTER TABLE MY_DATABASE.OLD_TABLES.BILLING_PRODUCTS_OLD  RENAME TO MY_DATABASE.PUBLIC.BILLING_PRODUCTS;



-- CONSENTS :: ID -> SELECT MAX(ID::int)
-- EXPENSE_ANALYTIC_CODE_GUESSES :: ID -> MAX(ID::int)
-- EXPENSE_BUSINESS_CODE_GUESSES :: ID -> MAX(ID::int)
-- MASTERCARD_INTERCHANGES :: ID -> MAX(ID::int)
-- EXPENSE_VATS :: ID -> MAX(ID::int)
-- INVOICE_LINES :: ID -> MAX(ID::int)
-- INVOICES :: ID -> MAX(ID::int)
-- KPIS :: ID -> MAX(ID::int)
-- MASTERCARD_TRANSACTION_CORRECTIONS :: ID -> MAX(ID::int)

-- LOYALTEK_TEXT_MESSAGES :: AT -> used Geofroy job and a context variable to switwch between CREATED_AT and AT
-- BILLING_INVOICE_LINES :: STARTED_AT 

-- BILLING_INVOICES_STRIPE_PAYMENTS
-- CARDS_TAGS
-- DISBURSEMENTS
-- EXPENSE_ATTENDEE_GUESSES
-- SSO_EMAIL_DOMAINS
-- SSO_LOGIN_DOMAINS

SELECT * FROM MY_DATABASE.OLD_TABLES.BILLING_PRODUCTS_OLD WHERE ID = '1ad0097a-ac94-4552-a22a-06afb20c7c2c';

SELECT ID, count(*) FROM MY_DATABASE.OLD_TABLES.BILLING_PRODUCTS_OLD GROUP BY ID HAVING COUNT(ID) >1;

SELECT * FROM MY_DATABASE.KPI.KPI WHERE END_AT = '2023-02-12';


SELECT MAX(END_AT) FROM MY_DATABASE.KPI.KPI;

Select * from SAS_APPS.MISCELLENEOUS_SAS.KILL_BILL_TRANSACTION ORDER BY CREATED_AT DESC;


SELECT * FROM MY_DATABASE.PUBLIC.Data_for_interchange ORDER BY ID::int ASC LIMIT 10;

SELECT COUNT(*) FROM MY_DATABASE.PUBLIC.Data_for_interchange;



--ID :-> 30798347   "GPS_POS_Data": "000"

SELECT length ('GPS_POS_Data');


/*
create or replace view MY_DATABASE.PUBLIC.DATA_FOR_INTERCHANGE(
	ID,
	EXPENSE_MONTH,
	TRANSACTION_TYPE,
	TRANSACTION_STATUS,
	DATA,
	SEQUENCE
) as
*/
SELECT 
    mc_trans.ID, LEFT(DATE_TRUNC(MONTH, mc_trans.AT), 10) AS expense_month, mc_trans.TRANSACTION_TYPE, mc_trans.TRANSACTION_STATUS, mc_trans.DATA, mc_trans.SEQUENCE 
FROM 
    MY_DATABASE.PUBLIC.MASTERCARD_TRANSACTIONS mc_trans 
WHERE 
    mc_trans.TRANSACTION_TYPE IN (16, 14, 5, 1)
    AND mc_trans.TRANSACTION_STATUS IN (19, 9, 1)
    AND expense_month = DATE_TRUNC(MONTH, TO_DATE(current_date))
    AND mc_trans.ID NOT IN (SELECT ID FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES_CALCULATED WHERE EXPENSE_MONTH = DATE_TRUNC(MONTH, TO_DATE(current_date)))
HAVING LENGTH(PARSE_JSON(DATA):GPS_POS_Data::string) >= 4
ORDER BY mc_trans.ID ASC;

-- Next ID with more than 3 GPS_POS_DATA. 30798348   30798378


SELECT * FROM MY_DATABASE.PUBLIC.TREEZOR_BENEFICIAL_OWNERS WHERE ID = '287f9ff9-06f5-4b7e-aa5d-8941980283f0';
SELECT * FROM MY_DATABASE.PUBLIC.BILLING_INVOICES WHERE ID = 'abb436e6-e700-44ff-9341-4da6e053ad57';





SELECT 
    --LOWER(tab.table_schema) AS table_schema, 
    LOWER(tab.table_name) AS table_name
    --, LOWER(inf_sch.column_name) AS column_name
FROM 
    information_schema.tables tab
INNER JOIN 
    information_schema.columns inf_sch 
ON    
    inf_sch.table_schema = tab.table_schema AND inf_sch.table_name = tab.table_name
INNER JOIN
    MY_DATABASE.PUBLIC.PUBLIC_TABLES pub_tab
ON 
    LOWER(tab.table_name) = LOWER(pub_tab.TABLENAMEWITHSCHEMA)
WHERE 
    tab.table_type = 'BASE TABLE' 
    --AND tab.table_schema = 'PUBLIC'
    --AND inf_sch.column_name LIKE '%UPDATED_AT%'
    --AND inf_sch.column_name = 'UPDATED_AT'
    AND inf_sch.column_name = 'ID'
    --AND inf_sch.column_name = 'CREATED_AT'
ORDER BY 
     tab.table_name ASC;

SELECT 
    LOWER(tab.table_name) AS table_name
FROM 
    information_schema.tables tab
WHERE 
    tab.table_type = 'BASE TABLE' 
    AND tab.table_schema = 'OLD_TABLES' ORDER BY table_name ASC;
SELECT LOWER(tab.table_name) AS table_name FROM information_schema.tables tab WHERE tab.table_type = 'BASE TABLE' AND tab.table_schema = 'OLD_TABLES' ORDER BY table_name ASC;    

-- ALTER TABLE MY_DATABASE.OLD_TABLES.treezor_beneficial_owners_rmv_dup RENAME TO MY_DATABASE.PUBLIC.treezor_beneficial_owners;

SELECT ID, count(*) AS NUM_ID FROM MY_DATABASE.PUBLIC.BILLING_INVOICE_LINES GROUP BY ID HAVING COUNT(ID) >1 ORDER BY NUM_ID DESC;

SELECT * FROM MY_DATABASE.PUBLIC.billing_invoices_stripe_payments WHERE ID = '5ec9cc6d-c4e0-418b-9c69-e5cc4a7a8893';


ALTER TABLE MY_DATABASE.PUBLIC.nitecrest_orders RENAME TO MY_DATABASE.OLD_TABLES.nitecrest_orders_rmv;
ALTER TABLE MY_DATABASE.PUBLIC.nitecrest_orders__rmv_dup RENAME TO MY_DATABASE.PUBLIC.nitecrest_orders;

-- MY_DATABASE.OLD_TABLES.IMPORTS_RMV_DUP
ALTER TABLE MY_DATABASE.PUBLIC.IMPORTS RENAME TO MY_DATABASE.OLD_TABLES.IMPORTS_old_imports;
ALTER TABLE MY_DATABASE.OLD_TABLES.IMPORTS_RMV_DUP RENAME TO MY_DATABASE.PUBLIC.IMPORTS;



--LOYALTEK_CALLS__RMV_DUP
-- LOYALTEK_CALLS  loyaltek_calls
-- EXPENSE_FUEL_VOLUME_GUESSES__RMV_DUP  expense_fuel_volume_guesses
--cards_tags

--TABLENAMEWITHSCHEMA
--TABS


INSERT INTO MY_DATABASE.PUBLIC.PUBLIC_TABLES (TABLENAMEWITHSCHEMA) VALUES ('loyaltek_calls');

--DELETE FROM MY_DATABASE.PUBLIC.cards_tags WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.cards_tags GROUP BY ID HAVING COUNT(ID) >1);

SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES;

SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES;

--DELETE FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES WHERE TABS IN ('loyaltek_calls', 'expense_fuel_volume_guesses');

DELETE FROM MY_DATABASE.PUBLIC.cards_tags WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.cards_tags GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.card_migrations WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.card_migrations GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.card_order_items WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.card_order_items GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.card_shippings WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.card_shippings GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.churns WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.churns GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.comments WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.comments GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.company_billing_histories WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.company_billing_histories GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.company_billing_products WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.company_billing_products GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.company_vat_rates WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.company_vat_rates GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.consents WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.consents GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.departments WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.departments GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.department_user_profiles WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.department_user_profiles GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.disbursements WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.disbursements GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.disbursement_invoices WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.disbursement_invoices GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.disputes WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.disputes GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.dispute_events WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.dispute_events GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.driver_codes WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.driver_codes GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.employee_expenses WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.employee_expenses GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.expense_analytic_code_guesses WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.expense_analytic_code_guesses GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.expense_attendee_guesses WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.expense_attendee_guesses GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.expense_business_code_guesses WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.expense_business_code_guesses GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.expense_expense_category_guesses WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.expense_expense_category_guesses GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.expense_exports WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.expense_exports GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.expense_export_templates WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.expense_export_templates GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.expense_service_stations WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.expense_service_stations GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.expense_step_records WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.expense_step_records GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.expense_title_guesses WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.expense_title_guesses GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.expense_vats WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.expense_vats GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.external_expenses WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.external_expenses GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.fintronik_api_calls WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.fintronik_api_calls GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.flying_blue_accounts WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.flying_blue_accounts GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.flying_blue_transaction_calls WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.flying_blue_transaction_calls GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.generali_calls WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.generali_calls GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.groups WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.groups GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.identities WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.identities GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.imports WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.imports GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.inbound_emails WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.inbound_emails GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.inbound_sms WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.inbound_sms GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.insurances WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.insurances GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.insurance_exports WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.insurance_exports GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.invoices WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.invoices GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.invoice_lines WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.invoice_lines GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.kpis WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.kpis GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.kybs WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.kybs GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.kyc_reviews WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.kyc_reviews GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.licenses WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.licenses GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.manager_user_profiles WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.manager_user_profiles GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.manual_expenses WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.manual_expenses GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.mastercard_interchanges WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.mastercard_interchanges GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.mastercard_transaction_corrections WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.mastercard_transaction_corrections GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.merchant_categories WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.merchant_categories GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.merchant_category_expense_category_templates WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.merchant_category_expense_category_templates GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.notifications WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.notifications GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.oauth_applications WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.oauth_applications GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.plans WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.plans GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.rebills WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.rebills GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.receipts WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.receipts GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.receipt_journals WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.receipt_journals GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.receipt_ocrs WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.receipt_ocrs GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.reimbursements WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.reimbursements GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.reminder_records WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.reminder_records GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.security_codes WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.security_codes GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.security_code_usages WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.security_code_usages GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.settings WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.settings GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.shortened_urls WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.shortened_urls GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.stripe_refunds WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.stripe_refunds GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.tags WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.tags GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.temporary_rules WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.temporary_rules GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.treezor_accounts WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.treezor_accounts GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.treezor_beneficial_owners WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.treezor_beneficial_owners GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.treezor_documents WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.treezor_documents GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.treezor_payins WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.treezor_payins GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.treezor_payin_refunds WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.treezor_payin_refunds GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.treezor_payouts WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.treezor_payouts GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.two_factors WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.two_factors GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.user_profile_responsibilities WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.user_profile_responsibilities GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.vehicle_documents WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.vehicle_documents GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.virtual_card_requests WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.virtual_card_requests GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.visa_migrations WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.visa_migrations GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.webhooks WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.webhooks GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.webhook_logs WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.webhook_logs GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC.workflow_steps WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.workflow_steps GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC._cards_expense_categories WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC._cards_expense_categories GROUP BY ID HAVING COUNT(ID) >1);
DELETE FROM MY_DATABASE.PUBLIC._card_patterns_expense_categories WHERE ID IN (SELECT ID FROM MY_DATABASE.PUBLIC._card_patterns_expense_categories GROUP BY ID HAVING COUNT(ID) >1);



----



-----

SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.EXPENSE_STEP_RECORDS;

SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.LOYALTEK_CALLS__RMV_DUP;


SELECT COUNT(ID) FROM MY_DATABASE.PUBLIC.LOYALTEK_CALLS__RMV_DUP; --400000


SELECT * FROM MY_DATABASE.PUBLIC.LOYALTEK_CALLS__RMV_DUP WHERE CREATED_AT > '2021-10-21 12:45:27.232' ORDER BY CREATED_AT ASC;


SELECT table_catalog, 
       table_name, 
       active_bytes / 1024 AS storage_usage_MB 
FROM   INFORMATION_SCHEMA.table_storage_metrics 
where TABLE_CATALOG in ('TEST_DB');

-- CREATE OR REPLACE VIEW MY_DATABASE.OLD_TABLES.Tables_to_migrate AS
select DISTINCT tab.table_schema,
       LOWER(tab.table_name) AS table_name,
       round(tab.bytes/1024/1024, 3) as table_size
from 
 information_schema.tables tab
INNER JOIN 
    information_schema.columns inf_sch 
ON    
    inf_sch.table_schema = tab.table_schema AND inf_sch.table_name = tab.table_name
where LOWER(tab.table_name) IN (SELECT DISTINCT TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.ALL_PUB_TABLES) -- AND TABLE_SIZE > 0.007
AND inf_sch.column_name != 'CREATED_AT'
order by table_size DESC;

SELECT * FROM MY_DATABASE.OLD_TABLES.Tables_to_migrate;


--['ACCOUNT_MOVEMENTS', 'AHOY_MESSAGES', 'ACCOUNTING_LINES', 'CARD_EXPENSES', 'ADDRESSES']


--TRUNCATE TABLE STATION_SERVICE.PUBLIC.VIAMICHELIN_STATIONS;

/*
Table: VIAMICHELIN_STATIONS
Created on: 2/23/2023, 5:24:57 PM
Owner: SYSADMIN
Rows: 52,168
*/


Select * from SAS_APPS.MISCELLENEOUS_SAS.KILL_BILL_TRANSACTION ;




SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.NITECREST_ORDERS; -- 2023-10-01 00:00:00.000




DROP TABLE MY_DATABASE.OLD_TABLES.AC_BLC_TEST_DOUBLE_QUOTES ADD COLUMN test_col varchar null;

ALTER TABLE MY_DATABASE.OLD_TABLES.AC_BLC_TEST_DOUBLE_QUOTES DROP COLUMN test_col;


SELECT * FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES;

SELECT * FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES;

-- INSERT INTO MY_DATABASE.PUBLIC.PUBLIC_TABLES (TABLENAMEWITHSCHEMA) VALUES ('loyaltek_calls');
-- DELETE FROM MY_DATABASE.PUBLIC.SPECIAL_TABLES WHERE TABS = 'loyaltek_calls';
-- DELETE FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES WHERE TABLENAMEWITHSCHEMA = 'visa_migrations';

ALTER TABLE MY_DATABASE.PUBLIC.IMPORTS RENAME TO MY_DATABASE.OLD_TABLES.IMPORTS___RMV_DUP_old;
ALTER TABLE MY_DATABASE.PUBLIC_CLONE.IMPORTS_CLONE RENAME TO MY_DATABASE.PUBLIC.IMPORTS;

ALTER TABLE MY_DATABASE.PUBLIC.MANAGER_USER_PROFILES RENAME TO MY_DATABASE.OLD_TABLES.MANAGER_USER_PROFILES____RMV_DUPold;
ALTER TABLE MY_DATABASE.PUBLIC.MANAGER_USER_PROFILES__RMV_DUP RENAME TO MY_DATABASE.PUBLIC.MANAGER_USER_PROFILES;


ALTER TABLE MY_DATABASE.PUBLIC.BANK_ACCOUNTS RENAME TO MY_DATABASE.OLD_TABLES.BANK_ACCOUNTS___RMV_____old__DUP;
ALTER TABLE MY_DATABASE.PUBLIC.BANK_ACCOUNTS__RMV_DUP RENAME TO MY_DATABASE.PUBLIC.BANK_ACCOUNTS;

ALTER TABLE MY_DATABASE.PUBLIC.IDENTITIES RENAME TO MY_DATABASE.OLD_TABLES.IDENTITIES___RMV_____old__DUP;
ALTER TABLE MY_DATABASE.PUBLIC.IDENTITIES__RMV_DUP RENAME TO MY_DATABASE.PUBLIC.IDENTITIES;

PUBLIC_CLONE.IMPORTS
SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.LOYALTEK_CALLS;


(SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('john_paul_call_plans',  'oauth_access_tokens' , 'roles', 'sso_configs', 'john_paul_calls', 'kilometer_rate_periods', 'generali_calls', 'user_profiles', 'fleet_whitelists', 'expense_categories', 'addresses', 'manual_expenses')) UNION (SELECT 'business_codes' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC;

-- DROP TABLE MY_DATABASE.PUBLIC.USERS__RMV;

CREATE TABLE IF NOT EXISTS MY_DATABASE.PUBLIC.users__rmv(
	email varchar NULL,
	encrypted_password varchar NULL,
	reset_password_token varchar NULL,
	reset_password_sent_at timestamp NULL,
	remember_created_at timestamp NULL,
	sign_in_count integer NULL,
	current_sign_in_at timestamp NULL,
	last_sign_in_at timestamp NULL,
	current_sign_in_ip varchar NULL,
	last_sign_in_ip varchar NULL,
	confirmation_token varchar NULL,
	confirmed_at timestamp NULL,
	confirmation_sent_at timestamp NULL,
	unconfirmed_email varchar NULL,
	created_at timestamp NULL,
	updated_at timestamp NULL,
	firstname varchar NULL,
	lastname varchar NULL,
	id varchar  NULL,
	deleted_at timestamp NULL,
	birthdate date NULL,
	locale varchar NULL,
	preferences variant NOT NULL DEFAULT '{}'::variant,
	avatar_file_name varchar NULL,
	avatar_content_type varchar NULL,
	avatar_file_size integer NULL,
	avatar_updated_at timestamp NULL,
	read_notifications_at timestamp NULL,
	origin varchar NULL,
	sign_in_token varchar NULL,
	sign_in_token_sent_at varchar NULL,
	stripe_customer_id varchar NULL,
	PRIMARY KEY (id)
);





--DROP TABLE MY_DATABASE.OLD_TABLES.ACCOUNT;

SELECT  LOWER(TABLENAMEWITHSCHEMA) AS TABLENAMEWITHSCHEMA  FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES  WHERE TABLENAMEWITHSCHEMA NOT IN (SELECT TABLE_NAME FROM MY_DATABASE.PUBLIC.Tables_To_Run) AND TABLENAMEWITHSCHEMA NOT IN ('aaplop', 'oauth_access_tokens', 'kilometer_rate_periods', 'sso_configs', 'card_patterns_expense_categories', 'cards_expense_categories', 'cegid_ar_invoices', 'cegid_customers', 'cegid_payments', 'cegid_journal_transactions','active_storage_attachments', 'active_storage_blobs', 'card_order_histories', 'oauth_access_grants', 'oauth_access_tokens', 'consents', 'expense_analytic_code_guesses', 'expense_business_code_guesses', 'expense_vats', 'invoice_lines', 'invoices', 'kpis', 'mastercard_interchanges', 'mastercard_transaction_corrections', 'loyaltek_text_messages', 'billing_invoice_lines', '_card_patterns_expense_categories', '_cards_expense_categories','billing_invoices_stripe_payments__rmv_dup') ORDER BY TABLENAMEWITHSCHEMA ASC;


SELECT ROUND(SUM(AMOUNT/-1), 2) FROM MY_DATABASE.PUBLIC.EXPENSES WHERE INVOICE_COUNTRY = 'AUT' AND CREATED_AT BETWEEN '2023-01-01' AND '2023-01-31';



SELECT DISTINCT COUNTRY FROM MY_DATABASE.PUBLIC.ADDRESSES;
-- Company
-- MastercardMerchant





(SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('john_paul_call_plans',  'oauth_access_tokens' , 'roles', 'sso_configs', 'john_paul_calls', 'kilometer_rate_periods', 'generali_calls', 'user_profiles', 'fleet_whitelists', 'expense_categories', 'addresses', 'manual_expenses', 'ondorse_applications')) UNION (SELECT 'business_codes' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC;



SELECT 
    LOWER(tab.table_schema) AS table_schema, LOWER(tab.table_name) AS table_name, LOWER(inf_sch.column_name) AS column_name
FROM 
    information_schema.tables tab
INNER JOIN 
    information_schema.columns inf_sch 
ON    
    inf_sch.table_schema = tab.table_schema AND inf_sch.table_name = tab.table_name
INNER JOIN
    MY_DATABASE.PUBLIC.PUBLIC_TABLES pub_tab
ON 
    LOWER(tab.table_name) = LOWER(pub_tab.TABLENAMEWITHSCHEMA)
WHERE 
    tab.table_type = 'BASE TABLE' 
    AND tab.table_schema = 'PUBLIC'
    --AND inf_sch.column_name LIKE '%UPDATED_AT%'
    --AND inf_sch.column_name <> 'UPDATED_AT'
    AND inf_sch.column_name <> 'CREATED_AT'
ORDER BY 
     tab.table_name ASC;


SELECT table_name
FROM information_schema.tables
WHERE table_schema = 'PUBLIC' 
  AND table_type = 'BASE TABLE'
  AND table_name NOT IN (
    SELECT table_name
    FROM information_schema.columns
    WHERE column_name = 'ID' 
  )
  ;

with all_tabs as (SHOW TABLES IN MY_DATABASE.PUBLIC)
SELECT DISTINCT "name" FROM all_tabs;

SHOW TABLES IN MY_DATABASE.PUBLIC; 

SELECT DISTINCT TABLE_NAME
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'PUBLIC' -- Replace with your desired schema name
  AND TABLE_CATALOG = 'MY_DATABASE'; -- Replace with your desired database name
  
  
  
-- SELECT DISTINCT LOWER(TABLE_NAME) as TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'PUBLIC' AND TABLE_CATALOG = 'MY_DATABASE' AND TABLE_TYPE = 'BASE TABLE' ORDER BY LOWER(TABLE_NAME) ASC;


--ALTER TABLE MY_DATABASE.PUBLIC._CARD_PATTERNS_EXPENSE_CATEGORIES RENAME TO MY_DATABASE.OLD_TABLES._CARD_PATTERNS_EXPENSE_CATEGORIES;


-- DELETE FROM STATION_SERVICE.PUBLIC.API_REQUESTS_CLONED WHERE ID IN ('');




(SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('john_paul_call_plans',  'oauth_access_tokens' , 'roles', 'sso_configs', 'john_paul_calls', 'kilometer_rate_periods', 'generali_calls', 'user_profiles', 'fleet_whitelists', 'expense_categories', 'addresses', 'manual_expenses', 'ondorse_applications')) UNION (SELECT 'business_codes' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC;

(SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('imports', 'john_paul_call_plans',  'oauth_access_tokens' , 'roles', 'sso_configs', 'john_paul_calls', 'kilometer_rate_periods', 'generali_calls', 'user_profiles', 'fleet_whitelists', 'expense_categories', 'addresses', 'manual_expenses', 'ondorse_applications')) UNION (SELECT 'business_codes' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC;


(SELECT TABLE_NAME AS TABLENAMEWITHSCHEMA FROM MY_DATABASE.PUBLIC.Tables_To_Run WHERE TABLENAMEWITHSCHEMA NOT IN ('imports', 'john_paul_call_plans',  'oauth_access_tokens' , 'roles', 'sso_configs', 'john_paul_calls', 'kilometer_rate_periods', 'generali_calls', 'user_profiles', 'fleet_whitelists', 'expense_categories', 'addresses', 'manual_expenses', 'ondorse_applications')) UNION (SELECT 'business_codes' AS TABLENAMEWITHSCHEMA) ORDER BY TABLENAMEWITHSCHEMA ASC;


SELECT * FROM MY_DATABASE.PUBLIC.ADMINS WHERE EMAIL = 'jb.durand@my_company.com' OR EMAIL = 'jb.durand@my_company.com';


UPDATE MY_DATABASE.PUBLIC_CLONE.ACCOUNT_CONTACT_BALANCES SET ACCOUNT_ID = 'Merging' WHERE CONTACT_BALANCE_ID = '2b2d5ad3-05ef-4d64-9f24-c8fafa9f7ad7';
-- Acc_ID -> 0eba9dda-5afd-47e9-9470-cad24bf572b2 Cnt_ID -> 1918bda1-4107-439d-8d68-e68212e97c75

SELECT * FROM MY_DATABASE.PUBLIC_CLONE.ACCOUNT_CONTACT_BALANCES WHERE CONTACT_BALANCE_ID = '1918bda1-4107-439d-8d68-e68212e97c75';;


SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC_CLONE.ACCOUNT_CONTACT_BALANCES;
-- 2021-05-27 11:50:53.382

SELECT * FROM MY_DATABASE.PUBLIC_CLONE.ACCOUNT_CONTACT_BALANCES WHERE CREATED_AT =  TO_TIMESTAMP('2021-05-27 11:50:53.382');

SELECT * FROM MY_DATABASE.PUBLIC_CLONE.ACCOUNT_CONTACT_BALANCES WHERE CREATED_AT = TO_TIMESTAMP('2021-05-27 11:50:53.382', 'YYYY-MM-DD HH24:MI:SS.FF3');

SELECT * FROM MY_DATABASE.PUBLIC_CLONE.ACCOUNT_CONTACT_BALANCES WHERE CREATED_AT::string =  '2021-05-27 11:50:53.382';

SELECT  LOWER(TABLENAMEWITHSCHEMA) AS TABLENAMEWITHSCHEMA  FROM MY_DATABASE.PUBLIC.PUBLIC_TABLES  WHERE TABLENAMEWITHSCHEMA NOT IN (SELECT TABLE_NAME FROM MY_DATABASE.PUBLIC.Tables_To_Run) AND TABLENAMEWITHSCHEMA NOT IN ('aaplop', 'oauth_access_tokens', 'kilometer_rate_periods', 'sso_configs', 'card_patterns_expense_categories', 'cards_expense_categories', 'cegid_ar_invoices', 'cegid_customers', 'cegid_payments', 'cegid_journal_transactions','active_storage_attachments', 'active_storage_blobs', 'card_order_histories', 'oauth_access_grants', 'oauth_access_tokens', 'consents', 'expense_analytic_code_guesses', 'expense_business_code_guesses', 'expense_vats', 'invoice_lines', 'invoices', 'kpis', 'mastercard_interchanges', 'mastercard_transaction_corrections', 'loyaltek_text_messages', 'billing_invoice_lines', '_card_patterns_expense_categories', '_cards_expense_categories','billing_invoices_stripe_payments__rmv_dup') ORDER BY TABLENAMEWITHSCHEMA ASC;



DROP TABLE MY_DATABASE.PUBLIC_CLONE.account_contact_balances_clone;

ALTER TABLE MY_DATABASE.PUBLIC_CLONE.ACCOUNT_MOVEMENTS RENAME TO MY_DATABASE.PUBLIC_CLONE.ACCOUNT_MOVEMENTS_OLD;

SELECT MAX("CREATED_AT") AS NUM_CODES FROM MY_DATABASE.PUBLIC_CLONE.ARCHIVAL_TRANSFERS_RECEIPTS;
SELECT * FROM MY_DATABASE.PUBLIC_CLONE.ARCHIVAL_TRANSFERS_RECEIPTS WHERE CREATED_AT::string > '2021-12-30';

SELECT "ID", COUNT("ID") AS NUM_CODES FROM MY_DATABASE.PUBLIC_CLONE.active_storage_variant_records GROUP BY "ID" HAVING NUM_CODES >1 ORDER BY NUM_CODES DESC;






SELECT * FROM MY_DATABASE.PUBLIC_CLONE.MIGRATION_MONITORING WHERE TABLE_NAME IN ('account_contact_balances', 'account_direct_debits', 'account_express_loads');
SELECT MAX(STARTED_AT) FROM MY_DATABASE.PUBLIC_CLONE.billing_invoice_lines;


SELECT COUNT(*) FROM MY_DATABASE.PUBLIC_CLONE.ACCOUNTING_LINES;
DROP TABLE MY_DATABASE.PUBLIC_CLONE.ACCOUNTING_LINES;

USE DATABASE MY_DATABASE;
CREATE TEMPORARY STAGE main_migration_stage;

SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC_CLONE.ACCOUNTING_LINES;

SELECT table_name FROM information_schema.columns WHERE table_schema = 'public' AND column_name IN ('created_at', 'id') AND table_name NOT IN ('expense_exports', 'accounting_lines') GROUP BY table_name HAVING COUNT(DISTINCT column_name) = 2;




(SELECT table_name FROM information_schema.columns WHERE table_schema = 'public' AND column_name IN ('id') GROUP BY table_name HAVING COUNT(DISTINCT column_name) = 1);




/*
ID,
TITLE,
CURRENCY,
AT,
CREATED_AT,
UPDATED_AT,
DELETED_AT,
COMPLETED_AT,
AMOUNT,
AMOUNT_CURRENCY,
AMOUNT_FEES,
BILLABLE,
RECEIPT_PAPER,
RECEIPT_CODE,
STEP,
COMPANY_ID,
INVOICE_COUNTRY,
EXPENSE_TYPE,
REBILL_ID,
USER_PROFILE_ID,
SOURCE_ID,
SOURCE_TYPE,
EDITABLE,
TIMEZONE,
ACCOUNTABILITY,
EXPENSE_CATEGORY_ID,
AMOUNT_FX_DIFF,
REIMBURSEMENT_ID,
DEPARTMENT_ID,
BUSINESS_CODE_ID,
RECEIPT_STATUS,
SUPPLIER_ID,
VEHICLE_ID,
VEHICLE_KILOMETERS,
VEHICLE_FUEL_VOLUME,
VAT_NUMBER,
DRIVER_CODE_ID,
AMOUNT_TOURIST_TAX,
VAT_CONSISTENCY_CHECK,
*/

TRUNCATE TABLE MY_DATABASE.PUBLIC_CLONE.EXPENSES;

SELECT MIN(CREATED_AT) FROM MY_DATABASE.PUBLIC_CLONE.EXPENSES; -- 2021-03-24 21:48:45.552

INSERT INTO MY_DATABASE.PUBLIC_CLONE.EXPENSES (
ID,
TITLE,
CURRENCY,
"AT",
CREATED_AT,
UPDATED_AT,
DELETED_AT,
COMPLETED_AT,
AMOUNT,
AMOUNT_CURRENCY,
AMOUNT_FEES,
BILLABLE,
RECEIPT_PAPER,
RECEIPT_CODE,
STEP,
COMPANY_ID,
INVOICE_COUNTRY,
EXPENSE_TYPE,
REBILL_ID,
USER_PROFILE_ID,
SOURCE_ID,
SOURCE_TYPE,
EDITABLE,
TIMEZONE,
ACCOUNTABILITY,
EXPENSE_CATEGORY_ID,
AMOUNT_FX_DIFF,
DEPARTMENT_ID,
BUSINESS_CODE_ID,
RECEIPT_STATUS,
SUPPLIER_ID,
VEHICLE_ID,
VEHICLE_KILOMETERS,
VEHICLE_FUEL_VOLUME,
VAT_NUMBER
)
SELECT
ID,
TITLE,
CURRENCY,
"AT",
CREATED_AT,
UPDATED_AT,
DELETED_AT,
COMPLETED_AT,
AMOUNT,
AMOUNT_CURRENCY,
AMOUNT_FEES,
BILLABLE,
RECEIPT_PAPER,
RECEIPT_CODE,
STEP,
COMPANY_ID,
INVOICE_COUNTRY,
EXPENSE_TYPE,
REBILL_ID,
USER_PROFILE_ID,
SOURCE_ID,
SOURCE_TYPE,
EDITABLE,
TIMEZONE,
ACCOUNTABILITY,
EXPENSE_CATEGORY_ID,
AMOUNT_FX_DIFF,
DEPARTMENT_ID,
BUSINESS_CODE_ID,
RECEIPT_STATUS,
SUPPLIER_ID,
VEHICLE_ID,
VEHICLE_KILOMETERS,
VEHICLE_FUEL_VOLUME,
VAT_NUMBER
FROM MY_DATABASE.PUBLIC.EXPENSES ORDER BY CREATED_AT ASC LIMIT 10;

SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.EXPENSES;
-- REIMBURSEMENT_ID, DRIVER_CODE_ID, AMOUNT_TOURIST_TAX, VAT_CONSISTENCY_CHECK



--TRUNCATE TABLE MY_DATABASE.PUBLIC_CLONE.EXPENSES;

SELECT MIN(CREATED_AT) FROM MY_DATABASE.PUBLIC_CLONE.EXPENSES; -- 2021-03-24 21:48:45.552

INSERT INTO MY_DATABASE.PUBLIC_CLONE.EXPENSES (
ID,
TITLE,
CURRENCY,
"AT",
CREATED_AT,
UPDATED_AT,
DELETED_AT,
COMPLETED_AT,
AMOUNT,
AMOUNT_CURRENCY,
AMOUNT_FEES,
BILLABLE,
RECEIPT_PAPER,
RECEIPT_CODE,
STEP,
COMPANY_ID,
INVOICE_COUNTRY,
EXPENSE_TYPE,
REBILL_ID,
USER_PROFILE_ID,
SOURCE_ID,
SOURCE_TYPE,
EDITABLE,
TIMEZONE,
ACCOUNTABILITY,
EXPENSE_CATEGORY_ID,
AMOUNT_FX_DIFF,
DEPARTMENT_ID,
BUSINESS_CODE_ID,
RECEIPT_STATUS,
SUPPLIER_ID,
VEHICLE_ID,
VEHICLE_KILOMETERS,
VEHICLE_FUEL_VOLUME,
VAT_NUMBER
)
SELECT
ID,
TITLE,
CURRENCY,
"AT",
CREATED_AT,
UPDATED_AT,
DELETED_AT,
COMPLETED_AT,
AMOUNT,
AMOUNT_CURRENCY,
AMOUNT_FEES,
BILLABLE,
RECEIPT_PAPER,
RECEIPT_CODE,
STEP,
COMPANY_ID,
INVOICE_COUNTRY,
EXPENSE_TYPE,
REBILL_ID,
USER_PROFILE_ID,
SOURCE_ID,
SOURCE_TYPE,
EDITABLE,
TIMEZONE,
ACCOUNTABILITY,
EXPENSE_CATEGORY_ID,
AMOUNT_FX_DIFF,
DEPARTMENT_ID,
BUSINESS_CODE_ID,
RECEIPT_STATUS,
SUPPLIER_ID,
VEHICLE_ID,
VEHICLE_KILOMETERS,
VEHICLE_FUEL_VOLUME,
VAT_NUMBER
FROM MY_DATABASE.PUBLIC.EXPENSES ORDER BY CREATED_AT ASC;




UPDATE 
    MY_DATABASE.PUBLIC_CLONE.EXPENSES exp
SET 
    exp.REIMBURSEMENT_ID = exp_fx.REIMBURSEMENT_ID, exp.DRIVER_CODE_ID = exp_fx.DRIVER_CODE_ID, exp.AMOUNT_TOURIST_TAX = exp_fx.AMOUNT_TOURIST_TAX, 
    exp.VAT_CONSISTENCY_CHECK = exp_fx.VAT_CONSISTENCY_CHECK
FROM 
    MY_DATABASE.PUBLIC_CLONE.expense_fix_1 exp_fx
WHERE exp.ID = exp_fx.ID;



-- DROP TABLE MY_DATABASE.PUBLIC_CLONE.expense_fix_1; 
CREATE TABLE MY_DATABASE.PUBLIC_CLONE.expense_fix (
    ID varchar,  
    REIMBURSEMENT_ID varchar, 
    DRIVER_CODE_ID varchar, 
    AMOUNT_TOURIST_TAX decimal(7,2), 
    VAT_CONSISTENCY_CHECK boolean
);

CREATE TABLE MY_DATABASE.PUBLIC_CLONE.expense_fix_1 (
    ID varchar,  
    REIMBURSEMENT_ID varchar, 
    DRIVER_CODE_ID varchar, 
    AMOUNT_TOURIST_TAX decimal(7,2), 
    VAT_CONSISTENCY_CHECK boolean,
    CREATED_AT varchar
);


-- a8edbe13-fa03-459f-ab95-0f95c7227e35,,,0.00,false

SELECT * FROM MY_DATABASE.PUBLIC.EXPENSES WHERE ID = 'a8edbe13-fa03-459f-ab95-0f95c7227e35';


SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC_CLONE.EXPENSE_FIX_1 ;

SELECT * FROM MY_DATABASE.PUBLIC_CLONE.EXPENSE_FIX_1 WHERE CREATED_AT = '2023-06-16 16:09:44.344';

-- DELETE FROM MY_DATABASE.PUBLIC_CLONE.EXPENSE_FIX_1 WHERE CREATED_AT IN (SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC_CLONE.EXPENSE_FIX_1);

-- 2023-06-16 16:09:44.344


-- 2023-06-14 12:12:40.947000


SELECT * FROM MY_DATABASE.PUBLIC_CLONE.suppliers WHERE CREATED_AT >= '2023-06-20 16:27:46.553156';


SELECT * FROM MY_DATABASE.PUBLIC_CLONE.email_validations WHERE ID >= 'ffff9df4-0657-47fc-af72-392f77181e91';


SELECT * FROM MY_DATABASE.PUBLIC.contacts LIMIT 3;


UPDATE MY_DATABASE.PUBLIC_CLONE.suppliers SET NAME = 'Lorem ipsum';

-- WHITELISTED_IBANS, BALANCE




SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC_CLONE.ACCOUNTING_LINES;

SELECT * FROM MY_DATABASE.PUBLIC.ACCOUNTING_LINES WHERE CREATED_AT > '2023-05-23 09:34:24.374' ORDER BY CREATED_AT ASC;


SELECT * FROM MY_DATABASE.PUBLIC_CLONE.ACCOUNTING_LINES WHERE CREATED_AT > '2023-05-23 09:34:24.374' ORDER BY CREATED_AT ASC;


INSERT INTO MY_DATABASE.PUBLIC_CLONE.LOYALTEK_CALLS(
    ID, METHOD, SENDERABLE_TYPE, SENDERABLE_ID, MESSAGE, CREATED_AT, UPDATED_AT, RESPONSE, CARD_ID
)
SELECT 
    ID, METHOD, SENDERABLE_TYPE, SENDERABLE_ID, MESSAGE, CREATED_AT, UPDATED_AT, RESPONSE, CARD_ID
FROM MY_DATABASE.PUBLIC.LOYALTEK_CALLS WHERE CREATED_AT > '2020-05-04 15:28:48.802' ORDER BY CREATED_AT ASC;

SELECT ACCOUNT_TYPE, NULLIF(CARD_TOKEN::number, 01010) AS CARD_TOKEN, JOURNAL_TYPE, ID, VAT_RATE,VAT_AMOUNT FROM MY_DATABASE.PUBLIC.ACCOUNTING_LINES WHERE CREATED_AT > '2023-05-23 09:34:24.374' AND CARD_TOKEN IS NULL LIMIT 10;

INSERT INTO MY_DATABASE.PUBLIC_CLONE.ACCOUNTING_LINES(
       ID,EXPENSE_ID,PAID_AT,ACCOUNTED_AT,JOURNAL_TYPE,JOURNAL_NAME,DOCUMENT_NUMBER,USER_CODE,CARD_TOKEN,MERCHANT_NAME,ACCOUNT_TYPE,GENERAL_ACCOUNT,AUXILIARY_ACCOUNT,TITLE,BUSINESS_CODE,ANALYTIC_CODES,AMOUNT,CURRENCY,CREATED_AT,UPDATED_AT,USER_ANALYTIC_CODE,ACCOUNTING_EXPORT_ID,VAT_CODE,DEPARTMENT_CODE,VAT_RATE,VAT_AMOUNT
)
SELECT 
       COALESCE(ID::number, 01010) AS ID,EXPENSE_ID,PAID_AT,ACCOUNTED_AT, COALESCE(JOURNAL_TYPE::number, 01010) AS JOURNAL_TYPE ,JOURNAL_NAME,DOCUMENT_NUMBER,USER_CODE, COALESCE(CARD_TOKEN::number, 01010) AS CARD_TOKEN,MERCHANT_NAME, COALESCE(ACCOUNT_TYPE::number, 01010) AS ACCOUNT_TYPE, GENERAL_ACCOUNT,AUXILIARY_ACCOUNT,TITLE,BUSINESS_CODE,ANALYTIC_CODES, AMOUNT::number,CURRENCY,CREATED_AT,UPDATED_AT,USER_ANALYTIC_CODE,ACCOUNTING_EXPORT_ID,VAT_CODE,DEPARTMENT_CODE, COALESCE(VAT_RATE::number, 01010) AS VAT_RATE, COALESCE(VAT_AMOUNT::number, 01010) AS VAT_AMOUNT
FROM MY_DATABASE.PUBLIC.ACCOUNTING_LINES WHERE CREATED_AT > '2023-05-23 09:34:24.374' ORDER BY CREATED_AT ASC LIMIT 500000;


-- ACCOUNT_TYPE, CARD_TOKEN, JOURNAL_TYPE, ID


SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.LOYALTEK_CALLS;



-- ID, METHOD, SENDERABLE_TYPE, SENDERABLE_ID, MESSAGE, CREATED_AT, UPDATED_AT, RESPONSE, CARD_ID, ACCOUNT_ID


INSERT INTO 
    MY_DATABASE.PUBLIC.LOYALTEK_CALLS (ID, METHOD, SENDERABLE_TYPE, SENDERABLE_ID, MESSAGE, CREATED_AT, UPDATED_AT, RESPONSE, CARD_ID)
SELECT
    ID, METHOD, SENDERABLE_TYPE, SENDERABLE_ID, MESSAGE, CREATED_AT, UPDATED_AT, RESPONSE, CARD_ID
FROM    
    MY_DATABASE.TEMP_HOLD.LOYALTEK_CALLS__20230629093452
ORDER BY CREATED_AT ASC;





SELECT * FROM MY_DATABASE.PUBLIC.LOYALTEK_CALLS WHERE CREATED_AT::string = '2023-06-28 05:38:32.450'; -- '2023-06-28 05:38:30.061'

SELECT * FROM MY_DATABASE.KPI.KPI ORDER BY START_AT DESC;



SELECT * FROM MY_DATABASE.PUBLIC.MIGRATION_MONITORING;

SELECT TABLE_NAME, NUM_ROWS_SNWF, NUM_ROWS_PROD, NUM_ROWS_PROD - NUM_ROWS_SNWF AS Difference  FROM MY_DATABASE.PUBLIC.MIGRATION_MONITORING order by Difference DESC;

-- 8741288

/*

Table: BILLING_INVOICE_LINES
Created on: 6/13/2023, 2:43:12 PM
Owner: SYSADMIN
Rows: 330,370
Size: 10.9MB


Table: BILLING_INVOICE_LINES
Created on: 6/13/2023, 2:43:12 PM
Owner: SYSADMIN
Rows: 343,651
Size: 11.8MB

*/


SELECT ID, COUNT(ID) AS NUM_ID FROM MY_DATABASE.PUBLIC.EXPENSES GROUP BY ID ORDER BY NUM_ID DESC;


SELECT MAX(disbursement_invoices.created_at) FROM disbursements LEFT OUTER JOIN disbursement_invoices ON disbursement_invoices.id = disbursements.disbursement_invoice_id;

SELECT MAX(STARTED_AT) FROM MY_DATABASE.PUBLIC.BILLING_INVOICE_LINES;

SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.EXPENSE_EXPENSE_CATEGORY_GUESSES;

-- MASTERCARD_TRANSACTIONS, ACCOUNT_MOVEMENTS, EXPENSE_EXPENSE_CATEGORY_GUESSES


SELECT SUM(QUANTITY) AS QUANTITY, SUM(AMOUNT_TAX_EXCL) AS AMOUNT_TAX_EXCL FROM MY_DATABASE.PUBLIC.BILLING_INVOICE_LINES;



-- None Flyingblue companies

SELECT 
     CASE WHEN acc.INDUSTRY IS NULL THEN 'Uncategorized'
     ELSE acc.INDUSTRY
     END AS INDUSTRY, 
     ROUND(SUM(exp.AMOUNT/-1), 2) AS Total_Expense, COUNT(*) AS Number_of_Expenses, ROUND(AVG(exp.AMOUNT/-1), 2) AS Average_Expense
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID 
INNER JOIN
    SAS_APPS.SALESFORCE.ACCOUNT acc
ON 
    exp.COMPANY_ID = acc.MOONCARDCOMPANYID__C    
WHERE 
     LOWER(mcrd_mch.NAME) LIKE '%carglass%'
GROUP BY acc.INDUSTRY
ORDER BY Total_Expense DESC;


SELECT 
     CASE WHEN acc.COMPANYSIZE__C IS NULL THEN 'Uncategorized'
     ELSE acc.COMPANYSIZE__C
     END AS COMPANY_SIZE, 
     ROUND(SUM(exp.AMOUNT/-1), 2) AS "Volume_Uber"
FROM
    MY_DATABASE.PUBLIC.EXPENSES exp
INNER JOIN 
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    exp.SOURCE_ID = crd_exp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mcrd_mch
ON
    crd_exp.MASTERCARD_MERCHANT_ID = mcrd_mch.ID 
INNER JOIN
    SAS_APPS.SALESFORCE.ACCOUNT acc
ON 
    exp.COMPANY_ID = acc.MOONCARDCOMPANYID__C    
WHERE 
    exp.CREATED_AT BETWEEN TO_DATE('2021-01-01') AND TO_DATE('2022-12-31') AND mcrd_mch.MERCHANT_CATEGORY_CODE IN (4121, 4119, 4789) AND (( LOWER(mcrd_mch.NAME) LIKE 'uber%' )OR ( LOWER(mcrd_mch.NAME) LIKE 'ubr%' ) )  AND lower(mcrd_mch.NAME) NOT IN ('uber* eats', 'ubersuggest', 'uberconference', 'uberpayment', 'uber*eats', 'uber eats','uberconference san francisco ca', 'uberuae_eats', 'ubersuggest -neilpatel')
    --( LOWER(mcrd_mch.NAME) LIKE 'uber%' AND lower(mcrd_mch.NAME) NOT IN ('ubersuggest', 'uberconference', 'uberpayment', 'uber*eats', 'uber eats','uberconference san francisco ca', 'uberuae_eats', 'ubersuggest -neilpatel')) 
GROUP BY COMPANY_SIZE    
ORDER BY COMPANY_SIZE ASC;     


-- :use_flying_blue


SELECT COMPANY_SIZE, ROUND(SUM(Expense_Volume), 2) AS "Expense_Volume" FROM ( 
SELECT 
     CASE WHEN acc.COMPANYSIZE__C IS NULL THEN 'Uncategorized'
     ELSE acc.COMPANYSIZE__C
     END AS COMPANY_SIZE,
     comp.ID, PARSE_JSON(comp.FLYING_BLUE_ATTRIBUTES):use_flying_blue AS flying_blue, 
     exp.AMOUNT/-1 AS "Expense_Volume",
     --ROUND(SUM(exp.AMOUNT/-1), 2) AS "Expense_Volume",
     LEFT(DATE_TRUNC('YEAR', exp.CREATED_AT), 4) AS PERIOD 
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp
INNER JOIN
    MY_DATABASE.PUBLIC.EXPENSES exp
ON
    comp.ID = exp.COMPANY_ID
INNER JOIN
    SAS_APPS.SALESFORCE.ACCOUNT acc
ON 
    exp.COMPANY_ID = acc.MOONCARDCOMPANYID__C      
WHERE flying_blue != 'true'
      AND comp.CONTRACT = 0
      AND exp.CREATED_AT BETWEEN '2022-06-01' AND '2023-06-30'
)      
GROUP BY COMPANY_SIZE    
--ORDER BY PERIOD DESC       
;




SELECT *
FROM MY_DATABASE.INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_SCHEMA = 'PUBLIC';
--AND COLUMN_NAME = 'id'



/*

TABLE_CATALOG AS database,
TABLE_SCHEMA AS schema,
TABLE_NAME AS table,
CARDINALITY AS row_count

*/

SELECT 
  *
FROM 
  INFORMATION_SCHEMA.TABLES
WHERE 
  TABLE_TYPE = 'BASE TABLE'
  AND TABLE_SCHEMA = 'PUBLIC'
  AND TABLE_CATALOG = 'MY_DATABASE';


SELECT 
  DISTINCT LOWER(TABLE_NAME) as TABLE_NAME, ROW_COUNT
FROM 
  INFORMATION_SCHEMA.TABLES
WHERE 
  TABLE_TYPE = 'BASE TABLE'
  --AND LOWER(TABLE_NAME) IN ('accounting_firms')
  AND TABLE_SCHEMA = 'PUBLIC'
  AND TABLE_CATALOG = 'MY_DATABASE'
  ORDER BY LOWER(TABLE_NAME);


-- ,'active_storage_attachments','accounting_lines','accounts'

SELECT * FROM MY_DATABASE.PUBLIC.MIGRATION_MONITORING;



-- account_statements
SELECT ID, COUNT(ID) AS NUM_ID FROM MY_DATABASE.PUBLIC.ACCOUNT_STATEMENTS GROUP BY ID ORDER BY NUM_ID DESC;


-- 5,365,900 - 5,364,593
-- 5,698,362


SELECT DISTINCT * FROM MY_DATABASE.PUBLIC.COMPANIES WHERE GROUP_ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.GROUPS WHERE NAME = 'UCANSS');

-- ID, NAME, CREATED_AT, BILLING_EMAILS


SELECT 
    comp.ID, comp.NAME, comp.CREATED_AT AS COMPANY_CREATION_DATE, REPLACE(REPLACE(comp.BILLING_EMAILS,'["',''), '"]','') AS BILLING_EMAILS, usr.EMAIL AS OWNER_EMAIL, COUNT(crd.COMPANY_ID) AS NUMBER_OF_CARDS, MIN(exp.CREATED_AT) AS FIRST_EXPENSE_DATE
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp
INNER JOIN
    MY_DATABASE.PUBLIC.USERs usr
ON
    comp.OWNER_ID = usr.ID
LEFT JOIN
    MY_DATABASE.PUBLIC.CARDS crd
ON
    comp.ID = crd.COMPANY_ID    
LEFT JOIN
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    crd.ID = crd_exp.CARD_ID
LEFT JOIN
    MY_DATABASE.PUBLIC.EXPENSES exp
ON
    crd_exp.ID = exp.SOURCE_ID
    
WHERE 
    GROUP_ID IN (SELECT ID FROM MY_DATABASE.PUBLIC.GROUPS WHERE NAME = 'UCANSS') -- AND SOURCE_TYPE = 'CardExpense'
GROUP BY  comp.ID, comp.NAME, comp.CREATED_AT, comp.BILLING_EMAILS, usr.EMAIL   
    ;


SELECT DISTINCT SOURCE_TYPE FROM MY_DATABASE.PUBLIC.EXPENSES;


SELECT 
    comp.ID,
    comp.NAME,
    comp.CREATED_AT AS COMPANY_CREATION_DATE,
    REPLACE(REPLACE(comp.BILLING_EMAILS, '["', ''), '"]', '') AS OWNER_EMAIL,
    usr.EMAIL AS OWNER_EMAIL,
    COUNT(crd.COMPANY_ID) AS NUMBER_OF_CARDS,
    MIN(exp.CREATED_AT) AS FIRST_EXPENSE_DATE
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp
INNER JOIN
    MY_DATABASE.PUBLIC.USERS usr
ON
    comp.OWNER_ID = usr.ID
LEFT JOIN
    MY_DATABASE.PUBLIC.CARDS crd
ON
    comp.ID = crd.COMPANY_ID    
LEFT JOIN
    MY_DATABASE.PUBLIC.CARD_EXPENSES crd_exp
ON
    crd.ID = crd_exp.CARD_ID
LEFT JOIN
    MY_DATABASE.PUBLIC.EXPENSES exp
ON
    crd_exp.ID = exp.SOURCE_ID
WHERE 
    comp.GROUP_ID = (SELECT ID FROM MY_DATABASE.PUBLIC.GROUPS WHERE NAME = 'UCANSS')
GROUP BY
    comp.ID,
    comp.NAME,
    comp.CREATED_AT,
    comp.BILLING_EMAILS
    usr.EMAIL;

SELECT DISTINCT BUSINESS_TYPE FROM MY_DATABASE.PUBLIC.COMPANIES;



SELECT DISTINCT acc.WHERAREYOU__C FROM SAS_APPS.SALESFORCE.ACCOUNT acc WHERE acc.WHERAREYOU__C IS NOT NULL;


SELECT * FROM MY_DATABASE.PUBLIC.COMPANIES WHERE LEFT(PARSE_JSON(FLAGS):whereareyou::string, 1) = 7 AND CLOSED_AT IS NULL;

SELECT * FROM MY_DATABASE.PUBLIC.COMPANIES WHERE LEFT(PARSE_JSON(FLAGS):whereareyou::string, 1) = 7 AND CREATED_AT > '2021-07-31' AND CLOSED_AT IS NULL;

-- 4,144 active companies
-- 2,369 active companies created less than 2 years

-- (2,369 * 100)/ 4,144

SELECT DISTINCT PARSE_JSON(FLAGS):whereareyou::string FROM MY_DATABASE.PUBLIC.COMPANIES;


SELECT DISTINCT BUSINESS_TYPE FROM MY_DATABASE.PUBLIC.COMPANIES WHERE BUSINESS_TYPE IN (2, 4) AND LEFT(PARSE_JSON(FLAGS):whereareyou::string, 1) = 7 AND CLOSED_AT IS NULL;

SELECT 
    ROUND(AVG(ROUND(2023- LEFT(usr.BIRTHDATE, 4),0))) AS AGE --, comp.* 
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp
INNER JOIN
    MY_DATABASE.PUBLIC.USERS usr
ON
    comp.OWNER_ID = usr.ID
WHERE 
    BUSINESS_TYPE IN (2, 4) 
    AND LEFT(PARSE_JSON(FLAGS):whereareyou::string, 1) = 7 
    AND CLOSED_AT IS NULL;



-- PARSE_JSON(comp.FLAGS):mvc_created_at::date



SELECT DISTINCT NIF FROM MY_DATABASE.PUBLIC.ADDRESSES;
-- Company


SELECT DISTINCT KYC_ATTRIBUTES, REGISTRAR, PARSE_JSON(FLAGS):legal_registration_date FROM MY_DATABASE.PUBLIC.COMPANIES;

-- {"other"=>0, "publicly_traded"=>1, "independent"=>2, "non_profit"=>3, "freelance"=>4}
--  acc.ID AS "SF ID",

SELECT 
    -- acc.ID AS "SF ID", comp.ID
    comp.ID, comp.NAME AS NOM, PARSE_JSON(comp.FLAGS):mvc_created_at::datetime AS MVC_create_date, comp.SIREN, 
    comp.VAT_NUMBER, PARSE_JSON(KYC_ATTRIBUTES):kyc_legal_registration_date::string AS Registration_Date, comp.APE AS NAF, 
    CASE WHEN comp.BUSINESS_TYPE = 0 THEN 'Other'
         WHEN comp.BUSINESS_TYPE = 1 THEN 'Publicly Traded'
         WHEN comp.BUSINESS_TYPE = 2 THEN 'Independent'
         WHEN comp.BUSINESS_TYPE = 3 THEN 'Non Profit'
         WHEN comp.BUSINESS_TYPE = 4 THEN 'Freelance'
    ELSE comp.BUSINESS_TYPE::string END BUSINESS_TYPE,
    addr.COUNTRY,
    usr.email as Admin_Email,
    addr.STREET, addr.CITY, addr.POSTCODE, addr.COUNTRY
    --bow.FIRSTNAME, bow.LASTNAME,bow.MIDDLE_NAMES, bow.BIRTHDATE, bow.BIRTHPLACE
FROM
    MY_DATABASE.PUBLIC.COMPANIES comp
INNER JOIN
    SAS_APPS.SALESFORCE.ACCOUNT acc
ON 
    comp.ID = acc.MOONCARDCOMPANYID__C
INNER JOIN
    MY_DATABASE.PUBLIC.USERS usr
ON
    comp.OWNER_ID = usr.ID    
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    comp.ID = addr.ADDRESSABLE_ID    
WHERE
    BUSINESS_TYPE NOT IN (2, 4) 
    AND LEFT(PARSE_JSON(FLAGS):whereareyou::string, 1) IN  (5, 6, 7, 8) 
    AND comp.APE IS NOT NULL
    AND comp.CONTRACT = 0
    AND CLOSED_AT IS NULL
    AND ADDRESSABLE_TYPE = 'Company'
ORDER BY comp.NAME DESC    
;    

-- ('57635c9b-5a2a-4848-b8d7-c7f3b738d983', 'c450a56e-d0a4-44cd-8ead-c88eddc43861', '48b81cce-d3d9-4bd5-b75c-4aa7ef8fe0e9', '992c3a6e-2671-4164-bf1e-f337543f1aae', '9988e573-c985-4278-a448-c65c1340cf19', '9094bf66-e8c2-4755-bcf4-ffd67c8b0b96', 'f4b5ac43-a5ab-44c6-9533-68ac68fe581f', '24d584fe-1b4f-4ac2-bf2b-e703ff9efee4', '5e256f33-a64a-4fda-8791-8eaad930ac53', '4c1244a8-73ce-4f84-9e29-f63d2dcea8c3', '6065a21a-cf2c-411c-9bfc-6cf5784b3e33', 'e32ee54e-b815-4be3-b281-cea813fdb558', 'feca75a2-e496-4da4-94d8-0e5477d20ced', '4e3c1b27-8a45-4de2-8208-df6940fdbf94', '79cf7d93-9aaf-48ed-9cce-54e3126cd007', ac3fb096-7140-4214-9ed5-2251c855405d)

/*

0 : private
1 : public mobility contract for DAE
2 : free 2 move  contract
3 : public market mobility
4 :   public market corporate

enum contract_type: { executive_officer: 0, employee: 1, shareholder: 2, other: 3 }, _prefix: :contract_type
*/

SELECT 
    comp.ID, bow.FIRSTNAME, bow.LASTNAME,bow.MIDDLE_NAMES, bow.BIRTHDATE, bow.BIRTHPLACE,
    addr.STREET, addr.CITY, addr.POSTCODE, addr.COUNTRY, comp.CREATED_AT, bow.SHARE_PERCENT, bow.NATIONALITY, 
    CASE WHEN bow.contract_type = 0 THEN 'executive_officer'
         WHEN bow.contract_type = 1 THEN 'employee'
         WHEN bow.contract_type = 2 THEN 'shareholder'
         WHEN bow.contract_type = 3 THEN 'other'
    ELSE bow.contract_type::string END AS "Contract type"         
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp
INNER JOIN
    MY_DATABASE.PUBLIC.BENEFICIAL_OWNERS bow
ON
    comp.ID = bow.COMPANY_ID
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    comp.ID = addr.ADDRESSABLE_ID
WHERE 
    BUSINESS_TYPE IN (2, 4) 
    AND LEFT(PARSE_JSON(FLAGS):whereareyou::string, 1) IN  (5, 6, 7, 8) 
    AND CLOSED_AT IS NULL
    AND ADDRESSABLE_TYPE = 'Company';



-- new request

SELECT 
    -- acc.ID AS "SF ID", comp.ID
    comp.ID, comp.NAME AS NOM, PARSE_JSON(comp.FLAGS):mvc_created_at::datetime AS MVC_create_date, comp.SIREN, 
    comp.VAT_NUMBER, PARSE_JSON(KYC_ATTRIBUTES):kyc_legal_registration_date::string AS Registration_Date, comp.APE AS NAF, 
    CASE WHEN comp.BUSINESS_TYPE = 0 THEN 'Other'
         WHEN comp.BUSINESS_TYPE = 1 THEN 'Publicly Traded'
         WHEN comp.BUSINESS_TYPE = 2 THEN 'Independent'
         WHEN comp.BUSINESS_TYPE = 3 THEN 'Non Profit'
         WHEN comp.BUSINESS_TYPE = 4 THEN 'Freelance'
    ELSE comp.BUSINESS_TYPE::string END BUSINESS_TYPE,
    addr.COUNTRY,
    usr.email as Admin_Email,
    addr.STREET, addr.CITY, addr.POSTCODE, addr.COUNTRY
    --bow.FIRSTNAME, bow.LASTNAME,bow.MIDDLE_NAMES, bow.BIRTHDATE, bow.BIRTHPLACE
FROM
    MY_DATABASE.PUBLIC.COMPANIES comp
INNER JOIN
    SAS_APPS.SALESFORCE.ACCOUNT acc
ON 
    comp.ID = acc.MOONCARDCOMPANYID__C
INNER JOIN
    MY_DATABASE.PUBLIC.USERS usr
ON
    comp.OWNER_ID = usr.ID    
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    comp.ID = addr.ADDRESSABLE_ID    
WHERE
    BUSINESS_TYPE NOT IN (2, 4) 
    AND LEFT(PARSE_JSON(FLAGS):whereareyou::string, 1) IN  (5, 6, 7, 8) 
    AND comp.APE IS NOT NULL
    AND comp.CONTRACT = 0
    AND CLOSED_AT IS NULL
    AND ADDRESSABLE_TYPE = 'Company'
    AND comp.ID IN ('57635c9b-5a2a-4848-b8d7-c7f3b738d983', 'c450a56e-d0a4-44cd-8ead-c88eddc43861', '48b81cce-d3d9-4bd5-b75c-4aa7ef8fe0e9', '992c3a6e-2671-4164-bf1e-f337543f1aae', '9988e573-c985-4278-a448-c65c1340cf19', '9094bf66-e8c2-4755-bcf4-ffd67c8b0b96', 'f4b5ac43-a5ab-44c6-9533-68ac68fe581f', '24d584fe-1b4f-4ac2-bf2b-e703ff9efee4', '5e256f33-a64a-4fda-8791-8eaad930ac53', '4c1244a8-73ce-4f84-9e29-f63d2dcea8c3', '6065a21a-cf2c-411c-9bfc-6cf5784b3e33', 'e32ee54e-b815-4be3-b281-cea813fdb558', 'feca75a2-e496-4da4-94d8-0e5477d20ced', '4e3c1b27-8a45-4de2-8208-df6940fdbf94', '79cf7d93-9aaf-48ed-9cce-54e3126cd007', 'ac3fb096-7140-4214-9ed5-2251c855405d')
ORDER BY comp.NAME DESC    
;    


SELECT 
    comp.ID, bow.FIRSTNAME, bow.LASTNAME,bow.MIDDLE_NAMES, bow.BIRTHDATE, bow.BIRTHPLACE,
    addr.STREET, addr.CITY, addr.POSTCODE, addr.COUNTRY, comp.CREATED_AT, bow.SHARE_PERCENT, bow.NATIONALITY, 
    CASE WHEN bow.contract_type = 0 THEN 'executive_officer'
         WHEN bow.contract_type = 1 THEN 'employee'
         WHEN bow.contract_type = 2 THEN 'shareholder'
         WHEN bow.contract_type = 3 THEN 'other'
    ELSE bow.contract_type::string END AS "Contract type"         
FROM 
    MY_DATABASE.PUBLIC.COMPANIES comp
INNER JOIN
    MY_DATABASE.PUBLIC.BENEFICIAL_OWNERS bow
ON
    comp.ID = bow.COMPANY_ID
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    comp.ID = addr.ADDRESSABLE_ID
WHERE 
    BUSINESS_TYPE NOT IN (2, 4) 
    AND LEFT(PARSE_JSON(FLAGS):whereareyou::string, 1) IN  (5, 6, 7, 8) 
    AND CLOSED_AT IS NULL
    AND ADDRESSABLE_TYPE = 'Company'--BeneficialOwner
    AND comp.ID IN  ('57635c9b-5a2a-4848-b8d7-c7f3b738d983', 'c450a56e-d0a4-44cd-8ead-c88eddc43861', '48b81cce-d3d9-4bd5-b75c-4aa7ef8fe0e9', '992c3a6e-2671-4164-bf1e-f337543f1aae', '9988e573-c985-4278-a448-c65c1340cf19', '9094bf66-e8c2-4755-bcf4-ffd67c8b0b96', 'f4b5ac43-a5ab-44c6-9533-68ac68fe581f', '24d584fe-1b4f-4ac2-bf2b-e703ff9efee4', '5e256f33-a64a-4fda-8791-8eaad930ac53', '4c1244a8-73ce-4f84-9e29-f63d2dcea8c3', '6065a21a-cf2c-411c-9bfc-6cf5784b3e33', 'e32ee54e-b815-4be3-b281-cea813fdb558', 'feca75a2-e496-4da4-94d8-0e5477d20ced', '4e3c1b27-8a45-4de2-8208-df6940fdbf94', '79cf7d93-9aaf-48ed-9cce-54e3126cd007', 'ac3fb096-7140-4214-9ed5-2251c855405d')
    ;


-- ('57635c9b-5a2a-4848-b8d7-c7f3b738d983', 'c450a56e-d0a4-44cd-8ead-c88eddc43861', '48b81cce-d3d9-4bd5-b75c-4aa7ef8fe0e9', '992c3a6e-2671-4164-bf1e-f337543f1aae', '9988e573-c985-4278-a448-c65c1340cf19', '9094bf66-e8c2-4755-bcf4-ffd67c8b0b96', 'f4b5ac43-a5ab-44c6-9533-68ac68fe581f', '24d584fe-1b4f-4ac2-bf2b-e703ff9efee4', '5e256f33-a64a-4fda-8791-8eaad930ac53', '4c1244a8-73ce-4f84-9e29-f63d2dcea8c3', '6065a21a-cf2c-411c-9bfc-6cf5784b3e33', 'e32ee54e-b815-4be3-b281-cea813fdb558', 'feca75a2-e496-4da4-94d8-0e5477d20ced', '4e3c1b27-8a45-4de2-8208-df6940fdbf94', '79cf7d93-9aaf-48ed-9cce-54e3126cd007', 'ac3fb096-7140-4214-9ed5-2251c855405d')






SELECT * FROM MY_DATABASE.PUBLIC.BENEFICIAL_OWNERS WHERE COMPANY_ID IS NULL IN  ('44ffbee0-8431-48fc-805b-ca56cdb6a9b6', '5a895203-11af-4a1e-b393-478502abac93', '3e02a238-c30f-4066-9de2-71de498a1c93') ;



SELECT * FROM MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS WHERE LOWER(NAME) IN ('tokheim');


SELECT MAX(STARTED_AT) FROM MY_DATABASE.PUBLIC.BILLING_INVOICE_LINES; 
-- 347,114 - 343,651
-- 2023-10-01

SELECT DISTINCT ADDRESSABLE_TYPE FROM MY_DATABASE.PUBLIC.ADDRESSES; 

SELECT *  FROM MY_DATABASE.PUBLIC.ADDRESSES WHERE ADDRESSABLE_TYPE = 'BeneficialOwner';

-- ('44ffbee0-8431-48fc-805b-ca56cdb6a9b6', '5a895203-11af-4a1e-b393-478502abac93', '3e02a238-c30f-4066-9de2-71de498a1c93')    


SELECT 
    comp.ID AS COMP_ID, bow.*, addr.*  
FROM 
    MY_DATABASE.PUBLIC.ADDRESSES addr
INNER JOIN
    MY_DATABASE.PUBLIC.BENEFICIAL_OWNERS bow
ON
    bow.ID = addr.ADDRESSABLE_ID
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    bow.COMPANY_ID = comp.ID    


INNER JOIN
    SAS_APPS.SALESFORCE.ACCOUNT acc
ON 
    comp.ID = acc.MOONCARDCOMPANYID__C
INNER JOIN
    MY_DATABASE.PUBLIC.USERS usr
ON
    comp.OWNER_ID = usr.ID   
    

WHERE ADDRESSABLE_TYPE = 'BeneficialOwner'
      AND LEFT(PARSE_JSON(comp.FLAGS):whereareyou::string, 1) IN  (5, 6, 7, 8)
      AND comp.BUSINESS_TYPE NOT IN (2, 4) 
      AND comp.ID IN ('57635c9b-5a2a-4848-b8d7-c7f3b738d983', 'c450a56e-d0a4-44cd-8ead-c88eddc43861', '48b81cce-d3d9-4bd5-b75c-4aa7ef8fe0e9', '992c3a6e-2671-4164-bf1e-f337543f1aae', '9988e573-c985-4278-a448-c65c1340cf19', '9094bf66-e8c2-4755-bcf4-ffd67c8b0b96', 'f4b5ac43-a5ab-44c6-9533-68ac68fe581f', '24d584fe-1b4f-4ac2-bf2b-e703ff9efee4', '5e256f33-a64a-4fda-8791-8eaad930ac53', '4c1244a8-73ce-4f84-9e29-f63d2dcea8c3', '6065a21a-cf2c-411c-9bfc-6cf5784b3e33', 'e32ee54e-b815-4be3-b281-cea813fdb558', 'feca75a2-e496-4da4-94d8-0e5477d20ced', '4e3c1b27-8a45-4de2-8208-df6940fdbf94', '79cf7d93-9aaf-48ed-9cce-54e3126cd007', 'ac3fb096-7140-4214-9ed5-2251c855405d')
ORDER BY comp.ID      
      ;

-- ('40e4b3d4-e0ec-46bb-8c8b-fe1112185394','3723b0d1-32d7-483e-978f-7fe0794b0a27', '5d259614-bc24-4f54-90aa-b767bdf373f1','52aa104e-da1f-42c2-ab84-57b16fea4fc6')

SELECT * FROM  MY_DATABASE.PUBLIC.COMPANIES comp WHERE comp.ID IN ('40e4b3d4-e0ec-46bb-8c8b-fe1112185394','3723b0d1-32d7-483e-978f-7fe0794b0a27', '5d259614-bc24-4f54-90aa-b767bdf373f1','52aa104e-da1f-42c2-ab84-57b16fea4fc6');




SELECT 
    
    
    comp.ID AS COMP_ID_Beneficial_Owners, bow.FIRSTNAME, bow.LASTNAME,bow.MIDDLE_NAMES, bow.BIRTHDATE, bow.BIRTHPLACE,
    addr.STREET, addr.CITY, addr.POSTCODE, addr.COUNTRY, comp.CREATED_AT, bow.SHARE_PERCENT, bow.NATIONALITY, 
    CASE WHEN bow.contract_type = 0 THEN 'executive_officer'
         WHEN bow.contract_type = 1 THEN 'employee'
         WHEN bow.contract_type = 2 THEN 'shareholder'
         WHEN bow.contract_type = 3 THEN 'other'
    ELSE bow.contract_type::string END AS "Contract type"  
    
    
FROM 
    MY_DATABASE.PUBLIC.ADDRESSES addr
INNER JOIN
    MY_DATABASE.PUBLIC.BENEFICIAL_OWNERS bow
ON
    bow.ID = addr.ADDRESSABLE_ID
INNER JOIN
    MY_DATABASE.PUBLIC.COMPANIES comp
ON
    bow.COMPANY_ID = comp.ID    


INNER JOIN
    SAS_APPS.SALESFORCE.ACCOUNT acc
ON 
    comp.ID = acc.MOONCARDCOMPANYID__C
INNER JOIN
    MY_DATABASE.PUBLIC.USERS usr
ON
    comp.OWNER_ID = usr.ID   
    

WHERE ADDRESSABLE_TYPE = 'BeneficialOwner'
      AND LEFT(PARSE_JSON(comp.FLAGS):whereareyou::string, 1) IN  (5, 6, 7, 8)
      AND comp.BUSINESS_TYPE NOT IN (2, 4) 
      AND comp.ID IN ('57635c9b-5a2a-4848-b8d7-c7f3b738d983', 'c450a56e-d0a4-44cd-8ead-c88eddc43861', '48b81cce-d3d9-4bd5-b75c-4aa7ef8fe0e9', '992c3a6e-2671-4164-bf1e-f337543f1aae', '9988e573-c985-4278-a448-c65c1340cf19', '9094bf66-e8c2-4755-bcf4-ffd67c8b0b96', 'f4b5ac43-a5ab-44c6-9533-68ac68fe581f', '24d584fe-1b4f-4ac2-bf2b-e703ff9efee4', '5e256f33-a64a-4fda-8791-8eaad930ac53', '4c1244a8-73ce-4f84-9e29-f63d2dcea8c3', '6065a21a-cf2c-411c-9bfc-6cf5784b3e33', 'e32ee54e-b815-4be3-b281-cea813fdb558', 'feca75a2-e496-4da4-94d8-0e5477d20ced', '4e3c1b27-8a45-4de2-8208-df6940fdbf94', '79cf7d93-9aaf-48ed-9cce-54e3126cd007', 'ac3fb096-7140-4214-9ed5-2251c855405d')
ORDER BY comp.ID  ;


--SELECT COUNT(DISTINCT COMPANY_ID) FROM (

SELECT 
    compny.*, beneown.* FROM
    (SELECT 
    comp.ID AS COMPANY_ID, comp.NAME AS NOM, PARSE_JSON(comp.FLAGS):mvc_created_at::datetime AS MVC_create_date, comp.SIREN, 
    comp.VAT_NUMBER, PARSE_JSON(KYC_ATTRIBUTES):kyc_legal_registration_date::string AS Registration_Date, comp.APE AS NAF, 
    CASE WHEN comp.BUSINESS_TYPE = 0 THEN 'Other'
         WHEN comp.BUSINESS_TYPE = 1 THEN 'Publicly Traded'
         WHEN comp.BUSINESS_TYPE = 2 THEN 'Independent'
         WHEN comp.BUSINESS_TYPE = 3 THEN 'Non Profit'
         WHEN comp.BUSINESS_TYPE = 4 THEN 'Freelance'
    ELSE comp.BUSINESS_TYPE::string END BUSINESS_TYPE,
    addr.COUNTRY,
    usr.email as Admin_Email,
    addr.STREET, addr.CITY, addr.POSTCODE, addr.COUNTRY
FROM
    MY_DATABASE.PUBLIC.COMPANIES comp
INNER JOIN
    SAS_APPS.SALESFORCE.ACCOUNT acc
ON 
    comp.ID = acc.MOONCARDCOMPANYID__C
INNER JOIN
    MY_DATABASE.PUBLIC.USERS usr
ON
    comp.OWNER_ID = usr.ID    
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    comp.ID = addr.ADDRESSABLE_ID    
WHERE
    BUSINESS_TYPE NOT IN (2, 4) 
    AND LEFT(PARSE_JSON(FLAGS):whereareyou::string, 1) IN  (5, 6, 7, 8) 
    AND comp.APE IS NOT NULL
    AND comp.CONTRACT = 0
    AND CLOSED_AT IS NULL
    AND ADDRESSABLE_TYPE = 'Company'
    AND comp.ID IN ('57635c9b-5a2a-4848-b8d7-c7f3b738d983', 'c450a56e-d0a4-44cd-8ead-c88eddc43861', '48b81cce-d3d9-4bd5-b75c-4aa7ef8fe0e9', '992c3a6e-2671-4164-bf1e-f337543f1aae', '9988e573-c985-4278-a448-c65c1340cf19', '9094bf66-e8c2-4755-bcf4-ffd67c8b0b96', 'f4b5ac43-a5ab-44c6-9533-68ac68fe581f', '24d584fe-1b4f-4ac2-bf2b-e703ff9efee4', '5e256f33-a64a-4fda-8791-8eaad930ac53', '4c1244a8-73ce-4f84-9e29-f63d2dcea8c3', '6065a21a-cf2c-411c-9bfc-6cf5784b3e33', 'e32ee54e-b815-4be3-b281-cea813fdb558', 'feca75a2-e496-4da4-94d8-0e5477d20ced', '4e3c1b27-8a45-4de2-8208-df6940fdbf94', '79cf7d93-9aaf-48ed-9cce-54e3126cd007', 'ac3fb096-7140-4214-9ed5-2251c855405d')
ORDER BY comp.NAME DESC ) AS compny
LEFT JOIN
      (SELECT 


      comp.ID AS COMPANY_ID_IN_Beneficial_Owners, bow.FIRSTNAME, bow.LASTNAME,bow.MIDDLE_NAMES, bow.BIRTHDATE, bow.BIRTHPLACE,
      addr.STREET AS Ben_Owner_STREET, addr.CITY AS Ben_Owner_CITY, addr.POSTCODE AS Ben_Owner_POSTCODE, addr.COUNTRY AS Ben_Owner_COUNTRY, bow.CREATED_AT, bow.SHARE_PERCENT, bow.NATIONALITY, 
      CASE WHEN bow.contract_type = 0 THEN 'executive_officer'
           WHEN bow.contract_type = 1 THEN 'employee'
           WHEN bow.contract_type = 2 THEN 'shareholder'
           WHEN bow.contract_type = 3 THEN 'other'
      ELSE bow.contract_type::string END AS "Contract type"  
    
    
      FROM 
          MY_DATABASE.PUBLIC.ADDRESSES addr
      INNER JOIN
          MY_DATABASE.PUBLIC.BENEFICIAL_OWNERS bow
      ON
          bow.ID = addr.ADDRESSABLE_ID
      INNER JOIN
          MY_DATABASE.PUBLIC.COMPANIES comp
      ON
          bow.COMPANY_ID = comp.ID    


      INNER JOIN
          SAS_APPS.SALESFORCE.ACCOUNT acc
      ON 
          comp.ID = acc.MOONCARDCOMPANYID__C
      INNER JOIN
          MY_DATABASE.PUBLIC.USERS usr
      ON
          comp.OWNER_ID = usr.ID   


      WHERE ADDRESSABLE_TYPE = 'BeneficialOwner'
            AND LEFT(PARSE_JSON(comp.FLAGS):whereareyou::string, 1) IN  (5, 6, 7, 8)
            AND comp.BUSINESS_TYPE NOT IN (2, 4) 
            AND comp.ID IN ('57635c9b-5a2a-4848-b8d7-c7f3b738d983', 'c450a56e-d0a4-44cd-8ead-c88eddc43861', '48b81cce-d3d9-4bd5-b75c-4aa7ef8fe0e9', '992c3a6e-2671-4164-bf1e-f337543f1aae', '9988e573-c985-4278-a448-c65c1340cf19', '9094bf66-e8c2-4755-bcf4-ffd67c8b0b96', 'f4b5ac43-a5ab-44c6-9533-68ac68fe581f', '24d584fe-1b4f-4ac2-bf2b-e703ff9efee4', '5e256f33-a64a-4fda-8791-8eaad930ac53', '4c1244a8-73ce-4f84-9e29-f63d2dcea8c3', '6065a21a-cf2c-411c-9bfc-6cf5784b3e33', 'e32ee54e-b815-4be3-b281-cea813fdb558', 'feca75a2-e496-4da4-94d8-0e5477d20ced', '4e3c1b27-8a45-4de2-8208-df6940fdbf94', '79cf7d93-9aaf-48ed-9cce-54e3126cd007', 'ac3fb096-7140-4214-9ed5-2251c855405d')
      ORDER BY comp.ID ) AS beneown
ON
    compny.COMPANY_ID = beneown.COMPANY_ID_IN_Beneficial_Owners

--)    
;

--MastercardMerchant

SELECT 
    mrch.ID, addr.STREET, addr.CITY, addr.POSTCODE, addr.COUNTRY
FROM
    MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS mrch
INNER JOIN
    MY_DATABASE.PUBLIC.ADDRESSES addr
ON
    mrch.ID = addr.ADDRESSABLE_ID 
WHERE addr.ADDRESSABLE_TYPE = 'MastercardMerchant'
AND mrch.ID IN ('166462ac-d8e8-4309-9d6f-ea34f0532dc5')
;





DELETE FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES_CALCULATED WHERE ID IN (41653903, 41653904, 41653905, 41653906, 41653907, 41653908, 41653909, 41653910, 41653911, 41653912, 41653913, 41653914, 41653915, 41653916, 41653917, 41653918, 41653919, 41653920, 41653921, 41653922, 41653923, 41653924, 41653925, 41653926, 41653927, 41653928, 41653929, 41653930, 41653931, 41653932, 41653933, 41653934, 41653935, 41653936, 41653937, 41653938, 41653939, 41653940, 41653941, 41653942, 41653943, 41653944, 41653945, 41653946, 41653947, 41653948, 41653949, 41653950, 41653951, 41653952, 41653953, 41653954, 41653955, 41653956, 41653957, 41653958, 41653959, 41653960, 41653961, 41653962, 41653963, 41653964, 41653966, 41653967, 41653968, 41653969, 41653970, 41653971, 41653972, 41653974, 41653975, 41653976, 41653977, 41653978, 41653979, 41653980, 41653981, 41653982, 41653983, 41653986, 41653987, 41653988, 41653989, 41653993, 41653996, 41653999, 41654002, 41654003, 41654004, 41654006, 41654009, 41654010, 41654012, 41654013, 41654014, 41654015, 41654016, 41654017, 41654018, 41654019);    

SELECT COUNT(*) FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES_CALCULATED;



SELECT mm.*, NUM_ROWS_PROD - NUM_ROWS_SNWF AS Difference FROM MY_DATABASE.PUBLIC.MIGRATION_MONITORING mm order by Difference DESC; -- 16561

SELECT TABLE_NAME, NUM_ROWS_SNWF, NUM_ROWS_PROD, NUM_ROWS_PROD - NUM_ROWS_SNWF AS Difference  FROM MY_DATABASE.PUBLIC.MIGRATION_MONITORING order by Difference DESC;

-- 8741288

/*

Table: BILLING_INVOICE_LINES
Created on: 6/13/2023, 2:43:12 PM
Owner: SYSADMIN
Rows: 330,370
Size: 10.9MB


Table: BILLING_INVOICE_LINES
Created on: 6/13/2023, 2:43:12 PM
Owner: SYSADMIN
Rows: 343,651
Size: 11.8MB

*/


-- ['receipts', 'mastercard_merchants', 'companies','user_profiles', 'workflow_steps', 'mastercard_transactions', 'comments', 'text_messages', 'nitecrest_orders']


SELECT ID, COUNT(ID) AS NUM_ID FROM MY_DATABASE.PUBLIC.ATTENDEES GROUP BY ID HAVING NUM_ID > 1 ORDER BY NUM_ID DESC;


SELECT * FROM MY_DATABASE.PUBLIC.email_validations;


SELECT DISTINCT ADDRESSABLE_TYPE FROM MY_DATABASE.PUBLIC.ADDRESSES;

SELECT * FROM MY_DATABASE.PUBLIC.ADDRESSES ORDER BY CREATED_AT DESC;

SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.ADDRESSES;

-- ['User', 'BeneficialOwner','CardShipping']


SELECT * FROM MY_DATABASE.PUBLIC.ADDRESSES WHERE STREET = '80ebcc8842675fd6bff5dc9178a7fcc35a4592e0bdb0d728d37624517fb18f20';

-- mastercard_merchants --> 803,006

SELECT mm.*, NUM_ROWS_PROD - NUM_ROWS_SNWF AS Difference FROM MY_DATABASE.PUBLIC.MIGRATION_MONITORING mm order by Difference DESC; -- 16561

SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.BANK_ACCOUNTS; -- BILLING_INVOICES

-- 2023-07-31 17:43:27.296
-- 2023-07-31 17:43:27.296

SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.disbursement_invoices;

-- 2023-08-01 04:55:55.861
-- 2023-08-01 14:53:35.655
-- 2023-08-01 16:38:08.883

/*

Table: MASTERCARD_TRANSACTIONS
Created on: 6/13/2023, 11:09:18 AM
Owner: SYSADMIN
Rows: 42,191,521
Rows: 42,191,521
42,191,521 - 42,188,945 - 42,165,303
42,165,303

Size: 6.7GB

*/
SELECT MAX(CREATED_AT) FROM MY_DATABASE.PUBLIC.account_statements; -- expenses

-- 2023-08-01 03:39:06.784
-- 2023-08-01 03:39:06.784
 


SELECT MAX(MASTERCARD_TRANSACTION_ID) FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES;

-- 42158655
SELECT *  FROM MY_DATABASE.PUBLIC.MASTERCARD_INTERCHANGES WHERE MASTERCARD_TRANSACTION_ID = 42158655;







SELECT
    comp.ID AS COMPANY_ID, comp.NAME AS COMPANY_NAME, grp.NAME AS GROUP_NAME, usr.EMAIL AS OWNER_EMAIL
FROM
    MY_DATABASE.PUBLIC.COMPANIES comp
INNER JOIN
    MY_DATABASE.PUBLIC.GROUPS grp 
ON
    comp.GROUP_ID = grp.ID
INNER JOIN
    MY_DATABASE.PUBLIC.USERS usr
ON
    comp.OWNER_ID = usr.ID       
WHERE comp.CONTRACT = 1;    


SELECT DISTINCT MERCHANT_CATEGORY_CODE FROM MY_DATABASE.PUBLIC.MASTERCARD_MERCHANTS;



